
miv-rv32i-systick-blinky.elf:     file format elf32-littleriscv
miv-rv32i-systick-blinky.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00003134 memsz 0x00003134 flags r-x
    LOAD off    0x00005000 vaddr 0x80004000 paddr 0x80003140 align 2**12
         filesz 0x00000070 memsz 0x000000a0 flags rw-
    LOAD off    0x000050a0 vaddr 0x800040a0 paddr 0x800031b0 align 2**12
         filesz 0x00000000 memsz 0x00000060 flags rw-
    LOAD off    0x00005100 vaddr 0x80004100 paddr 0x800031b0 align 2**12
         filesz 0x00000000 memsz 0x00000400 flags rw-

Sections:
Idx Name                       Size      VMA       LMA       File off  Algn  Flags
  0 .entry                     000009e0  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text                      00002750  800009e0  800009e0  000019e0  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .sdata2._global_impure_ptr 00000004  80003130  80003130  00004130  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .sdata                     00000010  80004000  80003140  00005000  2**4  CONTENTS, ALLOC, LOAD, DATA
  4 .data                      00000060  80004010  80003150  00005010  2**4  CONTENTS, ALLOC, LOAD, DATA
  5 .sbss                      00000030  80004070  800031b0  00005070  2**4  ALLOC
  6 .bss                       00000060  800040a0  800031b0  000050a0  2**4  ALLOC
  7 .heap                      00000000  80004100  80004100  00005070  2**4  CONTENTS
  8 .stack                     00000400  80004100  800031b0  00005100  2**4  ALLOC
  9 .riscv.attributes          00000021  00000000  00000000  00005070  2**0  CONTENTS, READONLY
 10 .comment                   00000051  00000000  00000000  00005091  2**0  CONTENTS, READONLY
 11 .debug_line                000034f7  00000000  00000000  000050e2  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info                00003c3c  00000000  00000000  000085d9  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev              00001098  00000000  00000000  0000c215  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges             000002b0  00000000  00000000  0000d2b0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str                 00001393  00000000  00000000  0000d560  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges              00000310  00000000  00000000  0000e8f8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc                 00001863  00000000  00000000  0000ec08  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame               000010d4  00000000  00000000  0001046c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .entry	00000000 .entry
800009e0 l    d  .text	00000000 .text
80003130 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
80004000 l    d  .sdata	00000000 .sdata
80004010 l    d  .data	00000000 .data
80004070 l    d  .sbss	00000000 .sbss
800040a0 l    d  .bss	00000000 .bss
80004100 l    d  .heap	00000000 .heap
80004100 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./src/platform/miv_rv32_hal/miv_rv32_entry.o
800009e0 l       .text	00000000 handle_reset
80000004 l       .entry	00000000 trap_entry
80000090 l       .entry	00000000 generic_trap_handler
80000010 l       .entry	00000000 sw_trap_entry
80000124 l       .entry	00000000 vector_sw_trap_handler
80000020 l       .entry	00000000 tmr_trap_entry
800001b0 l       .entry	00000000 vector_tmr_trap_handler
80000030 l       .entry	00000000 ext_trap_entry
8000023c l       .entry	00000000 vector_ext_trap_handler
80000044 l       .entry	00000000 MGEUI_trap_entry
800002c8 l       .entry	00000000 vector_MGEUI_trap_handler
80000048 l       .entry	00000000 MGECI_trap_entry
80000354 l       .entry	00000000 vector_MGECI_trap_handler
8000005c l       .entry	00000000 MSYS_MIE22_trap_entry
800008cc l       .entry	00000000 vector_SUBSYSR_IRQHandler
80000060 l       .entry	00000000 MSYS_MIE23_trap_entry
80000728 l       .entry	00000000 vector_SUBSYS_IRQHandler
80000064 l       .entry	00000000 MSYS_MIE24_trap_entry
800003e0 l       .entry	00000000 vector_MSYS_EI0_trap_handler
80000068 l       .entry	00000000 MSYS_MIE25_trap_entry
8000046c l       .entry	00000000 vector_MSYS_EI1_trap_handler
8000006c l       .entry	00000000 MSYS_MIE26_trap_entry
800004f8 l       .entry	00000000 vector_MSYS_EI2_trap_handler
80000070 l       .entry	00000000 MSYS_MIE27_trap_entry
80000584 l       .entry	00000000 vector_MSYS_EI3_trap_handler
80000074 l       .entry	00000000 MSYS_MIE28_trap_entry
80000610 l       .entry	00000000 vector_MSYS_EI4_trap_handler
80000078 l       .entry	00000000 MSYS_MIE29_trap_entry
8000069c l       .entry	00000000 vector_MSYS_EI5_trap_handler
8000007c l       .entry	00000000 MSYS_MIE30_trap_entry
800007b4 l       .entry	00000000 vector_MSYS_EI6_trap_handler
80000080 l       .entry	00000000 MSYS_MIE31_trap_entry
80000840 l       .entry	00000000 vector_MSYS_EI7_trap_handler
80000958 l       .entry	00000000 generic_restore
80000a30 l       .text	00000000 ima_cores_setup
80000a78 l       .text	00000000 vector_address_not_matching
80000a3c l       .text	00000000 generic_reset_handling
80000af4 l       .text	00000000 block_copy
80000a7c l       .text	00000000 initializations
80000ad4 l       .text	00000000 zeroize_block
80000b1c l       .text	00000000 block_copy_error
80000ae4 l       .text	00000000 zeroize_loop
80000b04 l       .text	00000000 block_copy_loop
80000b20 l       .text	00000000 block_copy_exit
00000000 l    df *ABS*	00000000 miv_rv32_hal.c
80000b24 l     F .text	0000003c MRV_read_mtime
80004070 l     O .sbss	00000008 g_systick_cmp_value
80004078 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 miv_rv32_init.c
00000000 l    df *ABS*	00000000 miv_rv32_stubs.c
80000da0 l     F .text	00000010 Software_IRQHandler.localalias.0
00000000 l    df *ABS*	00000000 miv_rv32_syscall.c
80004000 l     O .sdata	00000004 curbrk.2478
00000000 l    df *ABS*	00000000 hal_irq.c
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 main.c
80004084 l     O .sbss	00000004 interrupt_counter.2878
80004088 l     O .sbss	00000004 val.2879
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sysisatty.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 findfp.c
80001544 l     F .text	00000088 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
800019e8 l     F .text	0000003c __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 impure.c
80004010 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
80002e68 g     F .text	00000044 _isatty_r
80002adc g     F .text	0000004c _lseek_r
00000400 g       *ABS*	00000000 STACK_SIZE
80001478 g     F .text	0000007c printf
80004800 g       .sdata	00000000 __global_pointer$
80001014 g     F .text	000000c0 UART_get_rx
800024f4 g     F .text	00000058 __sseek
80001644 g     F .text	000000b4 __sinit
80002554 g     F .text	00000138 __swbuf_r
800015d8 g     F .text	0000006c __sfmoreglue
80002ccc g     F .text	00000004 __malloc_unlock
80003150 g       *ABS*	00000000 __data_load
80001358 g     F .text	00000054 SysTick_Handler
80004004 g     O .sdata	00000004 g_hello_msg
80000f58 g       .text	00000000 HW_get_8bit_reg_field
80004070 g       .sbss	00000000 __sbss_start
800040a0 g     O .bss	00000040 g_rx_buff
80000d0c g     F .text	00000024 handle_local_ei_interrupts
80002e20 g     F .text	00000048 _fstat_r
800040f0 g     O .bss	00000004 errno
80000e90 g       .text	00000000 HW_set_32bit_reg
800040e0 g     O .bss	00000008 g_gpio_out
800015cc g     F .text	0000000c _cleanup_r
80004000 g       .sdata	00000000 __sdata_start
80000dd0  w    F .text	00000004 MSYS_EI4_IRQHandler
800040e8 g     O .bss	00000008 g_uart
80000f30 g       .text	00000000 HW_set_8bit_reg_field
80000dbc  w    F .text	00000004 SUBSYS_IRQHandler
800014f4 g     F .text	00000004 isatty
80000e34 g     F .text	00000038 _fstat
80000d30 g     F .text	00000068 handle_trap
80000ddc  w    F .text	00000004 MSYS_EI6_IRQHandler
800023dc g     F .text	00000044 _sbrk_r
80000de4  w    F .text	00000004 SUBSYSR_IRQHandler
80002dd4 g     F .text	0000004c _read_r
80000b60 g     F .text	000000e8 MRV_systick_config
80000db4  w    F .text	00000004 MGECI_IRQHandler
80004100 g       .heap	00000000 _heap_end
80002eb0 g     O .text	00000040 local_irq_handler_table
80000de0  w    F .text	00000004 MSYS_EI7_IRQHandler
80000e24 g     F .text	00000008 _isatty
80003130 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
80004100 g       .bss	00000000 __bss_end
80000dec g     F .text	00000038 _sbrk
80000d98 g     F .text	00000004 _init
80000f20 g       .text	00000000 HW_set_8bit_reg
80000f28 g       .text	00000000 HW_get_8bit_reg
80000dc4  w    F .text	00000004 MSYS_EI1_IRQHandler
800040a0 g       .sbss	00000000 __sbss_end
80000ea0 g       .text	00000000 HW_set_32bit_reg_field
80004500 g       .stack	00000000 __stack_top
8000308c g     O .text	00000020 __sf_fake_stderr
800010d4 g     F .text	00000068 UART_polled_tx_string
00000000 g       *ABS*	00000000 HEAP_SIZE
80001a24 g     F .text	00000074 __sfputs_r
80002ca4 g     F .text	00000024 memchr
80002cd0 g     F .text	00000104 _free_r
80001258 g     F .text	000000ec GPIO_set_outputs
80000000 g       .entry	00000000 _start
80000e6c g     F .text	0000000c _lseek
80000c48 g     F .text	0000009c handle_m_timer_interrupt
80003140 g       *ABS*	00000000 __sdata_load
80004070 g       .data	00000000 __data_end
80000ec8 g       .text	00000000 HW_get_32bit_reg_field
8000280c g     F .text	00000044 _close_r
8000113c g     F .text	0000011c GPIO_init
8000268c g     F .text	00000180 __swsetup_r
800016f8 g     F .text	000000f0 __sfp
80002420 g     F .text	00000050 __sread
80002cc8 g     F .text	00000004 __malloc_lock
80002a3c g     F .text	000000a0 _fflush_r
800030ac g     O .text	00000020 __sf_fake_stdin
800040a0 g       .bss	00000000 __bss_start
80000e88 g     F .text	00000008 HAL_enable_interrupts
8000145c g     F .text	0000001c memset
800013ac g     F .text	000000b0 main
80000dd4  w    F .text	00000004 MSYS_EI5_IRQHandler
8000254c g     F .text	00000008 __sclose
8000189c g     F .text	0000014c _malloc_r
80000db8  w    F .text	00000004 MGEUI_IRQHandler
80000ee0 g       .text	00000000 HW_get_16bit_reg
80004010 g       .sdata	00000000 __sdata_end
80004100 g       .heap	00000000 __heap_end
80004080 g     O .sbss	00000001 g_rx_size
80000d9c g     F .text	00000004 _fini
80001478 g     F .text	0000007c iprintf
800014f8 g     F .text	0000004c _write_r
80000ee8 g       .text	00000000 HW_set_16bit_reg_field
80000dc8  w    F .text	00000004 MSYS_EI2_IRQHandler
80001e60 g     F .text	000001b0 _printf_common
80004008 g     O .sdata	00000004 _impure_ptr
80004100 g       .stack	00000000 __stack_bottom
80002850 g     F .text	000001ec __sflush_r
80001344 g     F .text	00000014 Software_IRQHandler
80004100 g       .heap	00000000 __heap_start
80002b28 g     F .text	0000008c __swhatbuf_r
80000e80 g     F .text	00000008 _write
80004100 g       .bss	00000000 _end
80000dd8  w    F .text	00000004 Reserved_IRQHandler
80002470 g     F .text	00000084 __swrite
80001a98 g     F .text	000003c8 _vfiprintf_r
800017e8 g     F .text	000000b4 _fwalk_reent
80000f68 g     F .text	000000ac UART_init
800030cc g     O .text	00000020 __sf_fake_stdout
80000e98 g       .text	00000000 HW_get_32bit_reg
80000e78 g     F .text	00000008 _read
80000de8 g     F .text	00000004 _exit
80000ed8 g       .text	00000000 HW_set_16bit_reg
80002bb4 g     F .text	000000f0 __smakebuf_r
80002010 g     F .text	000003cc _printf_i
80000dcc  w    F .text	00000004 MSYS_EI3_IRQHandler
80004090 g     O .sbss	00000004 __malloc_sbrk_start
80000db0  w    F .text	00000004 External_IRQHandler
80004010 g       .data	00000000 __data_start
8000408c g     O .sbss	00000004 __malloc_free_list
80001a98 g     F .text	000003c8 _vfprintf_r
80000ce4 g     F .text	00000028 handle_m_soft_interrupt
80000f10 g       .text	00000000 HW_get_16bit_reg_field
80000e2c g     F .text	00000008 _close
80000dc0  w    F .text	00000004 MSYS_EI0_IRQHandler



Disassembly of section .entry:

80000000 <_start>:
_start():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:114

  .section      .entry, "ax"
  .globl _start

_start:
  j handle_reset
80000000:	1e10006f          	j	800009e0 <handle_reset>

80000004 <trap_entry>:
trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:125
   at the jump and you can at least look at mcause, mepc and get some hints
   about the crash. */
trap_entry:
.option push
.option norvc
j generic_trap_handler
80000004:	08c0006f          	j	80000090 <generic_trap_handler>
	...

80000010 <sw_trap_entry>:
sw_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:131
.option pop
  .word 0
  .word 0

sw_trap_entry:
  j vector_sw_trap_handler
80000010:	1140006f          	j	80000124 <vector_sw_trap_handler>
	...

80000020 <tmr_trap_entry>:
tmr_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:140
  .word 0
  .word 0
  .word 0

tmr_trap_entry:
  j vector_tmr_trap_handler
80000020:	1900006f          	j	800001b0 <vector_tmr_trap_handler>
	...

80000030 <ext_trap_entry>:
ext_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:149
  .word 0
  .word 0
  .word 0

ext_trap_entry:
  j vector_ext_trap_handler
80000030:	20c0006f          	j	8000023c <vector_ext_trap_handler>
	...

80000044 <MGEUI_trap_entry>:
MGEUI_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:160
  .word 0
  .word 0

#ifndef MIV_LEGACY_RV32
MGEUI_trap_entry:
  j vector_MGEUI_trap_handler
80000044:	2840006f          	j	800002c8 <vector_MGEUI_trap_handler>

80000048 <MGECI_trap_entry>:
MGECI_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:166
#ifdef __riscv_compressed
  .2byte 0
#endif

MGECI_trap_entry:
  j vector_MGECI_trap_handler
80000048:	30c0006f          	j	80000354 <vector_MGECI_trap_handler>
	...

8000005c <MSYS_MIE22_trap_entry>:
MSYS_MIE22_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:178
  .word 0

#ifndef MIV_RV32_V3_0
MSYS_MIE22_trap_entry:
#ifndef MIV_RV32_V3_0 
  j vector_SUBSYSR_IRQHandler
8000005c:	0710006f          	j	800008cc <vector_SUBSYSR_IRQHandler>

80000060 <MSYS_MIE23_trap_entry>:
MSYS_MIE23_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:185
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE23_trap_entry:
  j vector_SUBSYS_IRQHandler
80000060:	6c80006f          	j	80000728 <vector_SUBSYS_IRQHandler>

80000064 <MSYS_MIE24_trap_entry>:
MSYS_MIE24_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:192
  .2byte 0
#endif
#endif /*MIV_RV32_V3_0*/

MSYS_MIE24_trap_entry:
  j vector_MSYS_EI0_trap_handler
80000064:	37c0006f          	j	800003e0 <vector_MSYS_EI0_trap_handler>

80000068 <MSYS_MIE25_trap_entry>:
MSYS_MIE25_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:198
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE25_trap_entry:
  j vector_MSYS_EI1_trap_handler
80000068:	4040006f          	j	8000046c <vector_MSYS_EI1_trap_handler>

8000006c <MSYS_MIE26_trap_entry>:
MSYS_MIE26_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:204
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE26_trap_entry:
  j vector_MSYS_EI2_trap_handler
8000006c:	48c0006f          	j	800004f8 <vector_MSYS_EI2_trap_handler>

80000070 <MSYS_MIE27_trap_entry>:
MSYS_MIE27_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:210
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE27_trap_entry:
  j vector_MSYS_EI3_trap_handler
80000070:	5140006f          	j	80000584 <vector_MSYS_EI3_trap_handler>

80000074 <MSYS_MIE28_trap_entry>:
MSYS_MIE28_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:216
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE28_trap_entry:
  j vector_MSYS_EI4_trap_handler
80000074:	59c0006f          	j	80000610 <vector_MSYS_EI4_trap_handler>

80000078 <MSYS_MIE29_trap_entry>:
MSYS_MIE29_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:222
#ifdef __riscv_compressed
  .2byte 0
#endif

MSYS_MIE29_trap_entry:
  j vector_MSYS_EI5_trap_handler
80000078:	6240006f          	j	8000069c <vector_MSYS_EI5_trap_handler>

8000007c <MSYS_MIE30_trap_entry>:
MSYS_MIE30_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:229
  .2byte 0
#endif

MSYS_MIE30_trap_entry:
#ifndef MIV_RV32_V3_0
  j vector_MSYS_EI6_trap_handler
8000007c:	7380006f          	j	800007b4 <vector_MSYS_EI6_trap_handler>

80000080 <MSYS_MIE31_trap_entry>:
MSYS_MIE31_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:239
  .2byte 0
#endif

#ifndef MIV_RV32_V3_0
MSYS_MIE31_trap_entry:
  j vector_MSYS_EI7_trap_handler
80000080:	7c00006f          	j	80000840 <vector_MSYS_EI7_trap_handler>
80000084:	00000013          	nop
80000088:	00000013          	nop
8000008c:	00000013          	nop

80000090 <generic_trap_handler>:
generic_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:248
#endif /* MIV_RV32_V3_0 */
#endif /* MIV_LEGACY_RV32 */

.align 4
generic_trap_handler:
  STORE_CONTEXT
80000090:	f8010113          	addi	sp,sp,-128
80000094:	00112023          	sw	ra,0(sp)
80000098:	00112023          	sw	ra,0(sp)
8000009c:	00212223          	sw	sp,4(sp)
800000a0:	00312423          	sw	gp,8(sp)
800000a4:	00412623          	sw	tp,12(sp)
800000a8:	00512823          	sw	t0,16(sp)
800000ac:	00612a23          	sw	t1,20(sp)
800000b0:	00712c23          	sw	t2,24(sp)
800000b4:	00812e23          	sw	s0,28(sp)
800000b8:	02912023          	sw	s1,32(sp)
800000bc:	02a12223          	sw	a0,36(sp)
800000c0:	02b12423          	sw	a1,40(sp)
800000c4:	02c12623          	sw	a2,44(sp)
800000c8:	02d12823          	sw	a3,48(sp)
800000cc:	02e12a23          	sw	a4,52(sp)
800000d0:	02f12c23          	sw	a5,56(sp)
800000d4:	03012e23          	sw	a6,60(sp)
800000d8:	05112023          	sw	a7,64(sp)
800000dc:	05212223          	sw	s2,68(sp)
800000e0:	05312423          	sw	s3,72(sp)
800000e4:	05412623          	sw	s4,76(sp)
800000e8:	05512823          	sw	s5,80(sp)
800000ec:	05612a23          	sw	s6,84(sp)
800000f0:	05712c23          	sw	s7,88(sp)
800000f4:	05812e23          	sw	s8,92(sp)
800000f8:	07912023          	sw	s9,96(sp)
800000fc:	07a12223          	sw	s10,100(sp)
80000100:	07b12423          	sw	s11,104(sp)
80000104:	07c12623          	sw	t3,108(sp)
80000108:	07d12823          	sw	t4,112(sp)
8000010c:	07e12a23          	sw	t5,116(sp)
80000110:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:249
  csrr a0, mcause
80000114:	34202573          	csrr	a0,mcause
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:250
  csrr a1, mepc
80000118:	341025f3          	csrr	a1,mepc
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:251
  jal handle_trap
8000011c:	415000ef          	jal	ra,80000d30 <handle_trap>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:252
  j generic_restore
80000120:	0390006f          	j	80000958 <generic_restore>

80000124 <vector_sw_trap_handler>:
vector_sw_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:255

vector_sw_trap_handler:
  STORE_CONTEXT
80000124:	f8010113          	addi	sp,sp,-128
80000128:	00112023          	sw	ra,0(sp)
8000012c:	00112023          	sw	ra,0(sp)
80000130:	00212223          	sw	sp,4(sp)
80000134:	00312423          	sw	gp,8(sp)
80000138:	00412623          	sw	tp,12(sp)
8000013c:	00512823          	sw	t0,16(sp)
80000140:	00612a23          	sw	t1,20(sp)
80000144:	00712c23          	sw	t2,24(sp)
80000148:	00812e23          	sw	s0,28(sp)
8000014c:	02912023          	sw	s1,32(sp)
80000150:	02a12223          	sw	a0,36(sp)
80000154:	02b12423          	sw	a1,40(sp)
80000158:	02c12623          	sw	a2,44(sp)
8000015c:	02d12823          	sw	a3,48(sp)
80000160:	02e12a23          	sw	a4,52(sp)
80000164:	02f12c23          	sw	a5,56(sp)
80000168:	03012e23          	sw	a6,60(sp)
8000016c:	05112023          	sw	a7,64(sp)
80000170:	05212223          	sw	s2,68(sp)
80000174:	05312423          	sw	s3,72(sp)
80000178:	05412623          	sw	s4,76(sp)
8000017c:	05512823          	sw	s5,80(sp)
80000180:	05612a23          	sw	s6,84(sp)
80000184:	05712c23          	sw	s7,88(sp)
80000188:	05812e23          	sw	s8,92(sp)
8000018c:	07912023          	sw	s9,96(sp)
80000190:	07a12223          	sw	s10,100(sp)
80000194:	07b12423          	sw	s11,104(sp)
80000198:	07c12623          	sw	t3,108(sp)
8000019c:	07d12823          	sw	t4,112(sp)
800001a0:	07e12a23          	sw	t5,116(sp)
800001a4:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:256
  jal handle_m_soft_interrupt
800001a8:	33d000ef          	jal	ra,80000ce4 <handle_m_soft_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:257
  j generic_restore
800001ac:	7ac0006f          	j	80000958 <generic_restore>

800001b0 <vector_tmr_trap_handler>:
vector_tmr_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:260

vector_tmr_trap_handler:
  STORE_CONTEXT
800001b0:	f8010113          	addi	sp,sp,-128
800001b4:	00112023          	sw	ra,0(sp)
800001b8:	00112023          	sw	ra,0(sp)
800001bc:	00212223          	sw	sp,4(sp)
800001c0:	00312423          	sw	gp,8(sp)
800001c4:	00412623          	sw	tp,12(sp)
800001c8:	00512823          	sw	t0,16(sp)
800001cc:	00612a23          	sw	t1,20(sp)
800001d0:	00712c23          	sw	t2,24(sp)
800001d4:	00812e23          	sw	s0,28(sp)
800001d8:	02912023          	sw	s1,32(sp)
800001dc:	02a12223          	sw	a0,36(sp)
800001e0:	02b12423          	sw	a1,40(sp)
800001e4:	02c12623          	sw	a2,44(sp)
800001e8:	02d12823          	sw	a3,48(sp)
800001ec:	02e12a23          	sw	a4,52(sp)
800001f0:	02f12c23          	sw	a5,56(sp)
800001f4:	03012e23          	sw	a6,60(sp)
800001f8:	05112023          	sw	a7,64(sp)
800001fc:	05212223          	sw	s2,68(sp)
80000200:	05312423          	sw	s3,72(sp)
80000204:	05412623          	sw	s4,76(sp)
80000208:	05512823          	sw	s5,80(sp)
8000020c:	05612a23          	sw	s6,84(sp)
80000210:	05712c23          	sw	s7,88(sp)
80000214:	05812e23          	sw	s8,92(sp)
80000218:	07912023          	sw	s9,96(sp)
8000021c:	07a12223          	sw	s10,100(sp)
80000220:	07b12423          	sw	s11,104(sp)
80000224:	07c12623          	sw	t3,108(sp)
80000228:	07d12823          	sw	t4,112(sp)
8000022c:	07e12a23          	sw	t5,116(sp)
80000230:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:261
  jal handle_m_timer_interrupt
80000234:	215000ef          	jal	ra,80000c48 <handle_m_timer_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:262
  j generic_restore
80000238:	7200006f          	j	80000958 <generic_restore>

8000023c <vector_ext_trap_handler>:
vector_ext_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:265

vector_ext_trap_handler:
  STORE_CONTEXT
8000023c:	f8010113          	addi	sp,sp,-128
80000240:	00112023          	sw	ra,0(sp)
80000244:	00112023          	sw	ra,0(sp)
80000248:	00212223          	sw	sp,4(sp)
8000024c:	00312423          	sw	gp,8(sp)
80000250:	00412623          	sw	tp,12(sp)
80000254:	00512823          	sw	t0,16(sp)
80000258:	00612a23          	sw	t1,20(sp)
8000025c:	00712c23          	sw	t2,24(sp)
80000260:	00812e23          	sw	s0,28(sp)
80000264:	02912023          	sw	s1,32(sp)
80000268:	02a12223          	sw	a0,36(sp)
8000026c:	02b12423          	sw	a1,40(sp)
80000270:	02c12623          	sw	a2,44(sp)
80000274:	02d12823          	sw	a3,48(sp)
80000278:	02e12a23          	sw	a4,52(sp)
8000027c:	02f12c23          	sw	a5,56(sp)
80000280:	03012e23          	sw	a6,60(sp)
80000284:	05112023          	sw	a7,64(sp)
80000288:	05212223          	sw	s2,68(sp)
8000028c:	05312423          	sw	s3,72(sp)
80000290:	05412623          	sw	s4,76(sp)
80000294:	05512823          	sw	s5,80(sp)
80000298:	05612a23          	sw	s6,84(sp)
8000029c:	05712c23          	sw	s7,88(sp)
800002a0:	05812e23          	sw	s8,92(sp)
800002a4:	07912023          	sw	s9,96(sp)
800002a8:	07a12223          	sw	s10,100(sp)
800002ac:	07b12423          	sw	s11,104(sp)
800002b0:	07c12623          	sw	t3,108(sp)
800002b4:	07d12823          	sw	t4,112(sp)
800002b8:	07e12a23          	sw	t5,116(sp)
800002bc:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:269
#ifdef MIV_LEGACY_RV32
  jal handle_m_ext_interrupt
#else
  jal External_IRQHandler
800002c0:	2f1000ef          	jal	ra,80000db0 <External_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:271
#endif /* MIV_LEGACY_RV32 */
  j generic_restore
800002c4:	6940006f          	j	80000958 <generic_restore>

800002c8 <vector_MGEUI_trap_handler>:
vector_MGEUI_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:275

#ifndef MIV_LEGACY_RV32
vector_MGEUI_trap_handler:
  STORE_CONTEXT
800002c8:	f8010113          	addi	sp,sp,-128
800002cc:	00112023          	sw	ra,0(sp)
800002d0:	00112023          	sw	ra,0(sp)
800002d4:	00212223          	sw	sp,4(sp)
800002d8:	00312423          	sw	gp,8(sp)
800002dc:	00412623          	sw	tp,12(sp)
800002e0:	00512823          	sw	t0,16(sp)
800002e4:	00612a23          	sw	t1,20(sp)
800002e8:	00712c23          	sw	t2,24(sp)
800002ec:	00812e23          	sw	s0,28(sp)
800002f0:	02912023          	sw	s1,32(sp)
800002f4:	02a12223          	sw	a0,36(sp)
800002f8:	02b12423          	sw	a1,40(sp)
800002fc:	02c12623          	sw	a2,44(sp)
80000300:	02d12823          	sw	a3,48(sp)
80000304:	02e12a23          	sw	a4,52(sp)
80000308:	02f12c23          	sw	a5,56(sp)
8000030c:	03012e23          	sw	a6,60(sp)
80000310:	05112023          	sw	a7,64(sp)
80000314:	05212223          	sw	s2,68(sp)
80000318:	05312423          	sw	s3,72(sp)
8000031c:	05412623          	sw	s4,76(sp)
80000320:	05512823          	sw	s5,80(sp)
80000324:	05612a23          	sw	s6,84(sp)
80000328:	05712c23          	sw	s7,88(sp)
8000032c:	05812e23          	sw	s8,92(sp)
80000330:	07912023          	sw	s9,96(sp)
80000334:	07a12223          	sw	s10,100(sp)
80000338:	07b12423          	sw	s11,104(sp)
8000033c:	07c12623          	sw	t3,108(sp)
80000340:	07d12823          	sw	t4,112(sp)
80000344:	07e12a23          	sw	t5,116(sp)
80000348:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:276
  jal MGEUI_IRQHandler
8000034c:	26d000ef          	jal	ra,80000db8 <MGEUI_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:277
  j generic_restore
80000350:	6080006f          	j	80000958 <generic_restore>

80000354 <vector_MGECI_trap_handler>:
vector_MGECI_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:280

vector_MGECI_trap_handler:
  STORE_CONTEXT
80000354:	f8010113          	addi	sp,sp,-128
80000358:	00112023          	sw	ra,0(sp)
8000035c:	00112023          	sw	ra,0(sp)
80000360:	00212223          	sw	sp,4(sp)
80000364:	00312423          	sw	gp,8(sp)
80000368:	00412623          	sw	tp,12(sp)
8000036c:	00512823          	sw	t0,16(sp)
80000370:	00612a23          	sw	t1,20(sp)
80000374:	00712c23          	sw	t2,24(sp)
80000378:	00812e23          	sw	s0,28(sp)
8000037c:	02912023          	sw	s1,32(sp)
80000380:	02a12223          	sw	a0,36(sp)
80000384:	02b12423          	sw	a1,40(sp)
80000388:	02c12623          	sw	a2,44(sp)
8000038c:	02d12823          	sw	a3,48(sp)
80000390:	02e12a23          	sw	a4,52(sp)
80000394:	02f12c23          	sw	a5,56(sp)
80000398:	03012e23          	sw	a6,60(sp)
8000039c:	05112023          	sw	a7,64(sp)
800003a0:	05212223          	sw	s2,68(sp)
800003a4:	05312423          	sw	s3,72(sp)
800003a8:	05412623          	sw	s4,76(sp)
800003ac:	05512823          	sw	s5,80(sp)
800003b0:	05612a23          	sw	s6,84(sp)
800003b4:	05712c23          	sw	s7,88(sp)
800003b8:	05812e23          	sw	s8,92(sp)
800003bc:	07912023          	sw	s9,96(sp)
800003c0:	07a12223          	sw	s10,100(sp)
800003c4:	07b12423          	sw	s11,104(sp)
800003c8:	07c12623          	sw	t3,108(sp)
800003cc:	07d12823          	sw	t4,112(sp)
800003d0:	07e12a23          	sw	t5,116(sp)
800003d4:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:281
  jal MGECI_IRQHandler
800003d8:	1dd000ef          	jal	ra,80000db4 <MGECI_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:282
  j generic_restore
800003dc:	57c0006f          	j	80000958 <generic_restore>

800003e0 <vector_MSYS_EI0_trap_handler>:
vector_MSYS_EI0_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:285

vector_MSYS_EI0_trap_handler:
  STORE_CONTEXT
800003e0:	f8010113          	addi	sp,sp,-128
800003e4:	00112023          	sw	ra,0(sp)
800003e8:	00112023          	sw	ra,0(sp)
800003ec:	00212223          	sw	sp,4(sp)
800003f0:	00312423          	sw	gp,8(sp)
800003f4:	00412623          	sw	tp,12(sp)
800003f8:	00512823          	sw	t0,16(sp)
800003fc:	00612a23          	sw	t1,20(sp)
80000400:	00712c23          	sw	t2,24(sp)
80000404:	00812e23          	sw	s0,28(sp)
80000408:	02912023          	sw	s1,32(sp)
8000040c:	02a12223          	sw	a0,36(sp)
80000410:	02b12423          	sw	a1,40(sp)
80000414:	02c12623          	sw	a2,44(sp)
80000418:	02d12823          	sw	a3,48(sp)
8000041c:	02e12a23          	sw	a4,52(sp)
80000420:	02f12c23          	sw	a5,56(sp)
80000424:	03012e23          	sw	a6,60(sp)
80000428:	05112023          	sw	a7,64(sp)
8000042c:	05212223          	sw	s2,68(sp)
80000430:	05312423          	sw	s3,72(sp)
80000434:	05412623          	sw	s4,76(sp)
80000438:	05512823          	sw	s5,80(sp)
8000043c:	05612a23          	sw	s6,84(sp)
80000440:	05712c23          	sw	s7,88(sp)
80000444:	05812e23          	sw	s8,92(sp)
80000448:	07912023          	sw	s9,96(sp)
8000044c:	07a12223          	sw	s10,100(sp)
80000450:	07b12423          	sw	s11,104(sp)
80000454:	07c12623          	sw	t3,108(sp)
80000458:	07d12823          	sw	t4,112(sp)
8000045c:	07e12a23          	sw	t5,116(sp)
80000460:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:286
  jal MSYS_EI0_IRQHandler
80000464:	15d000ef          	jal	ra,80000dc0 <MSYS_EI0_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:287
  j generic_restore
80000468:	4f00006f          	j	80000958 <generic_restore>

8000046c <vector_MSYS_EI1_trap_handler>:
vector_MSYS_EI1_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:290

vector_MSYS_EI1_trap_handler:
  STORE_CONTEXT
8000046c:	f8010113          	addi	sp,sp,-128
80000470:	00112023          	sw	ra,0(sp)
80000474:	00112023          	sw	ra,0(sp)
80000478:	00212223          	sw	sp,4(sp)
8000047c:	00312423          	sw	gp,8(sp)
80000480:	00412623          	sw	tp,12(sp)
80000484:	00512823          	sw	t0,16(sp)
80000488:	00612a23          	sw	t1,20(sp)
8000048c:	00712c23          	sw	t2,24(sp)
80000490:	00812e23          	sw	s0,28(sp)
80000494:	02912023          	sw	s1,32(sp)
80000498:	02a12223          	sw	a0,36(sp)
8000049c:	02b12423          	sw	a1,40(sp)
800004a0:	02c12623          	sw	a2,44(sp)
800004a4:	02d12823          	sw	a3,48(sp)
800004a8:	02e12a23          	sw	a4,52(sp)
800004ac:	02f12c23          	sw	a5,56(sp)
800004b0:	03012e23          	sw	a6,60(sp)
800004b4:	05112023          	sw	a7,64(sp)
800004b8:	05212223          	sw	s2,68(sp)
800004bc:	05312423          	sw	s3,72(sp)
800004c0:	05412623          	sw	s4,76(sp)
800004c4:	05512823          	sw	s5,80(sp)
800004c8:	05612a23          	sw	s6,84(sp)
800004cc:	05712c23          	sw	s7,88(sp)
800004d0:	05812e23          	sw	s8,92(sp)
800004d4:	07912023          	sw	s9,96(sp)
800004d8:	07a12223          	sw	s10,100(sp)
800004dc:	07b12423          	sw	s11,104(sp)
800004e0:	07c12623          	sw	t3,108(sp)
800004e4:	07d12823          	sw	t4,112(sp)
800004e8:	07e12a23          	sw	t5,116(sp)
800004ec:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:291
  jal MSYS_EI1_IRQHandler
800004f0:	0d5000ef          	jal	ra,80000dc4 <MSYS_EI1_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:292
  j generic_restore
800004f4:	4640006f          	j	80000958 <generic_restore>

800004f8 <vector_MSYS_EI2_trap_handler>:
vector_MSYS_EI2_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:295

vector_MSYS_EI2_trap_handler:
  STORE_CONTEXT
800004f8:	f8010113          	addi	sp,sp,-128
800004fc:	00112023          	sw	ra,0(sp)
80000500:	00112023          	sw	ra,0(sp)
80000504:	00212223          	sw	sp,4(sp)
80000508:	00312423          	sw	gp,8(sp)
8000050c:	00412623          	sw	tp,12(sp)
80000510:	00512823          	sw	t0,16(sp)
80000514:	00612a23          	sw	t1,20(sp)
80000518:	00712c23          	sw	t2,24(sp)
8000051c:	00812e23          	sw	s0,28(sp)
80000520:	02912023          	sw	s1,32(sp)
80000524:	02a12223          	sw	a0,36(sp)
80000528:	02b12423          	sw	a1,40(sp)
8000052c:	02c12623          	sw	a2,44(sp)
80000530:	02d12823          	sw	a3,48(sp)
80000534:	02e12a23          	sw	a4,52(sp)
80000538:	02f12c23          	sw	a5,56(sp)
8000053c:	03012e23          	sw	a6,60(sp)
80000540:	05112023          	sw	a7,64(sp)
80000544:	05212223          	sw	s2,68(sp)
80000548:	05312423          	sw	s3,72(sp)
8000054c:	05412623          	sw	s4,76(sp)
80000550:	05512823          	sw	s5,80(sp)
80000554:	05612a23          	sw	s6,84(sp)
80000558:	05712c23          	sw	s7,88(sp)
8000055c:	05812e23          	sw	s8,92(sp)
80000560:	07912023          	sw	s9,96(sp)
80000564:	07a12223          	sw	s10,100(sp)
80000568:	07b12423          	sw	s11,104(sp)
8000056c:	07c12623          	sw	t3,108(sp)
80000570:	07d12823          	sw	t4,112(sp)
80000574:	07e12a23          	sw	t5,116(sp)
80000578:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:296
  jal MSYS_EI2_IRQHandler
8000057c:	04d000ef          	jal	ra,80000dc8 <MSYS_EI2_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:297
  j generic_restore
80000580:	3d80006f          	j	80000958 <generic_restore>

80000584 <vector_MSYS_EI3_trap_handler>:
vector_MSYS_EI3_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:300

vector_MSYS_EI3_trap_handler:
  STORE_CONTEXT
80000584:	f8010113          	addi	sp,sp,-128
80000588:	00112023          	sw	ra,0(sp)
8000058c:	00112023          	sw	ra,0(sp)
80000590:	00212223          	sw	sp,4(sp)
80000594:	00312423          	sw	gp,8(sp)
80000598:	00412623          	sw	tp,12(sp)
8000059c:	00512823          	sw	t0,16(sp)
800005a0:	00612a23          	sw	t1,20(sp)
800005a4:	00712c23          	sw	t2,24(sp)
800005a8:	00812e23          	sw	s0,28(sp)
800005ac:	02912023          	sw	s1,32(sp)
800005b0:	02a12223          	sw	a0,36(sp)
800005b4:	02b12423          	sw	a1,40(sp)
800005b8:	02c12623          	sw	a2,44(sp)
800005bc:	02d12823          	sw	a3,48(sp)
800005c0:	02e12a23          	sw	a4,52(sp)
800005c4:	02f12c23          	sw	a5,56(sp)
800005c8:	03012e23          	sw	a6,60(sp)
800005cc:	05112023          	sw	a7,64(sp)
800005d0:	05212223          	sw	s2,68(sp)
800005d4:	05312423          	sw	s3,72(sp)
800005d8:	05412623          	sw	s4,76(sp)
800005dc:	05512823          	sw	s5,80(sp)
800005e0:	05612a23          	sw	s6,84(sp)
800005e4:	05712c23          	sw	s7,88(sp)
800005e8:	05812e23          	sw	s8,92(sp)
800005ec:	07912023          	sw	s9,96(sp)
800005f0:	07a12223          	sw	s10,100(sp)
800005f4:	07b12423          	sw	s11,104(sp)
800005f8:	07c12623          	sw	t3,108(sp)
800005fc:	07d12823          	sw	t4,112(sp)
80000600:	07e12a23          	sw	t5,116(sp)
80000604:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:301
  jal MSYS_EI3_IRQHandler
80000608:	7c4000ef          	jal	ra,80000dcc <MSYS_EI3_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:302
  j generic_restore
8000060c:	34c0006f          	j	80000958 <generic_restore>

80000610 <vector_MSYS_EI4_trap_handler>:
vector_MSYS_EI4_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:305

vector_MSYS_EI4_trap_handler:
  STORE_CONTEXT
80000610:	f8010113          	addi	sp,sp,-128
80000614:	00112023          	sw	ra,0(sp)
80000618:	00112023          	sw	ra,0(sp)
8000061c:	00212223          	sw	sp,4(sp)
80000620:	00312423          	sw	gp,8(sp)
80000624:	00412623          	sw	tp,12(sp)
80000628:	00512823          	sw	t0,16(sp)
8000062c:	00612a23          	sw	t1,20(sp)
80000630:	00712c23          	sw	t2,24(sp)
80000634:	00812e23          	sw	s0,28(sp)
80000638:	02912023          	sw	s1,32(sp)
8000063c:	02a12223          	sw	a0,36(sp)
80000640:	02b12423          	sw	a1,40(sp)
80000644:	02c12623          	sw	a2,44(sp)
80000648:	02d12823          	sw	a3,48(sp)
8000064c:	02e12a23          	sw	a4,52(sp)
80000650:	02f12c23          	sw	a5,56(sp)
80000654:	03012e23          	sw	a6,60(sp)
80000658:	05112023          	sw	a7,64(sp)
8000065c:	05212223          	sw	s2,68(sp)
80000660:	05312423          	sw	s3,72(sp)
80000664:	05412623          	sw	s4,76(sp)
80000668:	05512823          	sw	s5,80(sp)
8000066c:	05612a23          	sw	s6,84(sp)
80000670:	05712c23          	sw	s7,88(sp)
80000674:	05812e23          	sw	s8,92(sp)
80000678:	07912023          	sw	s9,96(sp)
8000067c:	07a12223          	sw	s10,100(sp)
80000680:	07b12423          	sw	s11,104(sp)
80000684:	07c12623          	sw	t3,108(sp)
80000688:	07d12823          	sw	t4,112(sp)
8000068c:	07e12a23          	sw	t5,116(sp)
80000690:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:306
  jal MSYS_EI4_IRQHandler
80000694:	73c000ef          	jal	ra,80000dd0 <MSYS_EI4_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:307
  j generic_restore
80000698:	2c00006f          	j	80000958 <generic_restore>

8000069c <vector_MSYS_EI5_trap_handler>:
vector_MSYS_EI5_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:310

vector_MSYS_EI5_trap_handler:
  STORE_CONTEXT
8000069c:	f8010113          	addi	sp,sp,-128
800006a0:	00112023          	sw	ra,0(sp)
800006a4:	00112023          	sw	ra,0(sp)
800006a8:	00212223          	sw	sp,4(sp)
800006ac:	00312423          	sw	gp,8(sp)
800006b0:	00412623          	sw	tp,12(sp)
800006b4:	00512823          	sw	t0,16(sp)
800006b8:	00612a23          	sw	t1,20(sp)
800006bc:	00712c23          	sw	t2,24(sp)
800006c0:	00812e23          	sw	s0,28(sp)
800006c4:	02912023          	sw	s1,32(sp)
800006c8:	02a12223          	sw	a0,36(sp)
800006cc:	02b12423          	sw	a1,40(sp)
800006d0:	02c12623          	sw	a2,44(sp)
800006d4:	02d12823          	sw	a3,48(sp)
800006d8:	02e12a23          	sw	a4,52(sp)
800006dc:	02f12c23          	sw	a5,56(sp)
800006e0:	03012e23          	sw	a6,60(sp)
800006e4:	05112023          	sw	a7,64(sp)
800006e8:	05212223          	sw	s2,68(sp)
800006ec:	05312423          	sw	s3,72(sp)
800006f0:	05412623          	sw	s4,76(sp)
800006f4:	05512823          	sw	s5,80(sp)
800006f8:	05612a23          	sw	s6,84(sp)
800006fc:	05712c23          	sw	s7,88(sp)
80000700:	05812e23          	sw	s8,92(sp)
80000704:	07912023          	sw	s9,96(sp)
80000708:	07a12223          	sw	s10,100(sp)
8000070c:	07b12423          	sw	s11,104(sp)
80000710:	07c12623          	sw	t3,108(sp)
80000714:	07d12823          	sw	t4,112(sp)
80000718:	07e12a23          	sw	t5,116(sp)
8000071c:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:311
  jal MSYS_EI5_IRQHandler
80000720:	6b4000ef          	jal	ra,80000dd4 <MSYS_EI5_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:312
  j generic_restore
80000724:	2340006f          	j	80000958 <generic_restore>

80000728 <vector_SUBSYS_IRQHandler>:
vector_SUBSYS_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:315

vector_SUBSYS_IRQHandler:
  STORE_CONTEXT
80000728:	f8010113          	addi	sp,sp,-128
8000072c:	00112023          	sw	ra,0(sp)
80000730:	00112023          	sw	ra,0(sp)
80000734:	00212223          	sw	sp,4(sp)
80000738:	00312423          	sw	gp,8(sp)
8000073c:	00412623          	sw	tp,12(sp)
80000740:	00512823          	sw	t0,16(sp)
80000744:	00612a23          	sw	t1,20(sp)
80000748:	00712c23          	sw	t2,24(sp)
8000074c:	00812e23          	sw	s0,28(sp)
80000750:	02912023          	sw	s1,32(sp)
80000754:	02a12223          	sw	a0,36(sp)
80000758:	02b12423          	sw	a1,40(sp)
8000075c:	02c12623          	sw	a2,44(sp)
80000760:	02d12823          	sw	a3,48(sp)
80000764:	02e12a23          	sw	a4,52(sp)
80000768:	02f12c23          	sw	a5,56(sp)
8000076c:	03012e23          	sw	a6,60(sp)
80000770:	05112023          	sw	a7,64(sp)
80000774:	05212223          	sw	s2,68(sp)
80000778:	05312423          	sw	s3,72(sp)
8000077c:	05412623          	sw	s4,76(sp)
80000780:	05512823          	sw	s5,80(sp)
80000784:	05612a23          	sw	s6,84(sp)
80000788:	05712c23          	sw	s7,88(sp)
8000078c:	05812e23          	sw	s8,92(sp)
80000790:	07912023          	sw	s9,96(sp)
80000794:	07a12223          	sw	s10,100(sp)
80000798:	07b12423          	sw	s11,104(sp)
8000079c:	07c12623          	sw	t3,108(sp)
800007a0:	07d12823          	sw	t4,112(sp)
800007a4:	07e12a23          	sw	t5,116(sp)
800007a8:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:316
  jal SUBSYS_IRQHandler
800007ac:	610000ef          	jal	ra,80000dbc <SUBSYS_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:317
  j generic_restore
800007b0:	1a80006f          	j	80000958 <generic_restore>

800007b4 <vector_MSYS_EI6_trap_handler>:
vector_MSYS_EI6_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:321

#ifndef MIV_RV32_V3_0
vector_MSYS_EI6_trap_handler:
  STORE_CONTEXT
800007b4:	f8010113          	addi	sp,sp,-128
800007b8:	00112023          	sw	ra,0(sp)
800007bc:	00112023          	sw	ra,0(sp)
800007c0:	00212223          	sw	sp,4(sp)
800007c4:	00312423          	sw	gp,8(sp)
800007c8:	00412623          	sw	tp,12(sp)
800007cc:	00512823          	sw	t0,16(sp)
800007d0:	00612a23          	sw	t1,20(sp)
800007d4:	00712c23          	sw	t2,24(sp)
800007d8:	00812e23          	sw	s0,28(sp)
800007dc:	02912023          	sw	s1,32(sp)
800007e0:	02a12223          	sw	a0,36(sp)
800007e4:	02b12423          	sw	a1,40(sp)
800007e8:	02c12623          	sw	a2,44(sp)
800007ec:	02d12823          	sw	a3,48(sp)
800007f0:	02e12a23          	sw	a4,52(sp)
800007f4:	02f12c23          	sw	a5,56(sp)
800007f8:	03012e23          	sw	a6,60(sp)
800007fc:	05112023          	sw	a7,64(sp)
80000800:	05212223          	sw	s2,68(sp)
80000804:	05312423          	sw	s3,72(sp)
80000808:	05412623          	sw	s4,76(sp)
8000080c:	05512823          	sw	s5,80(sp)
80000810:	05612a23          	sw	s6,84(sp)
80000814:	05712c23          	sw	s7,88(sp)
80000818:	05812e23          	sw	s8,92(sp)
8000081c:	07912023          	sw	s9,96(sp)
80000820:	07a12223          	sw	s10,100(sp)
80000824:	07b12423          	sw	s11,104(sp)
80000828:	07c12623          	sw	t3,108(sp)
8000082c:	07d12823          	sw	t4,112(sp)
80000830:	07e12a23          	sw	t5,116(sp)
80000834:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:322
  jal MSYS_EI6_IRQHandler
80000838:	5a4000ef          	jal	ra,80000ddc <MSYS_EI6_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:323
  j generic_restore
8000083c:	11c0006f          	j	80000958 <generic_restore>

80000840 <vector_MSYS_EI7_trap_handler>:
vector_MSYS_EI7_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:326

vector_MSYS_EI7_trap_handler:
  STORE_CONTEXT
80000840:	f8010113          	addi	sp,sp,-128
80000844:	00112023          	sw	ra,0(sp)
80000848:	00112023          	sw	ra,0(sp)
8000084c:	00212223          	sw	sp,4(sp)
80000850:	00312423          	sw	gp,8(sp)
80000854:	00412623          	sw	tp,12(sp)
80000858:	00512823          	sw	t0,16(sp)
8000085c:	00612a23          	sw	t1,20(sp)
80000860:	00712c23          	sw	t2,24(sp)
80000864:	00812e23          	sw	s0,28(sp)
80000868:	02912023          	sw	s1,32(sp)
8000086c:	02a12223          	sw	a0,36(sp)
80000870:	02b12423          	sw	a1,40(sp)
80000874:	02c12623          	sw	a2,44(sp)
80000878:	02d12823          	sw	a3,48(sp)
8000087c:	02e12a23          	sw	a4,52(sp)
80000880:	02f12c23          	sw	a5,56(sp)
80000884:	03012e23          	sw	a6,60(sp)
80000888:	05112023          	sw	a7,64(sp)
8000088c:	05212223          	sw	s2,68(sp)
80000890:	05312423          	sw	s3,72(sp)
80000894:	05412623          	sw	s4,76(sp)
80000898:	05512823          	sw	s5,80(sp)
8000089c:	05612a23          	sw	s6,84(sp)
800008a0:	05712c23          	sw	s7,88(sp)
800008a4:	05812e23          	sw	s8,92(sp)
800008a8:	07912023          	sw	s9,96(sp)
800008ac:	07a12223          	sw	s10,100(sp)
800008b0:	07b12423          	sw	s11,104(sp)
800008b4:	07c12623          	sw	t3,108(sp)
800008b8:	07d12823          	sw	t4,112(sp)
800008bc:	07e12a23          	sw	t5,116(sp)
800008c0:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:327
  jal MSYS_EI7_IRQHandler
800008c4:	51c000ef          	jal	ra,80000de0 <MSYS_EI7_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:328
  j generic_restore
800008c8:	0900006f          	j	80000958 <generic_restore>

800008cc <vector_SUBSYSR_IRQHandler>:
vector_SUBSYSR_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:332


vector_SUBSYSR_IRQHandler:
  STORE_CONTEXT
800008cc:	f8010113          	addi	sp,sp,-128
800008d0:	00112023          	sw	ra,0(sp)
800008d4:	00112023          	sw	ra,0(sp)
800008d8:	00212223          	sw	sp,4(sp)
800008dc:	00312423          	sw	gp,8(sp)
800008e0:	00412623          	sw	tp,12(sp)
800008e4:	00512823          	sw	t0,16(sp)
800008e8:	00612a23          	sw	t1,20(sp)
800008ec:	00712c23          	sw	t2,24(sp)
800008f0:	00812e23          	sw	s0,28(sp)
800008f4:	02912023          	sw	s1,32(sp)
800008f8:	02a12223          	sw	a0,36(sp)
800008fc:	02b12423          	sw	a1,40(sp)
80000900:	02c12623          	sw	a2,44(sp)
80000904:	02d12823          	sw	a3,48(sp)
80000908:	02e12a23          	sw	a4,52(sp)
8000090c:	02f12c23          	sw	a5,56(sp)
80000910:	03012e23          	sw	a6,60(sp)
80000914:	05112023          	sw	a7,64(sp)
80000918:	05212223          	sw	s2,68(sp)
8000091c:	05312423          	sw	s3,72(sp)
80000920:	05412623          	sw	s4,76(sp)
80000924:	05512823          	sw	s5,80(sp)
80000928:	05612a23          	sw	s6,84(sp)
8000092c:	05712c23          	sw	s7,88(sp)
80000930:	05812e23          	sw	s8,92(sp)
80000934:	07912023          	sw	s9,96(sp)
80000938:	07a12223          	sw	s10,100(sp)
8000093c:	07b12423          	sw	s11,104(sp)
80000940:	07c12623          	sw	t3,108(sp)
80000944:	07d12823          	sw	t4,112(sp)
80000948:	07e12a23          	sw	t5,116(sp)
8000094c:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:333
  jal SUBSYSR_IRQHandler
80000950:	494000ef          	jal	ra,80000de4 <SUBSYSR_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:334
  j generic_restore
80000954:	0040006f          	j	80000958 <generic_restore>

80000958 <generic_restore>:
generic_restore():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:340

#endif /*MIV_RV32_V3_0*/
#endif /* MIV_LEGACY_RV32 */

generic_restore:
  LREG x1, 0 * REGBYTES(sp)
80000958:	00012083          	lw	ra,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:341
  LREG x2, 1 * REGBYTES(sp)
8000095c:	00412103          	lw	sp,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:342
  LREG x3, 2 * REGBYTES(sp)
80000960:	00812183          	lw	gp,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:343
  LREG x4, 3 * REGBYTES(sp)
80000964:	00c12203          	lw	tp,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:344
  LREG x5, 4 * REGBYTES(sp)
80000968:	01012283          	lw	t0,16(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:345
  LREG x6, 5 * REGBYTES(sp)
8000096c:	01412303          	lw	t1,20(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:346
  LREG x7, 6 * REGBYTES(sp)
80000970:	01812383          	lw	t2,24(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:347
  LREG x8, 7 * REGBYTES(sp)
80000974:	01c12403          	lw	s0,28(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:348
  LREG x9, 8 * REGBYTES(sp)
80000978:	02012483          	lw	s1,32(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:349
  LREG x10, 9 * REGBYTES(sp)
8000097c:	02412503          	lw	a0,36(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:350
  LREG x11, 10 * REGBYTES(sp)
80000980:	02812583          	lw	a1,40(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:351
  LREG x12, 11 * REGBYTES(sp)
80000984:	02c12603          	lw	a2,44(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:352
  LREG x13, 12 * REGBYTES(sp)
80000988:	03012683          	lw	a3,48(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:353
  LREG x14, 13 * REGBYTES(sp)
8000098c:	03412703          	lw	a4,52(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:354
  LREG x15, 14 * REGBYTES(sp)
80000990:	03812783          	lw	a5,56(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:355
  LREG x16, 15 * REGBYTES(sp)
80000994:	03c12803          	lw	a6,60(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:356
  LREG x17, 16 * REGBYTES(sp)
80000998:	04012883          	lw	a7,64(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:357
  LREG x18, 17 * REGBYTES(sp)
8000099c:	04412903          	lw	s2,68(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:358
  LREG x19, 18 * REGBYTES(sp)
800009a0:	04812983          	lw	s3,72(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:359
  LREG x20, 19 * REGBYTES(sp)
800009a4:	04c12a03          	lw	s4,76(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:360
  LREG x21, 20 * REGBYTES(sp)
800009a8:	05012a83          	lw	s5,80(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:361
  LREG x22, 21 * REGBYTES(sp)
800009ac:	05412b03          	lw	s6,84(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:362
  LREG x23, 22 * REGBYTES(sp)
800009b0:	05812b83          	lw	s7,88(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:363
  LREG x24, 23 * REGBYTES(sp)
800009b4:	05c12c03          	lw	s8,92(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:364
  LREG x25, 24 * REGBYTES(sp)
800009b8:	06012c83          	lw	s9,96(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:365
  LREG x26, 25 * REGBYTES(sp)
800009bc:	06412d03          	lw	s10,100(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:366
  LREG x27, 26 * REGBYTES(sp)
800009c0:	06812d83          	lw	s11,104(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:367
  LREG x28, 27 * REGBYTES(sp)
800009c4:	06c12e03          	lw	t3,108(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:368
  LREG x29, 28 * REGBYTES(sp)
800009c8:	07012e83          	lw	t4,112(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:369
  LREG x30, 29 * REGBYTES(sp)
800009cc:	07412f03          	lw	t5,116(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:370
  LREG x31, 30 * REGBYTES(sp)
800009d0:	07812f83          	lw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:409
  flw	f30, 30 * REGBYTES(sp)
  flw	f31, 31 * REGBYTES(sp)
  #endif /* __riscv_flen */
  #endif /* MIV_FP_CONTEXT_SAVE */

  addi sp, sp, SP_SHIFT_OFFSET*REGBYTES
800009d4:	08010113          	addi	sp,sp,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:410
  mret
800009d8:	30200073          	mret
800009dc:	0000                	unimp
	...

Disassembly of section .text:

800009e0 <handle_reset>:
handle_reset():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:419
/* Ensure instructions are not relaxed, since gp is not yet set */
.option push
.option norelax

#ifndef MIV_RV32_V3_0
  csrwi mstatus, 0
800009e0:	30005073          	csrwi	mstatus,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:420
  csrwi mie, 0
800009e4:	30405073          	csrwi	mie,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:421
  la ra, _start
800009e8:	fffff097          	auipc	ra,0xfffff
800009ec:	61808093          	addi	ra,ra,1560 # 80000000 <_start>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:425

/* Clearnig this to be on safer side as RTL doesnt seem to clear it on reset. */
#ifndef MIV_LEGACY_RV32
  li t0, MTIMEH_ADDR
800009f0:	0200c2b7          	lui	t0,0x200c
800009f4:	ffc28293          	addi	t0,t0,-4 # 200bffc <STACK_SIZE+0x200bbfc>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:426
  sw x0, 0(t0)
800009f8:	0002a023          	sw	zero,0(t0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:429
#endif

  csrr t0, misa
800009fc:	301022f3          	csrr	t0,misa
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:430
  andi t0, t0, A_EXTENSION_MASK
80000a00:	0012f293          	andi	t0,t0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:431
  bnez t0, ima_cores_setup          /* Jump to IMA core handling */
80000a04:	02029663          	bnez	t0,80000a30 <ima_cores_setup>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:439
/* For MIV_RV32 cores the mtvec exception base address is fixed at Reset vector
   address + 0x4. Check the mode bits. */
/* In the MIV_RV32 v3.1, the MTVEC exception base address is WARL, and can be 
   configured by the user at runtime */

  csrr t0, mtvec
80000a08:	305022f3          	csrr	t0,mtvec
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:440
  andi t0, t0, MTVEC_MODE_BIT_MASK
80000a0c:	0032f293          	andi	t0,t0,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:441
  li t1, MTVEC_VECTORED_MODE_VAL
80000a10:	00100313          	li	t1,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:442
  bne t0, t1, ima_cores_setup        /* Jump to IMA core handling */
80000a14:	00629e63          	bne	t0,t1,80000a30 <ima_cores_setup>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:446

  /* When mode = 1 => this is vectored mode on MIV_RV32 core.
     Verify that the trap_handler address matches the configuration in MTVEC */
  csrr t0, mtvec
80000a18:	305022f3          	csrr	t0,mtvec
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:447
  andi t0, t0, 0xFFFFFFFC
80000a1c:	ffc2f293          	andi	t0,t0,-4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:448
  la t1, trap_entry
80000a20:	fffff317          	auipc	t1,0xfffff
80000a24:	5e430313          	addi	t1,t1,1508 # 80000004 <trap_entry>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:449
  bne t0, t1, vector_address_not_matching
80000a28:	04629863          	bne	t0,t1,80000a78 <vector_address_not_matching>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:450
  j generic_reset_handling
80000a2c:	0100006f          	j	80000a3c <generic_reset_handling>

80000a30 <ima_cores_setup>:
ima_cores_setup():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:477
  bne t0, t1, vector_address_not_matching
  j generic_reset_handling
#endif /*MIV_RV32_V3_0*/

ima_cores_setup:
  la t0, trap_entry
80000a30:	fffff297          	auipc	t0,0xfffff
80000a34:	5d428293          	addi	t0,t0,1492 # 80000004 <trap_entry>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:483

#ifdef MIV_LEGACY_RV32_VECTORED_INTERRUPTS
  addi t0, t0, 0x01 /* Set the mode bit for IMA cores.
                       For both MIV_RV32 v3.1 and v3.0 cores this is done by configurator. */
#endif
  csrw mtvec, t0
80000a38:	30529073          	csrw	mtvec,t0

80000a3c <generic_reset_handling>:
generic_reset_handling():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:488

generic_reset_handling:
/* Copy sdata section first so that the gp is set and linker relaxation can be
   used */
    la a4, __sdata_load
80000a3c:	00002717          	auipc	a4,0x2
80000a40:	70470713          	addi	a4,a4,1796 # 80003140 <__sdata_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:489
    la a5, __sdata_start
80000a44:	00003797          	auipc	a5,0x3
80000a48:	5bc78793          	addi	a5,a5,1468 # 80004000 <__sdata_start>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:490
    la a6, __sdata_end
80000a4c:	00003817          	auipc	a6,0x3
80000a50:	5c480813          	addi	a6,a6,1476 # 80004010 <__sdata_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:491
    beq a4, a5, 1f     /* Exit if source and dest are same */
80000a54:	00f70863          	beq	a4,a5,80000a64 <generic_reset_handling+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:492
    beq a5, a6, 1f     /* Exit if section start and end addresses are same */
80000a58:	01078663          	beq	a5,a6,80000a64 <generic_reset_handling+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:493
    call block_copy
80000a5c:	00000097          	auipc	ra,0x0
80000a60:	098080e7          	jalr	152(ra) # 80000af4 <block_copy>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:497

1:
  /* initialize global pointer */
  la gp, __global_pointer$
80000a64:	00004197          	auipc	gp,0x4
80000a68:	d9c18193          	addi	gp,gp,-612 # 80004800 <__global_pointer$>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:514
  csrw mstatus, t1

  lui t0, 0x0
  fscsr t0
#endif
  call initializations
80000a6c:	010000ef          	jal	ra,80000a7c <initializations>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:516
  /* Initialize stack pointer */
  la sp, __stack_top
80000a70:	d0018113          	addi	sp,gp,-768 # 80004500 <__stack_top>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:519

  /* Jump into C code */
  j _init
80000a74:	3240006f          	j	80000d98 <_init>

80000a78 <vector_address_not_matching>:
vector_address_not_matching():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:524

/* Error: trap_entry is not at the expected address of reset_vector+mtvec offset
   as configured in the MIV_RV32 core vectored mode */
vector_address_not_matching:
  ebreak
80000a78:	00100073          	ebreak

80000a7c <initializations>:
initializations():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:528

initializations:
/* Initialize the .bss section */
    mv t0, ra           /* Store ra for future use */
80000a7c:	00008293          	mv	t0,ra
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:529
    la  a5, __bss_start
80000a80:	8a018793          	addi	a5,gp,-1888 # 800040a0 <__sbss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:530
    la  a6, __bss_end
80000a84:	90018813          	addi	a6,gp,-1792 # 80004100 <__bss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:531
    beq a5, a6, 1f     /* Section start and end address are the same */
80000a88:	01078463          	beq	a5,a6,80000a90 <initializations+0x14>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:532
    call zeroize_block
80000a8c:	048000ef          	jal	ra,80000ad4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:536

1:
/* Initialize the .sbss section */
    la  a5, __sbss_start
80000a90:	87018793          	addi	a5,gp,-1936 # 80004070 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:537
    la  a6, __sbss_end
80000a94:	8a018813          	addi	a6,gp,-1888 # 800040a0 <__sbss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:538
    beq a5, a6, 1f     /* Section start and end address are the same */
80000a98:	01078c63          	beq	a5,a6,80000ab0 <initializations+0x34>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:539
    call zeroize_block
80000a9c:	038000ef          	jal	ra,80000ad4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:542

/* Clear heap */
    la  a5, __heap_start
80000aa0:	90018793          	addi	a5,gp,-1792 # 80004100 <__bss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:543
    la  a6, __heap_end
80000aa4:	90018813          	addi	a6,gp,-1792 # 80004100 <__bss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:544
    beq a5, a6, 1f     /* Section start and end address are the same */
80000aa8:	01078463          	beq	a5,a6,80000ab0 <initializations+0x34>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:545
    call zeroize_block
80000aac:	028000ef          	jal	ra,80000ad4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:549

1:
/* Copy data section */
    la  a4, __data_load
80000ab0:	00002717          	auipc	a4,0x2
80000ab4:	6a070713          	addi	a4,a4,1696 # 80003150 <__data_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:550
    la  a5, __data_start
80000ab8:	81018793          	addi	a5,gp,-2032 # 80004010 <__sdata_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:551
    la  a6, __data_end
80000abc:	87018813          	addi	a6,gp,-1936 # 80004070 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:552
    beq a4, a5, 1f     /* Exit early if source and dest are same */
80000ac0:	00f70663          	beq	a4,a5,80000acc <initializations+0x50>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:553
    beq a5, a6, 1f     /* Section start and end addresses are the same */
80000ac4:	01078463          	beq	a5,a6,80000acc <initializations+0x50>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:554
    call block_copy
80000ac8:	02c000ef          	jal	ra,80000af4 <block_copy>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:557

1:
    mv ra, t0           /* Retrieve ra */
80000acc:	00028093          	mv	ra,t0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:558
    ret
80000ad0:	00008067          	ret

80000ad4 <zeroize_block>:
zeroize_block():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:561

zeroize_block:
    bltu a6, a5, block_copy_error   /* Error. End address is less than start */
80000ad4:	04f86463          	bltu	a6,a5,80000b1c <block_copy_error>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:562
    or a7, a6, a5                   /* Check if start or end is unalined */
80000ad8:	00f868b3          	or	a7,a6,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:563
    andi a7, a7, 0x03u
80000adc:	0038f893          	andi	a7,a7,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:564
    bgtz a7, block_copy_error       /* Unaligned addresses error*/
80000ae0:	03104e63          	bgtz	a7,80000b1c <block_copy_error>

80000ae4 <zeroize_loop>:
zeroize_loop():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:566
zeroize_loop:
    sw x0, 0(a5)
80000ae4:	0007a023          	sw	zero,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:567
    add a5, a5, __SIZEOF_POINTER__
80000ae8:	00478793          	addi	a5,a5,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:568
    blt a5, a6, zeroize_loop
80000aec:	ff07cce3          	blt	a5,a6,80000ae4 <zeroize_loop>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:569
    ret
80000af0:	00008067          	ret

80000af4 <block_copy>:
block_copy():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:572

block_copy:
    bltu a6, a5, block_copy_error   /* Error. End address is less than start */
80000af4:	02f86463          	bltu	a6,a5,80000b1c <block_copy_error>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:573
    or a7, a6, a5                   /* Check if start or end is unalined */
80000af8:	00f868b3          	or	a7,a6,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:574
    andi a7, a7, 0x03u
80000afc:	0038f893          	andi	a7,a7,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:575
    bgtz a7, block_copy_error       /* Unaligned addresses error*/
80000b00:	01104e63          	bgtz	a7,80000b1c <block_copy_error>

80000b04 <block_copy_loop>:
block_copy_loop():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:577
block_copy_loop:
    lw a7, 0(a4)
80000b04:	00072883          	lw	a7,0(a4)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:578
    sw a7, 0(a5)
80000b08:	0117a023          	sw	a7,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:579
    addi a5, a5, 0x04
80000b0c:	00478793          	addi	a5,a5,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:580
    addi a4, a4, 0x04
80000b10:	00470713          	addi	a4,a4,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:581
    blt a5, a6, block_copy_loop
80000b14:	ff07c8e3          	blt	a5,a6,80000b04 <block_copy_loop>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:582
    j block_copy_exit
80000b18:	0080006f          	j	80000b20 <block_copy_exit>

80000b1c <block_copy_error>:
block_copy_error():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:585

block_copy_error:
    j block_copy_error
80000b1c:	0000006f          	j	80000b1c <block_copy_error>

80000b20 <block_copy_exit>:
block_copy_exit():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:588

block_copy_exit:
    ret
80000b20:	00008067          	ret

80000b24 <MRV_read_mtime>:
MRV_read_mtime():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:684

/***************************************************************************//**
  The MRV_read_mtime() function returns the current MTIME register value.
 */
static inline uint64_t MRV_read_mtime(void)
{
80000b24:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:685
    volatile uint32_t hi = 0u;
80000b28:	00012423          	sw	zero,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:686
    volatile uint32_t lo = 0u;
80000b2c:	00012623          	sw	zero,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:691

    /* when mtime lower word is 0xFFFFFFFF, there will be rollover and
     * returned value could be wrong. */
    do {
        hi = MTIMEH;
80000b30:	0200c7b7          	lui	a5,0x200c
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:691 (discriminator 1)
80000b34:	ffc7a683          	lw	a3,-4(a5) # 200bffc <STACK_SIZE+0x200bbfc>
80000b38:	00d12423          	sw	a3,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:692 (discriminator 1)
        lo = MTIME;
80000b3c:	ff87a683          	lw	a3,-8(a5)
80000b40:	00d12623          	sw	a3,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:693 (discriminator 1)
    } while(hi != MTIMEH);
80000b44:	ffc7a603          	lw	a2,-4(a5)
80000b48:	00812683          	lw	a3,8(sp)
80000b4c:	fed614e3          	bne	a2,a3,80000b34 <MRV_read_mtime+0x10>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:695

    return((((uint64_t)MTIMEH) << 32u) | lo);
80000b50:	ffc7a583          	lw	a1,-4(a5)
80000b54:	00c12503          	lw	a0,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:696
}
80000b58:	01010113          	addi	sp,sp,16
80000b5c:	00008067          	ret

80000b60 <MRV_systick_config>:
MRV_systick_config():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:163

/*------------------------------------------------------------------------------
 * Configure the machine timer to generate an interrupt.
 */
uint32_t MRV_systick_config(uint64_t ticks)
{
80000b60:	ff010113          	addi	sp,sp,-16
80000b64:	00812423          	sw	s0,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    uint32_t ret_val = ERROR;
    uint64_t remainder = ticks;
    g_systick_increment = 0U;
80000b68:	00000713          	li	a4,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
80000b6c:	87018793          	addi	a5,gp,-1936 # 80004070 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:163
{
80000b70:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
80000b74:	87818413          	addi	s0,gp,-1928 # 80004078 <g_systick_increment>
80000b78:	00000693          	li	a3,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
80000b7c:	00e7a223          	sw	a4,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
80000b80:	00e42223          	sw	a4,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
80000b84:	00d7a023          	sw	a3,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
80000b88:	00d42023          	sw	a3,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:169

    while (remainder >= MTIME_PRESCALER)
80000b8c:	00000793          	li	a5,0
80000b90:	00000713          	li	a4,0
80000b94:	00000613          	li	a2,0
80000b98:	02005837          	lui	a6,0x2005
80000b9c:	00178893          	addi	a7,a5,1
80000ba0:	00082303          	lw	t1,0(a6) # 2005000 <STACK_SIZE+0x2004c00>
80000ba4:	00f8b6b3          	sltu	a3,a7,a5
80000ba8:	00e686b3          	add	a3,a3,a4
80000bac:	06059c63          	bnez	a1,80000c24 <MRV_systick_config+0xc4>
80000bb0:	06657a63          	bgeu	a0,t1,80000c24 <MRV_systick_config+0xc4>
80000bb4:	00060663          	beqz	a2,80000bc0 <MRV_systick_config+0x60>
80000bb8:	86f1ac23          	sw	a5,-1928(gp) # 80004078 <g_systick_increment>
80000bbc:	86e1ae23          	sw	a4,-1924(gp) # 8000407c <g_systick_increment+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:175
    {
        remainder -= MTIME_PRESCALER;
        g_systick_increment++;
    }

    g_systick_cmp_value = g_systick_increment + MRV_read_mtime();
80000bc0:	f65ff0ef          	jal	ra,80000b24 <MRV_read_mtime>
80000bc4:	00042783          	lw	a5,0(s0)
80000bc8:	00442683          	lw	a3,4(s0)
80000bcc:	00f50733          	add	a4,a0,a5
80000bd0:	00a73533          	sltu	a0,a4,a0
80000bd4:	00d585b3          	add	a1,a1,a3
80000bd8:	00b505b3          	add	a1,a0,a1
80000bdc:	86e1a823          	sw	a4,-1936(gp) # 80004070 <__data_end>
80000be0:	86b1aa23          	sw	a1,-1932(gp) # 80004074 <__data_end+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:177

    if (g_systick_increment > 0U)
80000be4:	00d7e7b3          	or	a5,a5,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:164
    uint32_t ret_val = ERROR;
80000be8:	00100513          	li	a0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:177
    if (g_systick_increment > 0U)
80000bec:	02078463          	beqz	a5,80000c14 <MRV_systick_config+0xb4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:179
    {
        WRITE_MTIMECMP(g_systick_cmp_value);
80000bf0:	020047b7          	lui	a5,0x2004
80000bf4:	fff00693          	li	a3,-1
80000bf8:	00d7a223          	sw	a3,4(a5) # 2004004 <STACK_SIZE+0x2003c04>
80000bfc:	00e7a023          	sw	a4,0(a5)
80000c00:	00b7a223          	sw	a1,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:180
        set_csr(mie, MIP_MTIP);
80000c04:	08000793          	li	a5,128
80000c08:	3047a7f3          	csrrs	a5,mie,a5
MRV_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:617
    set_csr(mstatus, MSTATUS_MIE);
80000c0c:	300467f3          	csrrsi	a5,mstatus,8
MRV_systick_config():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:182
        MRV_enable_interrupts();
        ret_val = SUCCESS;
80000c10:	00000513          	li	a0,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:186
    }

    return ret_val;
}
80000c14:	00c12083          	lw	ra,12(sp)
80000c18:	00812403          	lw	s0,8(sp)
80000c1c:	01010113          	addi	sp,sp,16
80000c20:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:171
        remainder -= MTIME_PRESCALER;
80000c24:	00082783          	lw	a5,0(a6)
80000c28:	00100613          	li	a2,1
80000c2c:	40f507b3          	sub	a5,a0,a5
80000c30:	00f53733          	sltu	a4,a0,a5
80000c34:	40e585b3          	sub	a1,a1,a4
80000c38:	00078513          	mv	a0,a5
80000c3c:	00068713          	mv	a4,a3
80000c40:	00088793          	mv	a5,a7
80000c44:	f59ff06f          	j	80000b9c <MRV_systick_config+0x3c>

80000c48 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:192

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt(void)
{
80000c48:	ff010113          	addi	sp,sp,-16
80000c4c:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:193
    clear_csr(mie, MIP_MTIP);
80000c50:	08000793          	li	a5,128
80000c54:	3047b7f3          	csrrc	a5,mie,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:195

    uint64_t mtime_at_irq = MRV_read_mtime();
80000c58:	ecdff0ef          	jal	ra,80000b24 <MRV_read_mtime>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201

#ifndef NDEBUG
    static volatile uint32_t d_tick = 0u;
#endif

    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
80000c5c:	87018793          	addi	a5,gp,-1936 # 80004070 <__data_end>
80000c60:	0007a703          	lw	a4,0(a5)
80000c64:	00550613          	addi	a2,a0,5
80000c68:	0047a783          	lw	a5,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
80000c6c:	87818693          	addi	a3,gp,-1928 # 80004078 <g_systick_increment>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201
    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
80000c70:	00a63533          	sltu	a0,a2,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
80000c74:	0006a803          	lw	a6,0(a3)
80000c78:	0046a883          	lw	a7,4(a3)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201
    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
80000c7c:	00b505b3          	add	a1,a0,a1
80000c80:	00000693          	li	a3,0
80000c84:	04b7e263          	bltu	a5,a1,80000cc8 <handle_m_timer_interrupt+0x80>
80000c88:	00f59463          	bne	a1,a5,80000c90 <handle_m_timer_interrupt+0x48>
80000c8c:	02c76e63          	bltu	a4,a2,80000cc8 <handle_m_timer_interrupt+0x80>
80000c90:	00068663          	beqz	a3,80000c9c <handle_m_timer_interrupt+0x54>
80000c94:	86e1a823          	sw	a4,-1936(gp) # 80004070 <__data_end>
80000c98:	86f1aa23          	sw	a5,-1932(gp) # 80004074 <__data_end+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:223
     * If you are running the program using the debugger and halt the CPU at a 
     * breakpoint, MTIME will continue to increment and interrupts will be 
     * missed; resulting in d_tick > 1.
     */

    WRITE_MTIMECMP(g_systick_cmp_value);
80000c9c:	020046b7          	lui	a3,0x2004
80000ca0:	fff00613          	li	a2,-1
80000ca4:	00c6a223          	sw	a2,4(a3) # 2004004 <STACK_SIZE+0x2003c04>
80000ca8:	00e6a023          	sw	a4,0(a3)
80000cac:	00f6a223          	sw	a5,4(a3)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:225

    SysTick_Handler();
80000cb0:	6a8000ef          	jal	ra,80001358 <SysTick_Handler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:227

    set_csr(mie, MIP_MTIP);
80000cb4:	08000793          	li	a5,128
80000cb8:	3047a7f3          	csrrs	a5,mie,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:228
}
80000cbc:	00c12083          	lw	ra,12(sp)
80000cc0:	01010113          	addi	sp,sp,16
80000cc4:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
80000cc8:	010706b3          	add	a3,a4,a6
80000ccc:	00e6b533          	sltu	a0,a3,a4
80000cd0:	011787b3          	add	a5,a5,a7
80000cd4:	00068713          	mv	a4,a3
80000cd8:	00f507b3          	add	a5,a0,a5
80000cdc:	00100693          	li	a3,1
80000ce0:	fa5ff06f          	j	80000c84 <handle_m_timer_interrupt+0x3c>

80000ce4 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:231

void handle_m_soft_interrupt(void)
{
80000ce4:	ff010113          	addi	sp,sp,-16
80000ce8:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:232
    Software_IRQHandler();
80000cec:	658000ef          	jal	ra,80001344 <Software_IRQHandler>
MRV_clear_soft_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:735
{
#ifdef MIV_LEGACY_RV32
    MSIP = 0x00u;   /* clear soft interrupt */
#else
    /* Clear soft IRQ on MIV_RV32 processor */
    SUBSYS->soft_reg &= ~SUBSYS_SOFT_IRQ;
80000cf0:	00006737          	lui	a4,0x6
80000cf4:	02072783          	lw	a5,32(a4) # 6020 <STACK_SIZE+0x5c20>
handle_m_soft_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:234
    MRV_clear_soft_irq();
}
80000cf8:	00c12083          	lw	ra,12(sp)
MRV_clear_soft_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:735
80000cfc:	ffd7f793          	andi	a5,a5,-3
80000d00:	02f72023          	sw	a5,32(a4)
handle_m_soft_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:234
80000d04:	01010113          	addi	sp,sp,16
80000d08:	00008067          	ret

80000d0c <handle_local_ei_interrupts>:
handle_local_ei_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:306
/*------------------------------------------------------------------------------
 * Jump to interrupt table containing local interrupts
 */
void handle_local_ei_interrupts(uint8_t irq_no)
{
    uint64_t mhart_id = read_csr(mhartid);
80000d0c:	f14027f3          	csrr	a5,mhartid
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:310
    ASSERT(irq_no <= MIV_LOCAL_IRQ_MAX)
    ASSERT(irq_no >= MIV_LOCAL_IRQ_MIN)

    uint8_t ei_no = (uint8_t)(irq_no - MIV_LOCAL_IRQ_MIN);
80000d10:	ff050513          	addi	a0,a0,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:311
    (*local_irq_handler_table[ei_no])();
80000d14:	0ff57513          	andi	a0,a0,255
80000d18:	00251513          	slli	a0,a0,0x2
80000d1c:	00002797          	auipc	a5,0x2
80000d20:	19478793          	addi	a5,a5,404 # 80002eb0 <local_irq_handler_table>
80000d24:	00a78533          	add	a0,a5,a0
80000d28:	00052303          	lw	t1,0(a0)
80000d2c:	00030067          	jr	t1

80000d30 <handle_trap>:
handle_trap():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:323
 */
void handle_trap(uintptr_t mcause, uintptr_t mepc)
{   
    uint64_t is_interrupt = mcause & MCAUSE_INT;

    if (is_interrupt)
80000d30:	04055a63          	bgez	a0,80000d84 <handle_trap+0x54>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:326
    {
#ifndef MIV_LEGACY_RV32
        if (((mcause & MCAUSE_CAUSE) >= MIV_LOCAL_IRQ_MIN) && ((mcause & MCAUSE_CAUSE) <= MIV_LOCAL_IRQ_MAX))
80000d34:	800007b7          	lui	a5,0x80000
80000d38:	ff07c713          	xori	a4,a5,-16
80000d3c:	00e57733          	and	a4,a0,a4
80000d40:	00070c63          	beqz	a4,80000d58 <handle_trap+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:326 (discriminator 1)
80000d44:	fe07c793          	xori	a5,a5,-32
80000d48:	00f577b3          	and	a5,a0,a5
80000d4c:	00079663          	bnez	a5,80000d58 <handle_trap+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:328
        {
            handle_local_ei_interrupts((uint8_t)(mcause & MCAUSE_CAUSE));
80000d50:	0ff57513          	andi	a0,a0,255
80000d54:	fb9ff06f          	j	80000d0c <handle_local_ei_interrupts>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:330
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_EXT)
80000d58:	00151513          	slli	a0,a0,0x1
80000d5c:	00155513          	srli	a0,a0,0x1
80000d60:	00b00793          	li	a5,11
80000d64:	00f51463          	bne	a0,a5,80000d6c <handle_trap+0x3c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:336
#else
        if ((mcause & MCAUSE_CAUSE) == IRQ_M_EXT)
#endif
        {
#ifndef MIV_LEGACY_RV32
            External_IRQHandler();
80000d68:	0480006f          	j	80000db0 <External_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:341
#else
            handle_m_ext_interrupt();
#endif
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_SOFT)
80000d6c:	00300793          	li	a5,3
80000d70:	00f51463          	bne	a0,a5,80000d78 <handle_trap+0x48>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:343
        {
            handle_m_soft_interrupt();
80000d74:	f71ff06f          	j	80000ce4 <handle_m_soft_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:345
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_TIMER)
80000d78:	00700793          	li	a5,7
80000d7c:	00f51c63          	bne	a0,a5,80000d94 <handle_trap+0x64>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:347
        {
            handle_m_timer_interrupt();
80000d80:	ec9ff06f          	j	80000c48 <handle_m_timer_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:320
{   
80000d84:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:402
         uintptr_t mmepc  = read_csr(mepc);

        /* breakpoint */
        __asm__("ebreak");
#else
        _exit(1 + mcause);
80000d88:	00150513          	addi	a0,a0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:320
{   
80000d8c:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:402
        _exit(1 + mcause);
80000d90:	058000ef          	jal	ra,80000de8 <_exit>
80000d94:	00008067          	ret

80000d98 <_init>:
_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_init.c:27
    /* This function is a placeholder for the case where some more hardware
     * specific initializations are required before jumping into the application
     * code. You can implement it here. */

    /* Jump to the application code after all initializations are completed */
    main();
80000d98:	6140006f          	j	800013ac <main>

80000d9c <_fini>:
_fini():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_init.c:34

/* Function called after main() finishes */
void
_fini(void)
{
}
80000d9c:	00008067          	ret

80000da0 <Software_IRQHandler.localalias.0>:
Software_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_stubs.c:23
#ifdef __cplusplus
extern "C" {
#endif

__attribute__((weak)) void Software_IRQHandler(void)
{
80000da0:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_stubs.c:24
    _exit(10);
80000da4:	00a00513          	li	a0,10
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_stubs.c:23
{
80000da8:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_stubs.c:24
    _exit(10);
80000dac:	03c000ef          	jal	ra,80000de8 <_exit>

80000db0 <External_IRQHandler>:
External_IRQHandler():
80000db0:	00008067          	ret

80000db4 <MGECI_IRQHandler>:
MGECI_IRQHandler():
80000db4:	00008067          	ret

80000db8 <MGEUI_IRQHandler>:
MGEUI_IRQHandler():
80000db8:	00008067          	ret

80000dbc <SUBSYS_IRQHandler>:
SUBSYS_IRQHandler():
80000dbc:	00008067          	ret

80000dc0 <MSYS_EI0_IRQHandler>:
MSYS_EI0_IRQHandler():
80000dc0:	00008067          	ret

80000dc4 <MSYS_EI1_IRQHandler>:
MSYS_EI1_IRQHandler():
80000dc4:	00008067          	ret

80000dc8 <MSYS_EI2_IRQHandler>:
MSYS_EI2_IRQHandler():
80000dc8:	00008067          	ret

80000dcc <MSYS_EI3_IRQHandler>:
MSYS_EI3_IRQHandler():
80000dcc:	00008067          	ret

80000dd0 <MSYS_EI4_IRQHandler>:
MSYS_EI4_IRQHandler():
80000dd0:	00008067          	ret

80000dd4 <MSYS_EI5_IRQHandler>:
MSYS_EI5_IRQHandler():
80000dd4:	00008067          	ret

80000dd8 <Reserved_IRQHandler>:
Reserved_IRQHandler():
80000dd8:	fc9ff06f          	j	80000da0 <Software_IRQHandler.localalias.0>

80000ddc <MSYS_EI6_IRQHandler>:
MSYS_EI6_IRQHandler():
80000ddc:	00008067          	ret

80000de0 <MSYS_EI7_IRQHandler>:
MSYS_EI7_IRQHandler():
80000de0:	00008067          	ret

80000de4 <SUBSYSR_IRQHandler>:
SUBSYSR_IRQHandler():
80000de4:	00008067          	ret

80000de8 <_exit>:
_exit():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:150 (discriminator 1)

    write(STDERR_FILENO, message, strlen(message));
    write_hex(STDERR_FILENO, code);
#endif

    while (1){};
80000de8:	0000006f          	j	80000de8 <_exit>

80000dec <_sbrk>:
_sbrk():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:169
     * You need to set HEAP_SIZE to a non-zero value in your linker script if
     * the following assertion fires.
     */
    ASSERT(&__heap_end > &__heap_start);

    if (((curbrk + incr) < &_end) || ((curbrk + incr) > &_heap_end))
80000dec:	00003797          	auipc	a5,0x3
80000df0:	21478793          	addi	a5,a5,532 # 80004000 <__sdata_start>
80000df4:	0007a783          	lw	a5,0(a5)
80000df8:	90018713          	addi	a4,gp,-1792 # 80004100 <__bss_end>
80000dfc:	00a78533          	add	a0,a5,a0
80000e00:	00e56e63          	bltu	a0,a4,80000e1c <_sbrk+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:169 (discriminator 1)
80000e04:	90018713          	addi	a4,gp,-1792 # 80004100 <__bss_end>
80000e08:	00a76a63          	bltu	a4,a0,80000e1c <_sbrk+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:176
        errno = ENOMEM;
        ret = ((char *) - 1);
    }
    else
    {
        curbrk += incr;
80000e0c:	00003717          	auipc	a4,0x3
80000e10:	1ea72a23          	sw	a0,500(a4) # 80004000 <__sdata_start>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:188
     * assertion fires.
     * */
    ASSERT(curbrk <= &__heap_end);

    return(ret);
}
80000e14:	00078513          	mv	a0,a5
80000e18:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:172
        ret = ((char *) - 1);
80000e1c:	fff00793          	li	a5,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:187
    return(ret);
80000e20:	ff5ff06f          	j	80000e14 <_sbrk+0x28>

80000e24 <_isatty>:
_isatty():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:205
        errno = EBADF;
        ret = 0;
    }

    return(ret);
}
80000e24:	00352513          	slti	a0,a0,3
80000e28:	00008067          	ret

80000e2c <_close>:
_close():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:226
}

int _close(int fd)
{
    return stub(EBADF);
}
80000e2c:	fff00513          	li	a0,-1
80000e30:	00008067          	ret

80000e34 <_fstat>:
_fstat():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:239
{
    return stub(EAGAIN);
}

int _fstat(int fd, struct stat *st)
{
80000e34:	fe010113          	addi	sp,sp,-32
80000e38:	00112e23          	sw	ra,28(sp)
80000e3c:	00b12623          	sw	a1,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:242
    int ret = 0;

    if (isatty(fd))
80000e40:	6b4000ef          	jal	ra,800014f4 <isatty>
80000e44:	02050063          	beqz	a0,80000e64 <_fstat+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:244
    {
        st->st_mode = S_IFCHR;
80000e48:	00c12583          	lw	a1,12(sp)
80000e4c:	000027b7          	lui	a5,0x2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:245
        ret = 0;
80000e50:	00000513          	li	a0,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:244
        st->st_mode = S_IFCHR;
80000e54:	00f5a223          	sw	a5,4(a1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:253
    {
        ret = stub(EBADF);
    }

    return ret;
}
80000e58:	01c12083          	lw	ra,28(sp)
80000e5c:	02010113          	addi	sp,sp,32
80000e60:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:249
        ret = stub(EBADF);
80000e64:	fff00513          	li	a0,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:252
    return ret;
80000e68:	ff1ff06f          	j	80000e58 <_fstat+0x24>

80000e6c <_lseek>:
_isatty():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:194
    if (fd <= 2)    /* one of stdin, stdout, stderr */
80000e6c:	00352513          	slti	a0,a0,3
_lseek():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:283
    {
        ret = stub(EBADF);
    }

    return ret;
}
80000e70:	fff50513          	addi	a0,a0,-1
80000e74:	00008067          	ret

80000e78 <_read>:
_read():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:313
        return  count;          /* Filled the buffer */
    }
#endif

    return stub(EBADF);
}
80000e78:	fff00513          	li	a0,-1
80000e7c:	00008067          	ret

80000e80 <_write>:
_write():
80000e80:	fff00513          	li	a0,-1
80000e84:	00008067          	ret

80000e88 <HAL_enable_interrupts>:
MRV_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\src\platform/miv_rv32_hal/miv_rv32_hal.h:617
  @return
  This functions returns the CORE_GPR_DED_RESET_REG bit value.
 */
static inline void MRV_enable_interrupts(void)
{
    set_csr(mstatus, MSTATUS_MIE);
80000e88:	300467f3          	csrrsi	a5,mstatus,8
HAL_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hal_irq.c:24
/*------------------------------------------------------------------------------
 * 
 */
void HAL_enable_interrupts(void) {
    MRV_enable_interrupts();
}
80000e8c:	00008067          	ret

80000e90 <HW_set_32bit_reg>:
HW_set_32bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:39
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000e90:	00b52023          	sw	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:40
    ret
80000e94:	00008067          	ret

80000e98 <HW_get_32bit_reg>:
HW_get_32bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:51
 * a0:   addr_t reg_addr

 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000e98:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:52
    ret
80000e9c:	00008067          	ret

80000ea0 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:64
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000ea0:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:65
    sll t3, t3, a1
80000ea4:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:66
    and  t3, t3, a2
80000ea8:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:67
    lw t1, 0(a0)
80000eac:	00052303          	lw	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:68
    mv t2, a2
80000eb0:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:69
    not t2, t2
80000eb4:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:70
    and t1, t1, t2
80000eb8:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:71
    or t1, t1, t3
80000ebc:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:72
    sw t1, 0(a0)
80000ec0:	00652023          	sw	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:73
    ret
80000ec4:	00008067          	ret

80000ec8 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:87
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000ec8:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:88
    and a0, a0, a2
80000ecc:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:89
    srl a0, a0, a1
80000ed0:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:90
    ret
80000ed4:	00008067          	ret

80000ed8 <HW_set_16bit_reg>:
HW_set_16bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:100
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000ed8:	00b51023          	sh	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:101
    ret
80000edc:	00008067          	ret

80000ee0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:112
 * a0:   addr_t reg_addr

 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000ee0:	00051503          	lh	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:113
    ret
80000ee4:	00008067          	ret

80000ee8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:126
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000ee8:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:127
    sll t3, t3, a1
80000eec:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:128
    and  t3, t3, a2
80000ef0:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:129
    lh t1, 0(a0)
80000ef4:	00051303          	lh	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:130
    mv t2, a2
80000ef8:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:131
    not t2, t2
80000efc:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:132
    and t1, t1, t2
80000f00:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:133
    or t1, t1, t3
80000f04:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:134
    sh t1, 0(a0)
80000f08:	00651023          	sh	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:135
    ret
80000f0c:	00008067          	ret

80000f10 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:149
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000f10:	00051503          	lh	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:150
    and a0, a0, a2
80000f14:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:151
    srl a0, a0, a1
80000f18:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:152
    ret
80000f1c:	00008067          	ret

80000f20 <HW_set_8bit_reg>:
HW_set_8bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:162
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000f20:	00b50023          	sb	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:163
    ret
80000f24:	00008067          	ret

80000f28 <HW_get_8bit_reg>:
HW_get_8bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:174
 * a0:   addr_t reg_addr

 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000f28:	00050503          	lb	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:175
    ret
80000f2c:	00008067          	ret

80000f30 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:187
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000f30:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:188
    sll t3, t3, a1
80000f34:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:189
    and  t3, t3, a2
80000f38:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:190
    lb t1, 0(a0)
80000f3c:	00050303          	lb	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:191
    mv t2, a2
80000f40:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:192
    not t2, t2
80000f44:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:193
    and t1, t1, t2
80000f48:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:194
    or t1, t1, t3
80000f4c:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:195
    sb t1, 0(a0)
80000f50:	00650023          	sb	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:196
    ret
80000f54:	00008067          	ret

80000f58 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:210
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000f58:	00050503          	lb	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:211
    and a0, a0, a2
80000f5c:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:212
    srl a0, a0, a1
80000f60:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/hal/hw_reg_access.S:213
    ret
80000f64:	00008067          	ret

80000f68 <UART_init>:
UART_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000f68:	0a050463          	beqz	a0,80001010 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80000f6c:	00700793          	li	a5,7
80000f70:	0ad7e063          	bltu	a5,a3,80001010 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80000f74:	000027b7          	lui	a5,0x2
80000f78:	08f67c63          	bgeu	a2,a5,80001010 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:46
{
80000f7c:	fe010113          	addi	sp,sp,-32
80000f80:	00812c23          	sw	s0,24(sp)
80000f84:	01212823          	sw	s2,16(sp)
80000f88:	00060413          	mv	s0,a2
80000f8c:	00058913          	mv	s2,a1
80000f90:	00912a23          	sw	s1,20(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000f94:	0ff67593          	andi	a1,a2,255
80000f98:	00050493          	mv	s1,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000f9c:	40545413          	srai	s0,s0,0x5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000fa0:	00890513          	addi	a0,s2,8
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:46
{
80000fa4:	00112e23          	sw	ra,28(sp)
80000fa8:	01312623          	sw	s3,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000fac:	7f847413          	andi	s0,s0,2040
80000fb0:	00068993          	mv	s3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000fb4:	f6dff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000fb8:	00c90513          	addi	a0,s2,12
80000fbc:	013465b3          	or	a1,s0,s3
80000fc0:	f61ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000fc4:	01090513          	addi	a0,s2,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:71
        this_uart->base_address = base_addr;
80000fc8:	0124a023          	sw	s2,0(s1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:99
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000fcc:	f5dff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
80000fd0:	00257513          	andi	a0,a0,2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80000fd4:	02051263          	bnez	a0,80000ff8 <UART_init+0x90>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80000fd8:	00048223          	sb	zero,4(s1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:108
    }
}
80000fdc:	01c12083          	lw	ra,28(sp)
80000fe0:	01812403          	lw	s0,24(sp)
80000fe4:	01412483          	lw	s1,20(sp)
80000fe8:	01012903          	lw	s2,16(sp)
80000fec:	00c12983          	lw	s3,12(sp)
80000ff0:	02010113          	addi	sp,sp,32
80000ff4:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:98
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80000ff8:	0004a503          	lw	a0,0(s1)
80000ffc:	00450513          	addi	a0,a0,4
80001000:	f29ff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001004:	0004a503          	lw	a0,0(s1)
80001008:	01050513          	addi	a0,a0,16
8000100c:	fc1ff06f          	j	80000fcc <UART_init+0x64>
80001010:	00008067          	ret

80001014 <UART_get_rx>:
UART_get_rx():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:199
(
    UART_instance_t * this_uart,
    uint8_t * rx_buffer,
    size_t buff_size
)
{
80001014:	fe010113          	addi	sp,sp,-32
80001018:	00112e23          	sw	ra,28(sp)
8000101c:	00812c23          	sw	s0,24(sp)
80001020:	00912a23          	sw	s1,20(sp)
80001024:	01212823          	sw	s2,16(sp)
80001028:	01312623          	sw	s3,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:208
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( rx_buffer != NULL_BUFFER )
    HAL_ASSERT( buff_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
8000102c:	08050c63          	beqz	a0,800010c4 <UART_get_rx+0xb0>
80001030:	00058993          	mv	s3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:208 (discriminator 1)
80001034:	08058863          	beqz	a1,800010c4 <UART_get_rx+0xb0>
80001038:	00060493          	mv	s1,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:209
        (rx_buffer != NULL_BUFFER)   &&
8000103c:	02060863          	beqz	a2,8000106c <UART_get_rx+0x58>
80001040:	00050413          	mv	s0,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:213
        (buff_size > 0u) )
    {
        rx_idx = 0u;
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80001044:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:212
        rx_idx = 0u;
80001048:	00000913          	li	s2,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:213
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
8000104c:	01050513          	addi	a0,a0,16
80001050:	ed9ff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:214
        this_uart->status |= new_status;
80001054:	00444783          	lbu	a5,4(s0)
80001058:	00f567b3          	or	a5,a0,a5
8000105c:	00f40223          	sb	a5,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:215
        rx_full = new_status & STATUS_RXFULL_MASK;
80001060:	00257513          	andi	a0,a0,2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:216
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
80001064:	06050463          	beqz	a0,800010cc <UART_get_rx+0xb8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:216 (discriminator 1)
80001068:	02991263          	bne	s2,s1,8000108c <UART_get_rx+0x78>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:227
            this_uart->status |= new_status;
            rx_full = new_status & STATUS_RXFULL_MASK;
        }
    }
    return rx_idx;
}
8000106c:	01c12083          	lw	ra,28(sp)
80001070:	01812403          	lw	s0,24(sp)
80001074:	00048513          	mv	a0,s1
80001078:	01012903          	lw	s2,16(sp)
8000107c:	01412483          	lw	s1,20(sp)
80001080:	00c12983          	lw	s3,12(sp)
80001084:	02010113          	addi	sp,sp,32
80001088:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:218
            rx_buffer[rx_idx] = HAL_get_8bit_reg( this_uart->base_address,
8000108c:	00042503          	lw	a0,0(s0)
80001090:	00450513          	addi	a0,a0,4
80001094:	e95ff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
80001098:	012987b3          	add	a5,s3,s2
8000109c:	00a78023          	sb	a0,0(a5) # 2000 <STACK_SIZE+0x1c00>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:221
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
800010a0:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:220
            rx_idx++;
800010a4:	00190913          	addi	s2,s2,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:221
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
800010a8:	01050513          	addi	a0,a0,16
800010ac:	e7dff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:222
            this_uart->status |= new_status;
800010b0:	00444783          	lbu	a5,4(s0)
800010b4:	00f567b3          	or	a5,a0,a5
800010b8:	00f40223          	sb	a5,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:223
            rx_full = new_status & STATUS_RXFULL_MASK;
800010bc:	00257513          	andi	a0,a0,2
800010c0:	fa5ff06f          	j	80001064 <UART_get_rx+0x50>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:202
    size_t rx_idx = 0u;
800010c4:	00000493          	li	s1,0
800010c8:	fa5ff06f          	j	8000106c <UART_get_rx+0x58>
800010cc:	00090493          	mv	s1,s2
800010d0:	f9dff06f          	j	8000106c <UART_get_rx+0x58>

800010d4 <UART_polled_tx_string>:
UART_polled_tx_string():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
800010d4:	06050263          	beqz	a0,80001138 <UART_polled_tx_string+0x64>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
800010d8:	06058063          	beqz	a1,80001138 <UART_polled_tx_string+0x64>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:239
{
800010dc:	ff010113          	addi	sp,sp,-16
800010e0:	00812423          	sw	s0,8(sp)
800010e4:	00912223          	sw	s1,4(sp)
800010e8:	00112623          	sw	ra,12(sp)
800010ec:	00050493          	mv	s1,a0
800010f0:	00058413          	mv	s0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:249
    {
        char_idx = 0U;
        while( 0U != p_sz_string[char_idx] )
800010f4:	00044783          	lbu	a5,0(s0)
800010f8:	00079c63          	bnez	a5,80001110 <UART_polled_tx_string+0x3c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:262
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
        }
    }
}
800010fc:	00c12083          	lw	ra,12(sp)
80001100:	00812403          	lw	s0,8(sp)
80001104:	00412483          	lw	s1,4(sp)
80001108:	01010113          	addi	sp,sp,16
8000110c:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001110:	0004a503          	lw	a0,0(s1)
80001114:	01050513          	addi	a0,a0,16
80001118:	e11ff0ef          	jal	ra,80000f28 <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
            } while ( !tx_ready );
8000111c:	00157513          	andi	a0,a0,1
80001120:	fe0508e3          	beqz	a0,80001110 <UART_polled_tx_string+0x3c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:257
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001124:	00044583          	lbu	a1,0(s0)
80001128:	0004a503          	lw	a0,0(s1)
8000112c:	00140413          	addi	s0,s0,1
80001130:	df1ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:259
            char_idx++;
80001134:	fc1ff06f          	j	800010f4 <UART_polled_tx_string+0x20>
80001138:	00008067          	ret

8000113c <GPIO_init>:
GPIO_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:37
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
8000113c:	ff010113          	addi	sp,sp,-16
80001140:	00812423          	sw	s0,8(sp)
80001144:	00050413          	mv	s0,a0
80001148:	00912223          	sw	s1,4(sp)
8000114c:	01212023          	sw	s2,0(sp)
80001150:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:41
    uint8_t i = 0;
    addr_t cfg_reg_addr = base_addr;
    
    this_gpio->base_addr = base_addr;
80001154:	00b42023          	sw	a1,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:37
{
80001158:	00058493          	mv	s1,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:42
    this_gpio->apb_bus_width = bus_width;
8000115c:	00c52223          	sw	a2,4(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:45
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
80001160:	08058913          	addi	s2,a1,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:47 (discriminator 3)
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
80001164:	00048513          	mv	a0,s1
80001168:	00000593          	li	a1,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:48 (discriminator 3)
        cfg_reg_addr += 4;
8000116c:	00448493          	addi	s1,s1,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:47 (discriminator 3)
        HW_set_8bit_reg( cfg_reg_addr, 0 );
80001170:	db1ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:45 (discriminator 3)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
80001174:	ff2498e3          	bne	s1,s2,80001164 <GPIO_init+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:51
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
80001178:	00442783          	lw	a5,4(s0)
8000117c:	00100713          	li	a4,1
80001180:	02e78a63          	beq	a5,a4,800011b4 <GPIO_init+0x78>
80001184:	06078463          	beqz	a5,800011ec <GPIO_init+0xb0>
80001188:	00200713          	li	a4,2
8000118c:	0ae79a63          	bne	a5,a4,80001240 <GPIO_init+0x104>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
80001190:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
            
        default:
            HAL_ASSERT(0);
            break;
    }
}
80001194:	00812403          	lw	s0,8(sp)
80001198:	00c12083          	lw	ra,12(sp)
8000119c:	00412483          	lw	s1,4(sp)
800011a0:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
800011a4:	fff00593          	li	a1,-1
800011a8:	08050513          	addi	a0,a0,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
800011ac:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
800011b0:	ce1ff06f          	j	80000e90 <HW_set_32bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:58
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
800011b4:	00042503          	lw	a0,0(s0)
800011b8:	000104b7          	lui	s1,0x10
800011bc:	fff48593          	addi	a1,s1,-1 # ffff <STACK_SIZE+0xfbff>
800011c0:	08050513          	addi	a0,a0,128
800011c4:	d15ff0ef          	jal	ra,80000ed8 <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
800011c8:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
800011cc:	00812403          	lw	s0,8(sp)
800011d0:	00c12083          	lw	ra,12(sp)
800011d4:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
800011d8:	fff48593          	addi	a1,s1,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
800011dc:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
800011e0:	08450513          	addi	a0,a0,132
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
800011e4:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
800011e8:	cf1ff06f          	j	80000ed8 <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:63
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
800011ec:	00042503          	lw	a0,0(s0)
800011f0:	0ff00593          	li	a1,255
800011f4:	08050513          	addi	a0,a0,128
800011f8:	d29ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:64
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
800011fc:	00042503          	lw	a0,0(s0)
80001200:	0ff00593          	li	a1,255
80001204:	08450513          	addi	a0,a0,132
80001208:	d19ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:65
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
8000120c:	00042503          	lw	a0,0(s0)
80001210:	0ff00593          	li	a1,255
80001214:	08850513          	addi	a0,a0,136
80001218:	d09ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
8000121c:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80001220:	00812403          	lw	s0,8(sp)
80001224:	00c12083          	lw	ra,12(sp)
80001228:	00412483          	lw	s1,4(sp)
8000122c:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80001230:	0ff00593          	li	a1,255
80001234:	08c50513          	addi	a0,a0,140
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80001238:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
8000123c:	ce5ff06f          	j	80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80001240:	00c12083          	lw	ra,12(sp)
80001244:	00812403          	lw	s0,8(sp)
80001248:	00412483          	lw	s1,4(sp)
8000124c:	00012903          	lw	s2,0(sp)
80001250:	01010113          	addi	sp,sp,16
80001254:	00008067          	ret

80001258 <GPIO_set_outputs>:
GPIO_set_outputs():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
(
    gpio_instance_t *   this_gpio,
    uint32_t            value
)
{
    switch( this_gpio->apb_bus_width )
80001258:	00452783          	lw	a5,4(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:114
{
8000125c:	ff010113          	addi	sp,sp,-16
80001260:	00812423          	sw	s0,8(sp)
80001264:	00912223          	sw	s1,4(sp)
80001268:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
    switch( this_gpio->apb_bus_width )
8000126c:	00100713          	li	a4,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:114
{
80001270:	00050413          	mv	s0,a0
80001274:	00058493          	mv	s1,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
    switch( this_gpio->apb_bus_width )
80001278:	02e78663          	beq	a5,a4,800012a4 <GPIO_set_outputs+0x4c>
8000127c:	04078e63          	beqz	a5,800012d8 <GPIO_set_outputs+0x80>
80001280:	00200713          	li	a4,2
80001284:	0ae79663          	bne	a5,a4,80001330 <GPIO_set_outputs+0xd8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80001288:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
     * the number of GPIOs selected in the CoreGPIO hardware flow configuration.
     * It may also indicate that the base address or APB bus width passed as
     * parameter to the GPIO_init() function do not match the hardware design.
     */
    HAL_ASSERT( GPIO_get_outputs( this_gpio ) == value );
}
8000128c:	00812403          	lw	s0,8(sp)
80001290:	00c12083          	lw	ra,12(sp)
80001294:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80001298:	0a050513          	addi	a0,a0,160
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
8000129c:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
800012a0:	bf1ff06f          	j	80000e90 <HW_set_32bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:122
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint16_t)value );
800012a4:	00052503          	lw	a0,0(a0)
800012a8:	01059593          	slli	a1,a1,0x10
800012ac:	0105d593          	srli	a1,a1,0x10
800012b0:	0a050513          	addi	a0,a0,160
800012b4:	c25ff0ef          	jal	ra,80000ed8 <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
800012b8:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
800012bc:	00812403          	lw	s0,8(sp)
800012c0:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
800012c4:	0104d593          	srli	a1,s1,0x10
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
800012c8:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
800012cc:	0a450513          	addi	a0,a0,164
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
800012d0:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
800012d4:	c05ff06f          	j	80000ed8 <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:127
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint8_t)value );
800012d8:	00052503          	lw	a0,0(a0)
800012dc:	0ff5f593          	andi	a1,a1,255
800012e0:	0a050513          	addi	a0,a0,160
800012e4:	c3dff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:128
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint8_t)(value >> 8) );
800012e8:	00042503          	lw	a0,0(s0)
800012ec:	0084d593          	srli	a1,s1,0x8
800012f0:	0ff5f593          	andi	a1,a1,255
800012f4:	0a450513          	addi	a0,a0,164
800012f8:	c29ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:129
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT2, (uint8_t)(value >> 16) );
800012fc:	00042503          	lw	a0,0(s0)
80001300:	0104d593          	srli	a1,s1,0x10
80001304:	0ff5f593          	andi	a1,a1,255
80001308:	0a850513          	addi	a0,a0,168
8000130c:	c15ff0ef          	jal	ra,80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80001310:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80001314:	00812403          	lw	s0,8(sp)
80001318:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
8000131c:	0184d593          	srli	a1,s1,0x18
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80001320:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80001324:	0ac50513          	addi	a0,a0,172
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80001328:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
8000132c:	bf5ff06f          	j	80000f20 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80001330:	00c12083          	lw	ra,12(sp)
80001334:	00812403          	lw	s0,8(sp)
80001338:	00412483          	lw	s1,4(sp)
8000133c:	01010113          	addi	sp,sp,16
80001340:	00008067          	ret

80001344 <Software_IRQHandler>:
MRV_clear_soft_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\src\platform/miv_rv32_hal/miv_rv32_hal.h:735
{
#ifdef MIV_LEGACY_RV32
    MSIP = 0x00u;   /* clear soft interrupt */
#else
    /* Clear soft IRQ on MIV_RV32 processor */
    SUBSYS->soft_reg &= ~SUBSYS_SOFT_IRQ;
80001344:	00006737          	lui	a4,0x6
80001348:	02072783          	lw	a5,32(a4) # 6020 <STACK_SIZE+0x5c20>
8000134c:	ffd7f793          	andi	a5,a5,-3
80001350:	02f72023          	sw	a5,32(a4)
Software_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:45
 * in miv_rv32_stubs.c.
 */
void Software_IRQHandler()
{
    MRV_clear_soft_irq();
}
80001354:	00008067          	ret

80001358 <SysTick_Handler>:
SysTick_Handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:54
 * Toggles the LEDs on the board through the GPIO and counts the number of Ticks
 * that have occured and prints the interrupt count in message on the UART.
 */

void SysTick_Handler(void)
{
80001358:	ff010113          	addi	sp,sp,-16
8000135c:	00812423          	sw	s0,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:56
    static uint32_t interrupt_counter = 0;
    interrupt_counter++;
80001360:	88418413          	addi	s0,gp,-1916 # 80004084 <interrupt_counter.2878>
80001364:	00042783          	lw	a5,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:54
{
80001368:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:59
    static volatile uint32_t val = 0u;
    val ^= 0xFu;
    GPIO_set_outputs(&g_gpio_out, val);
8000136c:	8e018513          	addi	a0,gp,-1824 # 800040e0 <g_gpio_out>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:56
    interrupt_counter++;
80001370:	00178793          	addi	a5,a5,1
80001374:	00f42023          	sw	a5,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:58
    val ^= 0xFu;
80001378:	88818793          	addi	a5,gp,-1912 # 80004088 <val.2879>
8000137c:	0007a703          	lw	a4,0(a5)
80001380:	00f74713          	xori	a4,a4,15
80001384:	00e7a023          	sw	a4,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:59
    GPIO_set_outputs(&g_gpio_out, val);
80001388:	0007a583          	lw	a1,0(a5)
8000138c:	ecdff0ef          	jal	ra,80001258 <GPIO_set_outputs>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
80001390:	00042583          	lw	a1,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:61
}
80001394:	00812403          	lw	s0,8(sp)
80001398:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
8000139c:	00002517          	auipc	a0,0x2
800013a0:	b5450513          	addi	a0,a0,-1196 # 80002ef0 <local_irq_handler_table+0x40>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:61
}
800013a4:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
800013a8:	0d00006f          	j	80001478 <iprintf>

800013ac <main>:
main():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:67

/*-------------------------------------------------------------------------//**
  main() function.
*/
int main(void)
{
800013ac:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:72
    uint8_t rx_char;
    uint8_t rx_count;
    uint32_t switches;

    UART_init(&g_uart,
800013b0:	00100693          	li	a3,1
800013b4:	01a00613          	li	a2,26
800013b8:	710005b7          	lui	a1,0x71000
800013bc:	8e818513          	addi	a0,gp,-1816 # 800040e8 <g_uart>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:67
{
800013c0:	00112623          	sw	ra,12(sp)
800013c4:	00812423          	sw	s0,8(sp)
800013c8:	00912223          	sw	s1,4(sp)
800013cc:	01212023          	sw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:72
    UART_init(&g_uart,
800013d0:	b99ff0ef          	jal	ra,80000f68 <UART_init>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:77
              COREUARTAPB0_BASE_ADDR,
              BAUD_VALUE_115200,
              (DATA_8_BITS | NO_PARITY));

    printf(g_hello_msg);
800013d4:	00003797          	auipc	a5,0x3
800013d8:	c3078793          	addi	a5,a5,-976 # 80004004 <g_hello_msg>
800013dc:	0007a503          	lw	a0,0(a5)
800013e0:	098000ef          	jal	ra,80001478 <iprintf>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:80

    /* Initializing GPIOs */
    GPIO_init(&g_gpio_out, COREGPIO_OUT_BASE_ADDR, GPIO_APB_32_BITS_BUS);
800013e4:	00200613          	li	a2,2
800013e8:	750005b7          	lui	a1,0x75000
800013ec:	8e018513          	addi	a0,gp,-1824 # 800040e0 <g_gpio_out>
800013f0:	d4dff0ef          	jal	ra,8000113c <GPIO_init>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:98
	 * GPIO_config(&g_gpio_out, 0, GPIO_OUTPUT_MODE);
     * GPIO_config(&g_gpio_out, 1, GPIO_OUTPUT_MODE);
	 */

    /* set the output value */
    GPIO_set_outputs(&g_gpio_out, 0x0u);
800013f4:	00000593          	li	a1,0
800013f8:	8e018513          	addi	a0,gp,-1824 # 800040e0 <g_gpio_out>
800013fc:	e5dff0ef          	jal	ra,80001258 <GPIO_set_outputs>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:101

    /* This must be done for all Mi-V cores to enable interrupts globally. */
    HAL_enable_interrupts();
80001400:	a89ff0ef          	jal	ra,80000e88 <HAL_enable_interrupts>
MRV_enable_local_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\src\platform/miv_rv32_hal/miv_rv32_hal.h:587
    set_csr(mie, mask);
80001404:	070007b7          	lui	a5,0x7000
80001408:	3047a7f3          	csrrs	a5,mie,a5
main():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:107

#ifndef MIV_LEGACY_RV32
    MRV_enable_local_irq(MRV32_MSYS_EIE0_IRQn | MRV32_MSYS_EIE1_IRQn | MRV32_MSYS_EIE2_IRQn);
#endif

    MRV_systick_config(SYS_CLK_FREQ);
8000140c:	02faf537          	lui	a0,0x2faf
80001410:	08050513          	addi	a0,a0,128 # 2faf080 <STACK_SIZE+0x2faec80>
80001414:	00000593          	li	a1,0
80001418:	f48ff0ef          	jal	ra,80000b60 <MRV_systick_config>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:114
    /**************************************************************************
    * Loop
    *************************************************************************/
    do
    {
        g_rx_size = UART_get_rx(&g_uart, g_rx_buff, sizeof(g_rx_buff));
8000141c:	8a018493          	addi	s1,gp,-1888 # 800040a0 <__sbss_end>
80001420:	8e818413          	addi	s0,gp,-1816 # 800040e8 <g_uart>
80001424:	88018913          	addi	s2,gp,-1920 # 80004080 <g_rx_size>
80001428:	04000613          	li	a2,64
8000142c:	8a018593          	addi	a1,gp,-1888 # 800040a0 <__sbss_end>
80001430:	00040513          	mv	a0,s0
80001434:	be1ff0ef          	jal	ra,80001014 <UART_get_rx>
80001438:	88a18023          	sb	a0,-1920(gp) # 80004080 <g_rx_size>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:116

        if (g_rx_size > 0u)
8000143c:	00094783          	lbu	a5,0(s2)
80001440:	0ff7f793          	andi	a5,a5,255
80001444:	fe0782e3          	beqz	a5,80001428 <main+0x7c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:119
        {
            /* Echo the characters received from the terminal */
            UART_polled_tx_string(&g_uart, (const uint8_t *)g_rx_buff);
80001448:	00048593          	mv	a1,s1
8000144c:	00040513          	mv	a0,s0
80001450:	c85ff0ef          	jal	ra,800010d4 <UART_polled_tx_string>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32imc-Release/../src/application/main.c:120
            g_rx_size = 0u;
80001454:	88018023          	sb	zero,-1920(gp) # 80004080 <g_rx_size>
80001458:	fd1ff06f          	j	80001428 <main+0x7c>

8000145c <memset>:
memset():
8000145c:	00050313          	mv	t1,a0
80001460:	00060a63          	beqz	a2,80001474 <memset+0x18>
80001464:	00b30023          	sb	a1,0(t1)
80001468:	fff60613          	addi	a2,a2,-1
8000146c:	00130313          	addi	t1,t1,1
80001470:	fe061ae3          	bnez	a2,80001464 <memset+0x8>
80001474:	00008067          	ret

80001478 <iprintf>:
printf():
80001478:	fc010113          	addi	sp,sp,-64
8000147c:	02f12a23          	sw	a5,52(sp)
80001480:	02b12223          	sw	a1,36(sp)
80001484:	02c12423          	sw	a2,40(sp)
80001488:	02d12623          	sw	a3,44(sp)
8000148c:	02e12823          	sw	a4,48(sp)
80001490:	03012c23          	sw	a6,56(sp)
80001494:	03112e23          	sw	a7,60(sp)
80001498:	00003797          	auipc	a5,0x3
8000149c:	b7078793          	addi	a5,a5,-1168 # 80004008 <_impure_ptr>
800014a0:	00812c23          	sw	s0,24(sp)
800014a4:	0007a403          	lw	s0,0(a5)
800014a8:	00912a23          	sw	s1,20(sp)
800014ac:	00112e23          	sw	ra,28(sp)
800014b0:	00050493          	mv	s1,a0
800014b4:	00040a63          	beqz	s0,800014c8 <iprintf+0x50>
800014b8:	01842783          	lw	a5,24(s0)
800014bc:	00079663          	bnez	a5,800014c8 <iprintf+0x50>
800014c0:	00040513          	mv	a0,s0
800014c4:	180000ef          	jal	ra,80001644 <__sinit>
800014c8:	00842583          	lw	a1,8(s0)
800014cc:	02410693          	addi	a3,sp,36
800014d0:	00048613          	mv	a2,s1
800014d4:	00040513          	mv	a0,s0
800014d8:	00d12623          	sw	a3,12(sp)
800014dc:	5bc000ef          	jal	ra,80001a98 <_vfiprintf_r>
800014e0:	01c12083          	lw	ra,28(sp)
800014e4:	01812403          	lw	s0,24(sp)
800014e8:	01412483          	lw	s1,20(sp)
800014ec:	04010113          	addi	sp,sp,64
800014f0:	00008067          	ret

800014f4 <isatty>:
isatty():
800014f4:	931ff06f          	j	80000e24 <_isatty>

800014f8 <_write_r>:
_write_r():
800014f8:	ff010113          	addi	sp,sp,-16
800014fc:	00812423          	sw	s0,8(sp)
80001500:	00050413          	mv	s0,a0
80001504:	00058513          	mv	a0,a1
80001508:	00060593          	mv	a1,a2
8000150c:	00068613          	mv	a2,a3
80001510:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80001514:	00112623          	sw	ra,12(sp)
80001518:	969ff0ef          	jal	ra,80000e80 <_write>
8000151c:	fff00793          	li	a5,-1
80001520:	00f51a63          	bne	a0,a5,80001534 <_write_r+0x3c>
80001524:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80001528:	0007a783          	lw	a5,0(a5)
8000152c:	00078463          	beqz	a5,80001534 <_write_r+0x3c>
80001530:	00f42023          	sw	a5,0(s0)
80001534:	00c12083          	lw	ra,12(sp)
80001538:	00812403          	lw	s0,8(sp)
8000153c:	01010113          	addi	sp,sp,16
80001540:	00008067          	ret

80001544 <std>:
std():
80001544:	ff010113          	addi	sp,sp,-16
80001548:	00812423          	sw	s0,8(sp)
8000154c:	00112623          	sw	ra,12(sp)
80001550:	00050413          	mv	s0,a0
80001554:	00b51623          	sh	a1,12(a0)
80001558:	00c51723          	sh	a2,14(a0)
8000155c:	00052023          	sw	zero,0(a0)
80001560:	00052223          	sw	zero,4(a0)
80001564:	00052423          	sw	zero,8(a0)
80001568:	06052223          	sw	zero,100(a0)
8000156c:	00052823          	sw	zero,16(a0)
80001570:	00052a23          	sw	zero,20(a0)
80001574:	00052c23          	sw	zero,24(a0)
80001578:	00800613          	li	a2,8
8000157c:	00000593          	li	a1,0
80001580:	05c50513          	addi	a0,a0,92
80001584:	ed9ff0ef          	jal	ra,8000145c <memset>
80001588:	00001797          	auipc	a5,0x1
8000158c:	e9878793          	addi	a5,a5,-360 # 80002420 <__sread>
80001590:	02f42223          	sw	a5,36(s0)
80001594:	00001797          	auipc	a5,0x1
80001598:	edc78793          	addi	a5,a5,-292 # 80002470 <__swrite>
8000159c:	02f42423          	sw	a5,40(s0)
800015a0:	00001797          	auipc	a5,0x1
800015a4:	f5478793          	addi	a5,a5,-172 # 800024f4 <__sseek>
800015a8:	02f42623          	sw	a5,44(s0)
800015ac:	00001797          	auipc	a5,0x1
800015b0:	fa078793          	addi	a5,a5,-96 # 8000254c <__sclose>
800015b4:	02842023          	sw	s0,32(s0)
800015b8:	02f42823          	sw	a5,48(s0)
800015bc:	00c12083          	lw	ra,12(sp)
800015c0:	00812403          	lw	s0,8(sp)
800015c4:	01010113          	addi	sp,sp,16
800015c8:	00008067          	ret

800015cc <_cleanup_r>:
_cleanup_r():
800015cc:	00001597          	auipc	a1,0x1
800015d0:	47058593          	addi	a1,a1,1136 # 80002a3c <_fflush_r>
800015d4:	2140006f          	j	800017e8 <_fwalk_reent>

800015d8 <__sfmoreglue>:
__sfmoreglue():
800015d8:	ff010113          	addi	sp,sp,-16
800015dc:	00912223          	sw	s1,4(sp)
800015e0:	06800613          	li	a2,104
800015e4:	fff58493          	addi	s1,a1,-1
800015e8:	02c484b3          	mul	s1,s1,a2
800015ec:	01212023          	sw	s2,0(sp)
800015f0:	00058913          	mv	s2,a1
800015f4:	00812423          	sw	s0,8(sp)
800015f8:	00112623          	sw	ra,12(sp)
800015fc:	07448593          	addi	a1,s1,116
80001600:	29c000ef          	jal	ra,8000189c <_malloc_r>
80001604:	00050413          	mv	s0,a0
80001608:	02050063          	beqz	a0,80001628 <__sfmoreglue+0x50>
8000160c:	00052023          	sw	zero,0(a0)
80001610:	01252223          	sw	s2,4(a0)
80001614:	00c50513          	addi	a0,a0,12
80001618:	00a42423          	sw	a0,8(s0)
8000161c:	06848613          	addi	a2,s1,104
80001620:	00000593          	li	a1,0
80001624:	e39ff0ef          	jal	ra,8000145c <memset>
80001628:	00040513          	mv	a0,s0
8000162c:	00c12083          	lw	ra,12(sp)
80001630:	00812403          	lw	s0,8(sp)
80001634:	00412483          	lw	s1,4(sp)
80001638:	00012903          	lw	s2,0(sp)
8000163c:	01010113          	addi	sp,sp,16
80001640:	00008067          	ret

80001644 <__sinit>:
__sinit():
80001644:	01852783          	lw	a5,24(a0)
80001648:	0a079663          	bnez	a5,800016f4 <__sinit+0xb0>
8000164c:	ff010113          	addi	sp,sp,-16
80001650:	00112623          	sw	ra,12(sp)
80001654:	00812423          	sw	s0,8(sp)
80001658:	00000797          	auipc	a5,0x0
8000165c:	f7478793          	addi	a5,a5,-140 # 800015cc <_cleanup_r>
80001660:	02f52423          	sw	a5,40(a0)
80001664:	00002797          	auipc	a5,0x2
80001668:	acc78793          	addi	a5,a5,-1332 # 80003130 <_global_impure_ptr>
8000166c:	0007a783          	lw	a5,0(a5)
80001670:	04052423          	sw	zero,72(a0)
80001674:	04052623          	sw	zero,76(a0)
80001678:	04052823          	sw	zero,80(a0)
8000167c:	00f51663          	bne	a0,a5,80001688 <__sinit+0x44>
80001680:	00100793          	li	a5,1
80001684:	00f52c23          	sw	a5,24(a0)
80001688:	00050413          	mv	s0,a0
8000168c:	06c000ef          	jal	ra,800016f8 <__sfp>
80001690:	00a42223          	sw	a0,4(s0)
80001694:	00040513          	mv	a0,s0
80001698:	060000ef          	jal	ra,800016f8 <__sfp>
8000169c:	00a42423          	sw	a0,8(s0)
800016a0:	00040513          	mv	a0,s0
800016a4:	054000ef          	jal	ra,800016f8 <__sfp>
800016a8:	00a42623          	sw	a0,12(s0)
800016ac:	00442503          	lw	a0,4(s0)
800016b0:	00000613          	li	a2,0
800016b4:	00400593          	li	a1,4
800016b8:	e8dff0ef          	jal	ra,80001544 <std>
800016bc:	00842503          	lw	a0,8(s0)
800016c0:	00100613          	li	a2,1
800016c4:	00900593          	li	a1,9
800016c8:	e7dff0ef          	jal	ra,80001544 <std>
800016cc:	00c42503          	lw	a0,12(s0)
800016d0:	00200613          	li	a2,2
800016d4:	01200593          	li	a1,18
800016d8:	e6dff0ef          	jal	ra,80001544 <std>
800016dc:	00100793          	li	a5,1
800016e0:	00f42c23          	sw	a5,24(s0)
800016e4:	00c12083          	lw	ra,12(sp)
800016e8:	00812403          	lw	s0,8(sp)
800016ec:	01010113          	addi	sp,sp,16
800016f0:	00008067          	ret
800016f4:	00008067          	ret

800016f8 <__sfp>:
__sfp():
800016f8:	ff010113          	addi	sp,sp,-16
800016fc:	00002797          	auipc	a5,0x2
80001700:	a3478793          	addi	a5,a5,-1484 # 80003130 <_global_impure_ptr>
80001704:	00912223          	sw	s1,4(sp)
80001708:	0007a483          	lw	s1,0(a5)
8000170c:	01212023          	sw	s2,0(sp)
80001710:	00112623          	sw	ra,12(sp)
80001714:	0184a783          	lw	a5,24(s1)
80001718:	00812423          	sw	s0,8(sp)
8000171c:	00050913          	mv	s2,a0
80001720:	00079663          	bnez	a5,8000172c <__sfp+0x34>
80001724:	00048513          	mv	a0,s1
80001728:	f1dff0ef          	jal	ra,80001644 <__sinit>
8000172c:	04848493          	addi	s1,s1,72
80001730:	0084a403          	lw	s0,8(s1)
80001734:	0044a783          	lw	a5,4(s1)
80001738:	fff78793          	addi	a5,a5,-1
8000173c:	0007da63          	bgez	a5,80001750 <__sfp+0x58>
80001740:	0004a783          	lw	a5,0(s1)
80001744:	08078063          	beqz	a5,800017c4 <__sfp+0xcc>
80001748:	0004a483          	lw	s1,0(s1)
8000174c:	fe5ff06f          	j	80001730 <__sfp+0x38>
80001750:	00c41703          	lh	a4,12(s0)
80001754:	06071463          	bnez	a4,800017bc <__sfp+0xc4>
80001758:	ffff07b7          	lui	a5,0xffff0
8000175c:	00178793          	addi	a5,a5,1 # ffff0001 <__global_pointer$+0x7ffeb801>
80001760:	06042223          	sw	zero,100(s0)
80001764:	00042023          	sw	zero,0(s0)
80001768:	00042223          	sw	zero,4(s0)
8000176c:	00042423          	sw	zero,8(s0)
80001770:	00f42623          	sw	a5,12(s0)
80001774:	00042823          	sw	zero,16(s0)
80001778:	00042a23          	sw	zero,20(s0)
8000177c:	00042c23          	sw	zero,24(s0)
80001780:	00800613          	li	a2,8
80001784:	00000593          	li	a1,0
80001788:	05c40513          	addi	a0,s0,92
8000178c:	cd1ff0ef          	jal	ra,8000145c <memset>
80001790:	02042a23          	sw	zero,52(s0)
80001794:	02042c23          	sw	zero,56(s0)
80001798:	04042423          	sw	zero,72(s0)
8000179c:	04042623          	sw	zero,76(s0)
800017a0:	00040513          	mv	a0,s0
800017a4:	00c12083          	lw	ra,12(sp)
800017a8:	00812403          	lw	s0,8(sp)
800017ac:	00412483          	lw	s1,4(sp)
800017b0:	00012903          	lw	s2,0(sp)
800017b4:	01010113          	addi	sp,sp,16
800017b8:	00008067          	ret
800017bc:	06840413          	addi	s0,s0,104
800017c0:	f79ff06f          	j	80001738 <__sfp+0x40>
800017c4:	00400593          	li	a1,4
800017c8:	00090513          	mv	a0,s2
800017cc:	e0dff0ef          	jal	ra,800015d8 <__sfmoreglue>
800017d0:	00a4a023          	sw	a0,0(s1)
800017d4:	00050413          	mv	s0,a0
800017d8:	f60518e3          	bnez	a0,80001748 <__sfp+0x50>
800017dc:	00c00793          	li	a5,12
800017e0:	00f92023          	sw	a5,0(s2)
800017e4:	fbdff06f          	j	800017a0 <__sfp+0xa8>

800017e8 <_fwalk_reent>:
_fwalk_reent():
800017e8:	fd010113          	addi	sp,sp,-48
800017ec:	02812423          	sw	s0,40(sp)
800017f0:	03212023          	sw	s2,32(sp)
800017f4:	01412c23          	sw	s4,24(sp)
800017f8:	01512a23          	sw	s5,20(sp)
800017fc:	01612823          	sw	s6,16(sp)
80001800:	01712623          	sw	s7,12(sp)
80001804:	02112623          	sw	ra,44(sp)
80001808:	02912223          	sw	s1,36(sp)
8000180c:	01312e23          	sw	s3,28(sp)
80001810:	00050a13          	mv	s4,a0
80001814:	00058a93          	mv	s5,a1
80001818:	04850413          	addi	s0,a0,72
8000181c:	00000913          	li	s2,0
80001820:	00100b13          	li	s6,1
80001824:	fff00b93          	li	s7,-1
80001828:	02041a63          	bnez	s0,8000185c <_fwalk_reent+0x74>
8000182c:	02c12083          	lw	ra,44(sp)
80001830:	02812403          	lw	s0,40(sp)
80001834:	00090513          	mv	a0,s2
80001838:	02412483          	lw	s1,36(sp)
8000183c:	02012903          	lw	s2,32(sp)
80001840:	01c12983          	lw	s3,28(sp)
80001844:	01812a03          	lw	s4,24(sp)
80001848:	01412a83          	lw	s5,20(sp)
8000184c:	01012b03          	lw	s6,16(sp)
80001850:	00c12b83          	lw	s7,12(sp)
80001854:	03010113          	addi	sp,sp,48
80001858:	00008067          	ret
8000185c:	00842483          	lw	s1,8(s0)
80001860:	00442983          	lw	s3,4(s0)
80001864:	fff98993          	addi	s3,s3,-1
80001868:	0009d663          	bgez	s3,80001874 <_fwalk_reent+0x8c>
8000186c:	00042403          	lw	s0,0(s0)
80001870:	fb9ff06f          	j	80001828 <_fwalk_reent+0x40>
80001874:	00c4d783          	lhu	a5,12(s1)
80001878:	00fb7e63          	bgeu	s6,a5,80001894 <_fwalk_reent+0xac>
8000187c:	00e49783          	lh	a5,14(s1)
80001880:	01778a63          	beq	a5,s7,80001894 <_fwalk_reent+0xac>
80001884:	00048593          	mv	a1,s1
80001888:	000a0513          	mv	a0,s4
8000188c:	000a80e7          	jalr	s5
80001890:	00a96933          	or	s2,s2,a0
80001894:	06848493          	addi	s1,s1,104
80001898:	fcdff06f          	j	80001864 <_fwalk_reent+0x7c>

8000189c <_malloc_r>:
_malloc_r():
8000189c:	fe010113          	addi	sp,sp,-32
800018a0:	00912a23          	sw	s1,20(sp)
800018a4:	00358493          	addi	s1,a1,3
800018a8:	ffc4f493          	andi	s1,s1,-4
800018ac:	00112e23          	sw	ra,28(sp)
800018b0:	00812c23          	sw	s0,24(sp)
800018b4:	01212823          	sw	s2,16(sp)
800018b8:	01312623          	sw	s3,12(sp)
800018bc:	00848493          	addi	s1,s1,8
800018c0:	00c00793          	li	a5,12
800018c4:	06f4f463          	bgeu	s1,a5,8000192c <_malloc_r+0x90>
800018c8:	00c00493          	li	s1,12
800018cc:	06b4e263          	bltu	s1,a1,80001930 <_malloc_r+0x94>
800018d0:	00050913          	mv	s2,a0
800018d4:	3f4010ef          	jal	ra,80002cc8 <__malloc_lock>
800018d8:	88c18793          	addi	a5,gp,-1908 # 8000408c <__malloc_free_list>
800018dc:	0007a703          	lw	a4,0(a5)
800018e0:	00070413          	mv	s0,a4
800018e4:	06041a63          	bnez	s0,80001958 <_malloc_r+0xbc>
800018e8:	89018793          	addi	a5,gp,-1904 # 80004090 <__malloc_sbrk_start>
800018ec:	0007a783          	lw	a5,0(a5)
800018f0:	00079a63          	bnez	a5,80001904 <_malloc_r+0x68>
800018f4:	00000593          	li	a1,0
800018f8:	00090513          	mv	a0,s2
800018fc:	2e1000ef          	jal	ra,800023dc <_sbrk_r>
80001900:	88a1a823          	sw	a0,-1904(gp) # 80004090 <__malloc_sbrk_start>
80001904:	00048593          	mv	a1,s1
80001908:	00090513          	mv	a0,s2
8000190c:	2d1000ef          	jal	ra,800023dc <_sbrk_r>
80001910:	fff00993          	li	s3,-1
80001914:	0b351a63          	bne	a0,s3,800019c8 <_malloc_r+0x12c>
80001918:	00c00793          	li	a5,12
8000191c:	00f92023          	sw	a5,0(s2)
80001920:	00090513          	mv	a0,s2
80001924:	3a8010ef          	jal	ra,80002ccc <__malloc_unlock>
80001928:	0100006f          	j	80001938 <_malloc_r+0x9c>
8000192c:	fa04d0e3          	bgez	s1,800018cc <_malloc_r+0x30>
80001930:	00c00793          	li	a5,12
80001934:	00f52023          	sw	a5,0(a0)
80001938:	00000513          	li	a0,0
8000193c:	01c12083          	lw	ra,28(sp)
80001940:	01812403          	lw	s0,24(sp)
80001944:	01412483          	lw	s1,20(sp)
80001948:	01012903          	lw	s2,16(sp)
8000194c:	00c12983          	lw	s3,12(sp)
80001950:	02010113          	addi	sp,sp,32
80001954:	00008067          	ret
80001958:	00042783          	lw	a5,0(s0)
8000195c:	409787b3          	sub	a5,a5,s1
80001960:	0407ce63          	bltz	a5,800019bc <_malloc_r+0x120>
80001964:	00b00693          	li	a3,11
80001968:	00f6fa63          	bgeu	a3,a5,8000197c <_malloc_r+0xe0>
8000196c:	00f42023          	sw	a5,0(s0)
80001970:	00f40433          	add	s0,s0,a5
80001974:	00942023          	sw	s1,0(s0)
80001978:	0100006f          	j	80001988 <_malloc_r+0xec>
8000197c:	00442783          	lw	a5,4(s0)
80001980:	02871a63          	bne	a4,s0,800019b4 <_malloc_r+0x118>
80001984:	88f1a623          	sw	a5,-1908(gp) # 8000408c <__malloc_free_list>
80001988:	00090513          	mv	a0,s2
8000198c:	340010ef          	jal	ra,80002ccc <__malloc_unlock>
80001990:	00b40513          	addi	a0,s0,11
80001994:	00440793          	addi	a5,s0,4
80001998:	ff857513          	andi	a0,a0,-8
8000199c:	40f50733          	sub	a4,a0,a5
800019a0:	f8070ee3          	beqz	a4,8000193c <_malloc_r+0xa0>
800019a4:	00e40433          	add	s0,s0,a4
800019a8:	40a787b3          	sub	a5,a5,a0
800019ac:	00f42023          	sw	a5,0(s0)
800019b0:	f8dff06f          	j	8000193c <_malloc_r+0xa0>
800019b4:	00f72223          	sw	a5,4(a4)
800019b8:	fd1ff06f          	j	80001988 <_malloc_r+0xec>
800019bc:	00040713          	mv	a4,s0
800019c0:	00442403          	lw	s0,4(s0)
800019c4:	f21ff06f          	j	800018e4 <_malloc_r+0x48>
800019c8:	00350413          	addi	s0,a0,3
800019cc:	ffc47413          	andi	s0,s0,-4
800019d0:	fa8502e3          	beq	a0,s0,80001974 <_malloc_r+0xd8>
800019d4:	40a405b3          	sub	a1,s0,a0
800019d8:	00090513          	mv	a0,s2
800019dc:	201000ef          	jal	ra,800023dc <_sbrk_r>
800019e0:	f9351ae3          	bne	a0,s3,80001974 <_malloc_r+0xd8>
800019e4:	f35ff06f          	j	80001918 <_malloc_r+0x7c>

800019e8 <__sfputc_r>:
__sfputc_r():
800019e8:	00862783          	lw	a5,8(a2)
800019ec:	fff78793          	addi	a5,a5,-1
800019f0:	00f62423          	sw	a5,8(a2)
800019f4:	0007dc63          	bgez	a5,80001a0c <__sfputc_r+0x24>
800019f8:	01862703          	lw	a4,24(a2)
800019fc:	00e7c663          	blt	a5,a4,80001a08 <__sfputc_r+0x20>
80001a00:	00a00793          	li	a5,10
80001a04:	00f59463          	bne	a1,a5,80001a0c <__sfputc_r+0x24>
80001a08:	34d0006f          	j	80002554 <__swbuf_r>
80001a0c:	00062783          	lw	a5,0(a2)
80001a10:	00058513          	mv	a0,a1
80001a14:	00178713          	addi	a4,a5,1
80001a18:	00e62023          	sw	a4,0(a2)
80001a1c:	00b78023          	sb	a1,0(a5)
80001a20:	00008067          	ret

80001a24 <__sfputs_r>:
__sfputs_r():
80001a24:	fe010113          	addi	sp,sp,-32
80001a28:	00812c23          	sw	s0,24(sp)
80001a2c:	00912a23          	sw	s1,20(sp)
80001a30:	01212823          	sw	s2,16(sp)
80001a34:	01312623          	sw	s3,12(sp)
80001a38:	01412423          	sw	s4,8(sp)
80001a3c:	00112e23          	sw	ra,28(sp)
80001a40:	00050913          	mv	s2,a0
80001a44:	00058993          	mv	s3,a1
80001a48:	00060413          	mv	s0,a2
80001a4c:	00d604b3          	add	s1,a2,a3
80001a50:	fff00a13          	li	s4,-1
80001a54:	00941663          	bne	s0,s1,80001a60 <__sfputs_r+0x3c>
80001a58:	00000513          	li	a0,0
80001a5c:	01c0006f          	j	80001a78 <__sfputs_r+0x54>
80001a60:	00044583          	lbu	a1,0(s0)
80001a64:	00098613          	mv	a2,s3
80001a68:	00090513          	mv	a0,s2
80001a6c:	f7dff0ef          	jal	ra,800019e8 <__sfputc_r>
80001a70:	00140413          	addi	s0,s0,1
80001a74:	ff4510e3          	bne	a0,s4,80001a54 <__sfputs_r+0x30>
80001a78:	01c12083          	lw	ra,28(sp)
80001a7c:	01812403          	lw	s0,24(sp)
80001a80:	01412483          	lw	s1,20(sp)
80001a84:	01012903          	lw	s2,16(sp)
80001a88:	00c12983          	lw	s3,12(sp)
80001a8c:	00812a03          	lw	s4,8(sp)
80001a90:	02010113          	addi	sp,sp,32
80001a94:	00008067          	ret

80001a98 <_vfiprintf_r>:
_vfiprintf_r():
80001a98:	f6010113          	addi	sp,sp,-160
80001a9c:	08812c23          	sw	s0,152(sp)
80001aa0:	08912a23          	sw	s1,148(sp)
80001aa4:	09212823          	sw	s2,144(sp)
80001aa8:	09312623          	sw	s3,140(sp)
80001aac:	08112e23          	sw	ra,156(sp)
80001ab0:	09412423          	sw	s4,136(sp)
80001ab4:	09512223          	sw	s5,132(sp)
80001ab8:	09612023          	sw	s6,128(sp)
80001abc:	07712e23          	sw	s7,124(sp)
80001ac0:	07812c23          	sw	s8,120(sp)
80001ac4:	07912a23          	sw	s9,116(sp)
80001ac8:	00050993          	mv	s3,a0
80001acc:	00058493          	mv	s1,a1
80001ad0:	00060913          	mv	s2,a2
80001ad4:	00068413          	mv	s0,a3
80001ad8:	00050863          	beqz	a0,80001ae8 <_vfiprintf_r+0x50>
80001adc:	01852783          	lw	a5,24(a0)
80001ae0:	00079463          	bnez	a5,80001ae8 <_vfiprintf_r+0x50>
80001ae4:	b61ff0ef          	jal	ra,80001644 <__sinit>
80001ae8:	00001797          	auipc	a5,0x1
80001aec:	5c478793          	addi	a5,a5,1476 # 800030ac <__sf_fake_stdin>
80001af0:	12f49263          	bne	s1,a5,80001c14 <_vfiprintf_r+0x17c>
80001af4:	0049a483          	lw	s1,4(s3)
80001af8:	00c4d783          	lhu	a5,12(s1)
80001afc:	0087f793          	andi	a5,a5,8
80001b00:	12078e63          	beqz	a5,80001c3c <_vfiprintf_r+0x1a4>
80001b04:	0104a783          	lw	a5,16(s1)
80001b08:	12078a63          	beqz	a5,80001c3c <_vfiprintf_r+0x1a4>
80001b0c:	02000793          	li	a5,32
80001b10:	02f104a3          	sb	a5,41(sp)
80001b14:	03000793          	li	a5,48
80001b18:	02012223          	sw	zero,36(sp)
80001b1c:	02f10523          	sb	a5,42(sp)
80001b20:	00812623          	sw	s0,12(sp)
80001b24:	02500b93          	li	s7,37
80001b28:	00001a97          	auipc	s5,0x1
80001b2c:	5c4a8a93          	addi	s5,s5,1476 # 800030ec <__sf_fake_stdout+0x20>
80001b30:	00100c13          	li	s8,1
80001b34:	00a00b13          	li	s6,10
80001b38:	00090413          	mv	s0,s2
80001b3c:	00044783          	lbu	a5,0(s0)
80001b40:	00078463          	beqz	a5,80001b48 <_vfiprintf_r+0xb0>
80001b44:	15779063          	bne	a5,s7,80001c84 <_vfiprintf_r+0x1ec>
80001b48:	41240cb3          	sub	s9,s0,s2
80001b4c:	020c8663          	beqz	s9,80001b78 <_vfiprintf_r+0xe0>
80001b50:	000c8693          	mv	a3,s9
80001b54:	00090613          	mv	a2,s2
80001b58:	00048593          	mv	a1,s1
80001b5c:	00098513          	mv	a0,s3
80001b60:	ec5ff0ef          	jal	ra,80001a24 <__sfputs_r>
80001b64:	fff00793          	li	a5,-1
80001b68:	2cf50263          	beq	a0,a5,80001e2c <_vfiprintf_r+0x394>
80001b6c:	02412683          	lw	a3,36(sp)
80001b70:	019686b3          	add	a3,a3,s9
80001b74:	02d12223          	sw	a3,36(sp)
80001b78:	00044783          	lbu	a5,0(s0)
80001b7c:	2a078863          	beqz	a5,80001e2c <_vfiprintf_r+0x394>
80001b80:	fff00793          	li	a5,-1
80001b84:	00140913          	addi	s2,s0,1
80001b88:	00012823          	sw	zero,16(sp)
80001b8c:	00012e23          	sw	zero,28(sp)
80001b90:	00f12a23          	sw	a5,20(sp)
80001b94:	00012c23          	sw	zero,24(sp)
80001b98:	040109a3          	sb	zero,83(sp)
80001b9c:	06012423          	sw	zero,104(sp)
80001ba0:	00094583          	lbu	a1,0(s2)
80001ba4:	00500613          	li	a2,5
80001ba8:	000a8513          	mv	a0,s5
80001bac:	0f8010ef          	jal	ra,80002ca4 <memchr>
80001bb0:	00190413          	addi	s0,s2,1
80001bb4:	01012783          	lw	a5,16(sp)
80001bb8:	0c051a63          	bnez	a0,80001c8c <_vfiprintf_r+0x1f4>
80001bbc:	0107f713          	andi	a4,a5,16
80001bc0:	00070663          	beqz	a4,80001bcc <_vfiprintf_r+0x134>
80001bc4:	02000713          	li	a4,32
80001bc8:	04e109a3          	sb	a4,83(sp)
80001bcc:	0087f713          	andi	a4,a5,8
80001bd0:	00070663          	beqz	a4,80001bdc <_vfiprintf_r+0x144>
80001bd4:	02b00713          	li	a4,43
80001bd8:	04e109a3          	sb	a4,83(sp)
80001bdc:	00094683          	lbu	a3,0(s2)
80001be0:	02a00713          	li	a4,42
80001be4:	0ce68063          	beq	a3,a4,80001ca4 <_vfiprintf_r+0x20c>
80001be8:	01c12783          	lw	a5,28(sp)
80001bec:	00090413          	mv	s0,s2
80001bf0:	00000693          	li	a3,0
80001bf4:	00900613          	li	a2,9
80001bf8:	00044703          	lbu	a4,0(s0)
80001bfc:	00140593          	addi	a1,s0,1
80001c00:	fd070713          	addi	a4,a4,-48
80001c04:	10e67263          	bgeu	a2,a4,80001d08 <_vfiprintf_r+0x270>
80001c08:	0a068a63          	beqz	a3,80001cbc <_vfiprintf_r+0x224>
80001c0c:	00f12e23          	sw	a5,28(sp)
80001c10:	0ac0006f          	j	80001cbc <_vfiprintf_r+0x224>
80001c14:	00001797          	auipc	a5,0x1
80001c18:	4b878793          	addi	a5,a5,1208 # 800030cc <__sf_fake_stdout>
80001c1c:	00f49663          	bne	s1,a5,80001c28 <_vfiprintf_r+0x190>
80001c20:	0089a483          	lw	s1,8(s3)
80001c24:	ed5ff06f          	j	80001af8 <_vfiprintf_r+0x60>
80001c28:	00001797          	auipc	a5,0x1
80001c2c:	46478793          	addi	a5,a5,1124 # 8000308c <__sf_fake_stderr>
80001c30:	ecf494e3          	bne	s1,a5,80001af8 <_vfiprintf_r+0x60>
80001c34:	00c9a483          	lw	s1,12(s3)
80001c38:	ec1ff06f          	j	80001af8 <_vfiprintf_r+0x60>
80001c3c:	00048593          	mv	a1,s1
80001c40:	00098513          	mv	a0,s3
80001c44:	249000ef          	jal	ra,8000268c <__swsetup_r>
80001c48:	ec0502e3          	beqz	a0,80001b0c <_vfiprintf_r+0x74>
80001c4c:	fff00513          	li	a0,-1
80001c50:	09c12083          	lw	ra,156(sp)
80001c54:	09812403          	lw	s0,152(sp)
80001c58:	09412483          	lw	s1,148(sp)
80001c5c:	09012903          	lw	s2,144(sp)
80001c60:	08c12983          	lw	s3,140(sp)
80001c64:	08812a03          	lw	s4,136(sp)
80001c68:	08412a83          	lw	s5,132(sp)
80001c6c:	08012b03          	lw	s6,128(sp)
80001c70:	07c12b83          	lw	s7,124(sp)
80001c74:	07812c03          	lw	s8,120(sp)
80001c78:	07412c83          	lw	s9,116(sp)
80001c7c:	0a010113          	addi	sp,sp,160
80001c80:	00008067          	ret
80001c84:	00140413          	addi	s0,s0,1
80001c88:	eb5ff06f          	j	80001b3c <_vfiprintf_r+0xa4>
80001c8c:	41550533          	sub	a0,a0,s5
80001c90:	00ac1533          	sll	a0,s8,a0
80001c94:	00a7e7b3          	or	a5,a5,a0
80001c98:	00f12823          	sw	a5,16(sp)
80001c9c:	00040913          	mv	s2,s0
80001ca0:	f01ff06f          	j	80001ba0 <_vfiprintf_r+0x108>
80001ca4:	00c12703          	lw	a4,12(sp)
80001ca8:	00470693          	addi	a3,a4,4
80001cac:	00072703          	lw	a4,0(a4)
80001cb0:	00d12623          	sw	a3,12(sp)
80001cb4:	04074063          	bltz	a4,80001cf4 <_vfiprintf_r+0x25c>
80001cb8:	00e12e23          	sw	a4,28(sp)
80001cbc:	00044703          	lbu	a4,0(s0)
80001cc0:	02e00793          	li	a5,46
80001cc4:	08f71463          	bne	a4,a5,80001d4c <_vfiprintf_r+0x2b4>
80001cc8:	00144703          	lbu	a4,1(s0)
80001ccc:	02a00793          	li	a5,42
80001cd0:	04f71a63          	bne	a4,a5,80001d24 <_vfiprintf_r+0x28c>
80001cd4:	00c12783          	lw	a5,12(sp)
80001cd8:	00240413          	addi	s0,s0,2
80001cdc:	00478713          	addi	a4,a5,4
80001ce0:	0007a783          	lw	a5,0(a5)
80001ce4:	00e12623          	sw	a4,12(sp)
80001ce8:	0207ca63          	bltz	a5,80001d1c <_vfiprintf_r+0x284>
80001cec:	00f12a23          	sw	a5,20(sp)
80001cf0:	05c0006f          	j	80001d4c <_vfiprintf_r+0x2b4>
80001cf4:	40e00733          	neg	a4,a4
80001cf8:	0027e793          	ori	a5,a5,2
80001cfc:	00e12e23          	sw	a4,28(sp)
80001d00:	00f12823          	sw	a5,16(sp)
80001d04:	fb9ff06f          	j	80001cbc <_vfiprintf_r+0x224>
80001d08:	036787b3          	mul	a5,a5,s6
80001d0c:	00100693          	li	a3,1
80001d10:	00058413          	mv	s0,a1
80001d14:	00e787b3          	add	a5,a5,a4
80001d18:	ee1ff06f          	j	80001bf8 <_vfiprintf_r+0x160>
80001d1c:	fff00793          	li	a5,-1
80001d20:	fcdff06f          	j	80001cec <_vfiprintf_r+0x254>
80001d24:	00140413          	addi	s0,s0,1
80001d28:	00012a23          	sw	zero,20(sp)
80001d2c:	00000693          	li	a3,0
80001d30:	00000793          	li	a5,0
80001d34:	00900613          	li	a2,9
80001d38:	00044703          	lbu	a4,0(s0)
80001d3c:	00140593          	addi	a1,s0,1
80001d40:	fd070713          	addi	a4,a4,-48
80001d44:	08e67c63          	bgeu	a2,a4,80001ddc <_vfiprintf_r+0x344>
80001d48:	fa0692e3          	bnez	a3,80001cec <_vfiprintf_r+0x254>
80001d4c:	00044583          	lbu	a1,0(s0)
80001d50:	00300613          	li	a2,3
80001d54:	00001517          	auipc	a0,0x1
80001d58:	3a050513          	addi	a0,a0,928 # 800030f4 <__sf_fake_stdout+0x28>
80001d5c:	749000ef          	jal	ra,80002ca4 <memchr>
80001d60:	02050463          	beqz	a0,80001d88 <_vfiprintf_r+0x2f0>
80001d64:	00001797          	auipc	a5,0x1
80001d68:	39078793          	addi	a5,a5,912 # 800030f4 <__sf_fake_stdout+0x28>
80001d6c:	40f50533          	sub	a0,a0,a5
80001d70:	04000793          	li	a5,64
80001d74:	00a797b3          	sll	a5,a5,a0
80001d78:	01012503          	lw	a0,16(sp)
80001d7c:	00140413          	addi	s0,s0,1
80001d80:	00f56533          	or	a0,a0,a5
80001d84:	00a12823          	sw	a0,16(sp)
80001d88:	00044583          	lbu	a1,0(s0)
80001d8c:	00600613          	li	a2,6
80001d90:	00001517          	auipc	a0,0x1
80001d94:	36850513          	addi	a0,a0,872 # 800030f8 <__sf_fake_stdout+0x2c>
80001d98:	00140913          	addi	s2,s0,1
80001d9c:	02b10423          	sb	a1,40(sp)
80001da0:	705000ef          	jal	ra,80002ca4 <memchr>
80001da4:	08050e63          	beqz	a0,80001e40 <_vfiprintf_r+0x3a8>
80001da8:	7fffe797          	auipc	a5,0x7fffe
80001dac:	25878793          	addi	a5,a5,600 # 0 <__global_pointer$+0x7fffb800>
80001db0:	04079863          	bnez	a5,80001e00 <_vfiprintf_r+0x368>
80001db4:	01012703          	lw	a4,16(sp)
80001db8:	00c12783          	lw	a5,12(sp)
80001dbc:	10077713          	andi	a4,a4,256
80001dc0:	02070863          	beqz	a4,80001df0 <_vfiprintf_r+0x358>
80001dc4:	00478793          	addi	a5,a5,4
80001dc8:	00f12623          	sw	a5,12(sp)
80001dcc:	02412783          	lw	a5,36(sp)
80001dd0:	014787b3          	add	a5,a5,s4
80001dd4:	02f12223          	sw	a5,36(sp)
80001dd8:	d61ff06f          	j	80001b38 <_vfiprintf_r+0xa0>
80001ddc:	036787b3          	mul	a5,a5,s6
80001de0:	00100693          	li	a3,1
80001de4:	00058413          	mv	s0,a1
80001de8:	00e787b3          	add	a5,a5,a4
80001dec:	f4dff06f          	j	80001d38 <_vfiprintf_r+0x2a0>
80001df0:	00778793          	addi	a5,a5,7
80001df4:	ff87f793          	andi	a5,a5,-8
80001df8:	00878793          	addi	a5,a5,8
80001dfc:	fcdff06f          	j	80001dc8 <_vfiprintf_r+0x330>
80001e00:	00c10713          	addi	a4,sp,12
80001e04:	00000697          	auipc	a3,0x0
80001e08:	c2068693          	addi	a3,a3,-992 # 80001a24 <__sfputs_r>
80001e0c:	00048613          	mv	a2,s1
80001e10:	01010593          	addi	a1,sp,16
80001e14:	00098513          	mv	a0,s3
80001e18:	00000097          	auipc	ra,0x0
80001e1c:	000000e7          	jalr	zero # 0 <HEAP_SIZE>
80001e20:	fff00793          	li	a5,-1
80001e24:	00050a13          	mv	s4,a0
80001e28:	faf512e3          	bne	a0,a5,80001dcc <_vfiprintf_r+0x334>
80001e2c:	00c4d783          	lhu	a5,12(s1)
80001e30:	0407f793          	andi	a5,a5,64
80001e34:	e0079ce3          	bnez	a5,80001c4c <_vfiprintf_r+0x1b4>
80001e38:	02412503          	lw	a0,36(sp)
80001e3c:	e15ff06f          	j	80001c50 <_vfiprintf_r+0x1b8>
80001e40:	00c10713          	addi	a4,sp,12
80001e44:	00000697          	auipc	a3,0x0
80001e48:	be068693          	addi	a3,a3,-1056 # 80001a24 <__sfputs_r>
80001e4c:	00048613          	mv	a2,s1
80001e50:	01010593          	addi	a1,sp,16
80001e54:	00098513          	mv	a0,s3
80001e58:	1b8000ef          	jal	ra,80002010 <_printf_i>
80001e5c:	fc5ff06f          	j	80001e20 <_vfiprintf_r+0x388>

80001e60 <_printf_common>:
_printf_common():
80001e60:	fd010113          	addi	sp,sp,-48
80001e64:	01512a23          	sw	s5,20(sp)
80001e68:	0105a783          	lw	a5,16(a1)
80001e6c:	00070a93          	mv	s5,a4
80001e70:	0085a703          	lw	a4,8(a1)
80001e74:	02812423          	sw	s0,40(sp)
80001e78:	02912223          	sw	s1,36(sp)
80001e7c:	01312e23          	sw	s3,28(sp)
80001e80:	01412c23          	sw	s4,24(sp)
80001e84:	02112623          	sw	ra,44(sp)
80001e88:	03212023          	sw	s2,32(sp)
80001e8c:	01612823          	sw	s6,16(sp)
80001e90:	01712623          	sw	s7,12(sp)
80001e94:	00050993          	mv	s3,a0
80001e98:	00058413          	mv	s0,a1
80001e9c:	00060493          	mv	s1,a2
80001ea0:	00068a13          	mv	s4,a3
80001ea4:	00e7d463          	bge	a5,a4,80001eac <_printf_common+0x4c>
80001ea8:	00070793          	mv	a5,a4
80001eac:	00f4a023          	sw	a5,0(s1)
80001eb0:	04344703          	lbu	a4,67(s0)
80001eb4:	00070663          	beqz	a4,80001ec0 <_printf_common+0x60>
80001eb8:	00178793          	addi	a5,a5,1
80001ebc:	00f4a023          	sw	a5,0(s1)
80001ec0:	00042783          	lw	a5,0(s0)
80001ec4:	0207f793          	andi	a5,a5,32
80001ec8:	00078863          	beqz	a5,80001ed8 <_printf_common+0x78>
80001ecc:	0004a783          	lw	a5,0(s1)
80001ed0:	00278793          	addi	a5,a5,2
80001ed4:	00f4a023          	sw	a5,0(s1)
80001ed8:	00042903          	lw	s2,0(s0)
80001edc:	00697913          	andi	s2,s2,6
80001ee0:	00091e63          	bnez	s2,80001efc <_printf_common+0x9c>
80001ee4:	01940b13          	addi	s6,s0,25
80001ee8:	fff00b93          	li	s7,-1
80001eec:	00c42783          	lw	a5,12(s0)
80001ef0:	0004a703          	lw	a4,0(s1)
80001ef4:	40e787b3          	sub	a5,a5,a4
80001ef8:	08f94263          	blt	s2,a5,80001f7c <_printf_common+0x11c>
80001efc:	00042783          	lw	a5,0(s0)
80001f00:	04344683          	lbu	a3,67(s0)
80001f04:	0207f793          	andi	a5,a5,32
80001f08:	00d036b3          	snez	a3,a3
80001f0c:	0c079063          	bnez	a5,80001fcc <_printf_common+0x16c>
80001f10:	04340613          	addi	a2,s0,67
80001f14:	000a0593          	mv	a1,s4
80001f18:	00098513          	mv	a0,s3
80001f1c:	000a80e7          	jalr	s5
80001f20:	fff00793          	li	a5,-1
80001f24:	06f50863          	beq	a0,a5,80001f94 <_printf_common+0x134>
80001f28:	00042783          	lw	a5,0(s0)
80001f2c:	00400613          	li	a2,4
80001f30:	0004a703          	lw	a4,0(s1)
80001f34:	0067f793          	andi	a5,a5,6
80001f38:	00c42683          	lw	a3,12(s0)
80001f3c:	00000493          	li	s1,0
80001f40:	00c79863          	bne	a5,a2,80001f50 <_printf_common+0xf0>
80001f44:	40e684b3          	sub	s1,a3,a4
80001f48:	0004d463          	bgez	s1,80001f50 <_printf_common+0xf0>
80001f4c:	00000493          	li	s1,0
80001f50:	00842783          	lw	a5,8(s0)
80001f54:	01042703          	lw	a4,16(s0)
80001f58:	00f75663          	bge	a4,a5,80001f64 <_printf_common+0x104>
80001f5c:	40e787b3          	sub	a5,a5,a4
80001f60:	00f484b3          	add	s1,s1,a5
80001f64:	00000913          	li	s2,0
80001f68:	01a40413          	addi	s0,s0,26
80001f6c:	fff00b13          	li	s6,-1
80001f70:	09249063          	bne	s1,s2,80001ff0 <_printf_common+0x190>
80001f74:	00000513          	li	a0,0
80001f78:	0200006f          	j	80001f98 <_printf_common+0x138>
80001f7c:	00100693          	li	a3,1
80001f80:	000b0613          	mv	a2,s6
80001f84:	000a0593          	mv	a1,s4
80001f88:	00098513          	mv	a0,s3
80001f8c:	000a80e7          	jalr	s5
80001f90:	03751a63          	bne	a0,s7,80001fc4 <_printf_common+0x164>
80001f94:	fff00513          	li	a0,-1
80001f98:	02c12083          	lw	ra,44(sp)
80001f9c:	02812403          	lw	s0,40(sp)
80001fa0:	02412483          	lw	s1,36(sp)
80001fa4:	02012903          	lw	s2,32(sp)
80001fa8:	01c12983          	lw	s3,28(sp)
80001fac:	01812a03          	lw	s4,24(sp)
80001fb0:	01412a83          	lw	s5,20(sp)
80001fb4:	01012b03          	lw	s6,16(sp)
80001fb8:	00c12b83          	lw	s7,12(sp)
80001fbc:	03010113          	addi	sp,sp,48
80001fc0:	00008067          	ret
80001fc4:	00190913          	addi	s2,s2,1
80001fc8:	f25ff06f          	j	80001eec <_printf_common+0x8c>
80001fcc:	00d40733          	add	a4,s0,a3
80001fd0:	03000613          	li	a2,48
80001fd4:	04c701a3          	sb	a2,67(a4)
80001fd8:	04544703          	lbu	a4,69(s0)
80001fdc:	00168793          	addi	a5,a3,1
80001fe0:	00f407b3          	add	a5,s0,a5
80001fe4:	00268693          	addi	a3,a3,2
80001fe8:	04e781a3          	sb	a4,67(a5)
80001fec:	f25ff06f          	j	80001f10 <_printf_common+0xb0>
80001ff0:	00100693          	li	a3,1
80001ff4:	00040613          	mv	a2,s0
80001ff8:	000a0593          	mv	a1,s4
80001ffc:	00098513          	mv	a0,s3
80002000:	000a80e7          	jalr	s5
80002004:	f96508e3          	beq	a0,s6,80001f94 <_printf_common+0x134>
80002008:	00190913          	addi	s2,s2,1
8000200c:	f65ff06f          	j	80001f70 <_printf_common+0x110>

80002010 <_printf_i>:
_printf_i():
80002010:	fd010113          	addi	sp,sp,-48
80002014:	02812423          	sw	s0,40(sp)
80002018:	02912223          	sw	s1,36(sp)
8000201c:	03212023          	sw	s2,32(sp)
80002020:	01312e23          	sw	s3,28(sp)
80002024:	02112623          	sw	ra,44(sp)
80002028:	01412c23          	sw	s4,24(sp)
8000202c:	01512a23          	sw	s5,20(sp)
80002030:	01612823          	sw	s6,16(sp)
80002034:	00068993          	mv	s3,a3
80002038:	0185c683          	lbu	a3,24(a1)
8000203c:	06e00793          	li	a5,110
80002040:	00060913          	mv	s2,a2
80002044:	00050493          	mv	s1,a0
80002048:	00058413          	mv	s0,a1
8000204c:	04358613          	addi	a2,a1,67
80002050:	28f68863          	beq	a3,a5,800022e0 <_printf_i+0x2d0>
80002054:	06d7ea63          	bltu	a5,a3,800020c8 <_printf_i+0xb8>
80002058:	06300793          	li	a5,99
8000205c:	0af68e63          	beq	a3,a5,80002118 <_printf_i+0x108>
80002060:	00d7ee63          	bltu	a5,a3,8000207c <_printf_i+0x6c>
80002064:	2a068c63          	beqz	a3,8000231c <_printf_i+0x30c>
80002068:	05800793          	li	a5,88
8000206c:	1ef68a63          	beq	a3,a5,80002260 <_printf_i+0x250>
80002070:	04240a93          	addi	s5,s0,66
80002074:	04d40123          	sb	a3,66(s0)
80002078:	0b80006f          	j	80002130 <_printf_i+0x120>
8000207c:	06400793          	li	a5,100
80002080:	00f68663          	beq	a3,a5,8000208c <_printf_i+0x7c>
80002084:	06900793          	li	a5,105
80002088:	fef694e3          	bne	a3,a5,80002070 <_printf_i+0x60>
8000208c:	00042783          	lw	a5,0(s0)
80002090:	00072503          	lw	a0,0(a4)
80002094:	0807f693          	andi	a3,a5,128
80002098:	00450593          	addi	a1,a0,4
8000209c:	08068e63          	beqz	a3,80002138 <_printf_i+0x128>
800020a0:	00052783          	lw	a5,0(a0)
800020a4:	00b72023          	sw	a1,0(a4)
800020a8:	0007d863          	bgez	a5,800020b8 <_printf_i+0xa8>
800020ac:	02d00713          	li	a4,45
800020b0:	40f007b3          	neg	a5,a5
800020b4:	04e401a3          	sb	a4,67(s0)
800020b8:	00001697          	auipc	a3,0x1
800020bc:	04868693          	addi	a3,a3,72 # 80003100 <__sf_fake_stdout+0x34>
800020c0:	00a00713          	li	a4,10
800020c4:	0d80006f          	j	8000219c <_printf_i+0x18c>
800020c8:	07300793          	li	a5,115
800020cc:	24f68e63          	beq	a3,a5,80002328 <_printf_i+0x318>
800020d0:	02d7e263          	bltu	a5,a3,800020f4 <_printf_i+0xe4>
800020d4:	06f00793          	li	a5,111
800020d8:	06f68e63          	beq	a3,a5,80002154 <_printf_i+0x144>
800020dc:	07000793          	li	a5,112
800020e0:	f8f698e3          	bne	a3,a5,80002070 <_printf_i+0x60>
800020e4:	0005a783          	lw	a5,0(a1)
800020e8:	0207e793          	ori	a5,a5,32
800020ec:	00f5a023          	sw	a5,0(a1)
800020f0:	0140006f          	j	80002104 <_printf_i+0xf4>
800020f4:	07500793          	li	a5,117
800020f8:	04f68e63          	beq	a3,a5,80002154 <_printf_i+0x144>
800020fc:	07800793          	li	a5,120
80002100:	f6f698e3          	bne	a3,a5,80002070 <_printf_i+0x60>
80002104:	07800793          	li	a5,120
80002108:	04f402a3          	sb	a5,69(s0)
8000210c:	00001697          	auipc	a3,0x1
80002110:	00868693          	addi	a3,a3,8 # 80003114 <__sf_fake_stdout+0x48>
80002114:	1580006f          	j	8000226c <_printf_i+0x25c>
80002118:	00072783          	lw	a5,0(a4)
8000211c:	04258a93          	addi	s5,a1,66
80002120:	00478693          	addi	a3,a5,4
80002124:	0007a783          	lw	a5,0(a5)
80002128:	00d72023          	sw	a3,0(a4)
8000212c:	04f58123          	sb	a5,66(a1)
80002130:	00100793          	li	a5,1
80002134:	2240006f          	j	80002358 <_printf_i+0x348>
80002138:	0407f693          	andi	a3,a5,64
8000213c:	00052783          	lw	a5,0(a0)
80002140:	00b72023          	sw	a1,0(a4)
80002144:	f60682e3          	beqz	a3,800020a8 <_printf_i+0x98>
80002148:	01079793          	slli	a5,a5,0x10
8000214c:	4107d793          	srai	a5,a5,0x10
80002150:	f59ff06f          	j	800020a8 <_printf_i+0x98>
80002154:	00042583          	lw	a1,0(s0)
80002158:	00072783          	lw	a5,0(a4)
8000215c:	0805f813          	andi	a6,a1,128
80002160:	00478513          	addi	a0,a5,4
80002164:	00080863          	beqz	a6,80002174 <_printf_i+0x164>
80002168:	00a72023          	sw	a0,0(a4)
8000216c:	0007a783          	lw	a5,0(a5)
80002170:	0140006f          	j	80002184 <_printf_i+0x174>
80002174:	0405f593          	andi	a1,a1,64
80002178:	00a72023          	sw	a0,0(a4)
8000217c:	fe0588e3          	beqz	a1,8000216c <_printf_i+0x15c>
80002180:	0007d783          	lhu	a5,0(a5)
80002184:	06f00713          	li	a4,111
80002188:	14e68063          	beq	a3,a4,800022c8 <_printf_i+0x2b8>
8000218c:	00001697          	auipc	a3,0x1
80002190:	f7468693          	addi	a3,a3,-140 # 80003100 <__sf_fake_stdout+0x34>
80002194:	00a00713          	li	a4,10
80002198:	040401a3          	sb	zero,67(s0)
8000219c:	00442583          	lw	a1,4(s0)
800021a0:	00b42423          	sw	a1,8(s0)
800021a4:	0005c863          	bltz	a1,800021b4 <_printf_i+0x1a4>
800021a8:	00042503          	lw	a0,0(s0)
800021ac:	ffb57513          	andi	a0,a0,-5
800021b0:	00a42023          	sw	a0,0(s0)
800021b4:	00079663          	bnez	a5,800021c0 <_printf_i+0x1b0>
800021b8:	00060a93          	mv	s5,a2
800021bc:	02058263          	beqz	a1,800021e0 <_printf_i+0x1d0>
800021c0:	00060a93          	mv	s5,a2
800021c4:	02e7f5b3          	remu	a1,a5,a4
800021c8:	fffa8a93          	addi	s5,s5,-1
800021cc:	00b685b3          	add	a1,a3,a1
800021d0:	0005c583          	lbu	a1,0(a1)
800021d4:	00ba8023          	sb	a1,0(s5)
800021d8:	02e7d5b3          	divu	a1,a5,a4
800021dc:	0ee7fe63          	bgeu	a5,a4,800022d8 <_printf_i+0x2c8>
800021e0:	00800793          	li	a5,8
800021e4:	02f71463          	bne	a4,a5,8000220c <_printf_i+0x1fc>
800021e8:	00042783          	lw	a5,0(s0)
800021ec:	0017f793          	andi	a5,a5,1
800021f0:	00078e63          	beqz	a5,8000220c <_printf_i+0x1fc>
800021f4:	00442703          	lw	a4,4(s0)
800021f8:	01042783          	lw	a5,16(s0)
800021fc:	00e7c863          	blt	a5,a4,8000220c <_printf_i+0x1fc>
80002200:	03000793          	li	a5,48
80002204:	fefa8fa3          	sb	a5,-1(s5)
80002208:	fffa8a93          	addi	s5,s5,-1
8000220c:	41560633          	sub	a2,a2,s5
80002210:	00c42823          	sw	a2,16(s0)
80002214:	00098713          	mv	a4,s3
80002218:	00090693          	mv	a3,s2
8000221c:	00c10613          	addi	a2,sp,12
80002220:	00040593          	mv	a1,s0
80002224:	00048513          	mv	a0,s1
80002228:	c39ff0ef          	jal	ra,80001e60 <_printf_common>
8000222c:	fff00a13          	li	s4,-1
80002230:	13451a63          	bne	a0,s4,80002364 <_printf_i+0x354>
80002234:	fff00513          	li	a0,-1
80002238:	02c12083          	lw	ra,44(sp)
8000223c:	02812403          	lw	s0,40(sp)
80002240:	02412483          	lw	s1,36(sp)
80002244:	02012903          	lw	s2,32(sp)
80002248:	01c12983          	lw	s3,28(sp)
8000224c:	01812a03          	lw	s4,24(sp)
80002250:	01412a83          	lw	s5,20(sp)
80002254:	01012b03          	lw	s6,16(sp)
80002258:	03010113          	addi	sp,sp,48
8000225c:	00008067          	ret
80002260:	04d582a3          	sb	a3,69(a1)
80002264:	00001697          	auipc	a3,0x1
80002268:	e9c68693          	addi	a3,a3,-356 # 80003100 <__sf_fake_stdout+0x34>
8000226c:	00042583          	lw	a1,0(s0)
80002270:	00072503          	lw	a0,0(a4)
80002274:	0805f813          	andi	a6,a1,128
80002278:	00052783          	lw	a5,0(a0)
8000227c:	00450513          	addi	a0,a0,4
80002280:	02080863          	beqz	a6,800022b0 <_printf_i+0x2a0>
80002284:	00a72023          	sw	a0,0(a4)
80002288:	0015f713          	andi	a4,a1,1
8000228c:	00070663          	beqz	a4,80002298 <_printf_i+0x288>
80002290:	0205e593          	ori	a1,a1,32
80002294:	00b42023          	sw	a1,0(s0)
80002298:	01000713          	li	a4,16
8000229c:	ee079ee3          	bnez	a5,80002198 <_printf_i+0x188>
800022a0:	00042583          	lw	a1,0(s0)
800022a4:	fdf5f593          	andi	a1,a1,-33
800022a8:	00b42023          	sw	a1,0(s0)
800022ac:	eedff06f          	j	80002198 <_printf_i+0x188>
800022b0:	0405f813          	andi	a6,a1,64
800022b4:	00a72023          	sw	a0,0(a4)
800022b8:	fc0808e3          	beqz	a6,80002288 <_printf_i+0x278>
800022bc:	01079793          	slli	a5,a5,0x10
800022c0:	0107d793          	srli	a5,a5,0x10
800022c4:	fc5ff06f          	j	80002288 <_printf_i+0x278>
800022c8:	00001697          	auipc	a3,0x1
800022cc:	e3868693          	addi	a3,a3,-456 # 80003100 <__sf_fake_stdout+0x34>
800022d0:	00800713          	li	a4,8
800022d4:	ec5ff06f          	j	80002198 <_printf_i+0x188>
800022d8:	00058793          	mv	a5,a1
800022dc:	ee9ff06f          	j	800021c4 <_printf_i+0x1b4>
800022e0:	0005a683          	lw	a3,0(a1)
800022e4:	00072783          	lw	a5,0(a4)
800022e8:	0145a583          	lw	a1,20(a1)
800022ec:	0806f813          	andi	a6,a3,128
800022f0:	00478513          	addi	a0,a5,4
800022f4:	00080a63          	beqz	a6,80002308 <_printf_i+0x2f8>
800022f8:	00a72023          	sw	a0,0(a4)
800022fc:	0007a783          	lw	a5,0(a5)
80002300:	00b7a023          	sw	a1,0(a5)
80002304:	0180006f          	j	8000231c <_printf_i+0x30c>
80002308:	00a72023          	sw	a0,0(a4)
8000230c:	0406f693          	andi	a3,a3,64
80002310:	0007a783          	lw	a5,0(a5)
80002314:	fe0686e3          	beqz	a3,80002300 <_printf_i+0x2f0>
80002318:	00b79023          	sh	a1,0(a5)
8000231c:	00042823          	sw	zero,16(s0)
80002320:	00060a93          	mv	s5,a2
80002324:	ef1ff06f          	j	80002214 <_printf_i+0x204>
80002328:	00072783          	lw	a5,0(a4)
8000232c:	0045a603          	lw	a2,4(a1)
80002330:	00000593          	li	a1,0
80002334:	00478693          	addi	a3,a5,4
80002338:	00d72023          	sw	a3,0(a4)
8000233c:	0007aa83          	lw	s5,0(a5)
80002340:	000a8513          	mv	a0,s5
80002344:	161000ef          	jal	ra,80002ca4 <memchr>
80002348:	00050663          	beqz	a0,80002354 <_printf_i+0x344>
8000234c:	41550533          	sub	a0,a0,s5
80002350:	00a42223          	sw	a0,4(s0)
80002354:	00442783          	lw	a5,4(s0)
80002358:	00f42823          	sw	a5,16(s0)
8000235c:	040401a3          	sb	zero,67(s0)
80002360:	eb5ff06f          	j	80002214 <_printf_i+0x204>
80002364:	01042683          	lw	a3,16(s0)
80002368:	000a8613          	mv	a2,s5
8000236c:	00090593          	mv	a1,s2
80002370:	00048513          	mv	a0,s1
80002374:	000980e7          	jalr	s3
80002378:	eb450ee3          	beq	a0,s4,80002234 <_printf_i+0x224>
8000237c:	00042783          	lw	a5,0(s0)
80002380:	0027f793          	andi	a5,a5,2
80002384:	04079463          	bnez	a5,800023cc <_printf_i+0x3bc>
80002388:	00c12783          	lw	a5,12(sp)
8000238c:	00c42503          	lw	a0,12(s0)
80002390:	eaf554e3          	bge	a0,a5,80002238 <_printf_i+0x228>
80002394:	00078513          	mv	a0,a5
80002398:	ea1ff06f          	j	80002238 <_printf_i+0x228>
8000239c:	00100693          	li	a3,1
800023a0:	000a8613          	mv	a2,s5
800023a4:	00090593          	mv	a1,s2
800023a8:	00048513          	mv	a0,s1
800023ac:	000980e7          	jalr	s3
800023b0:	e96502e3          	beq	a0,s6,80002234 <_printf_i+0x224>
800023b4:	001a0a13          	addi	s4,s4,1
800023b8:	00c42783          	lw	a5,12(s0)
800023bc:	00c12703          	lw	a4,12(sp)
800023c0:	40e787b3          	sub	a5,a5,a4
800023c4:	fcfa4ce3          	blt	s4,a5,8000239c <_printf_i+0x38c>
800023c8:	fc1ff06f          	j	80002388 <_printf_i+0x378>
800023cc:	00000a13          	li	s4,0
800023d0:	01940a93          	addi	s5,s0,25
800023d4:	fff00b13          	li	s6,-1
800023d8:	fe1ff06f          	j	800023b8 <_printf_i+0x3a8>

800023dc <_sbrk_r>:
_sbrk_r():
800023dc:	ff010113          	addi	sp,sp,-16
800023e0:	00812423          	sw	s0,8(sp)
800023e4:	00050413          	mv	s0,a0
800023e8:	00058513          	mv	a0,a1
800023ec:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
800023f0:	00112623          	sw	ra,12(sp)
800023f4:	9f9fe0ef          	jal	ra,80000dec <_sbrk>
800023f8:	fff00793          	li	a5,-1
800023fc:	00f51a63          	bne	a0,a5,80002410 <_sbrk_r+0x34>
80002400:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002404:	0007a783          	lw	a5,0(a5)
80002408:	00078463          	beqz	a5,80002410 <_sbrk_r+0x34>
8000240c:	00f42023          	sw	a5,0(s0)
80002410:	00c12083          	lw	ra,12(sp)
80002414:	00812403          	lw	s0,8(sp)
80002418:	01010113          	addi	sp,sp,16
8000241c:	00008067          	ret

80002420 <__sread>:
__sread():
80002420:	ff010113          	addi	sp,sp,-16
80002424:	00812423          	sw	s0,8(sp)
80002428:	00058413          	mv	s0,a1
8000242c:	00e59583          	lh	a1,14(a1)
80002430:	00112623          	sw	ra,12(sp)
80002434:	1a1000ef          	jal	ra,80002dd4 <_read_r>
80002438:	02054063          	bltz	a0,80002458 <__sread+0x38>
8000243c:	05442783          	lw	a5,84(s0)
80002440:	00a787b3          	add	a5,a5,a0
80002444:	04f42a23          	sw	a5,84(s0)
80002448:	00c12083          	lw	ra,12(sp)
8000244c:	00812403          	lw	s0,8(sp)
80002450:	01010113          	addi	sp,sp,16
80002454:	00008067          	ret
80002458:	00c45783          	lhu	a5,12(s0)
8000245c:	fffff737          	lui	a4,0xfffff
80002460:	fff70713          	addi	a4,a4,-1 # ffffefff <__global_pointer$+0x7fffa7ff>
80002464:	00e7f7b3          	and	a5,a5,a4
80002468:	00f41623          	sh	a5,12(s0)
8000246c:	fddff06f          	j	80002448 <__sread+0x28>

80002470 <__swrite>:
__swrite():
80002470:	00c5d783          	lhu	a5,12(a1)
80002474:	fe010113          	addi	sp,sp,-32
80002478:	00812c23          	sw	s0,24(sp)
8000247c:	00912a23          	sw	s1,20(sp)
80002480:	01212823          	sw	s2,16(sp)
80002484:	01312623          	sw	s3,12(sp)
80002488:	00112e23          	sw	ra,28(sp)
8000248c:	1007f793          	andi	a5,a5,256
80002490:	00050493          	mv	s1,a0
80002494:	00058413          	mv	s0,a1
80002498:	00060913          	mv	s2,a2
8000249c:	00068993          	mv	s3,a3
800024a0:	00078a63          	beqz	a5,800024b4 <__swrite+0x44>
800024a4:	00e59583          	lh	a1,14(a1)
800024a8:	00200693          	li	a3,2
800024ac:	00000613          	li	a2,0
800024b0:	62c000ef          	jal	ra,80002adc <_lseek_r>
800024b4:	00c45783          	lhu	a5,12(s0)
800024b8:	fffff737          	lui	a4,0xfffff
800024bc:	fff70713          	addi	a4,a4,-1 # ffffefff <__global_pointer$+0x7fffa7ff>
800024c0:	00e7f7b3          	and	a5,a5,a4
800024c4:	00f41623          	sh	a5,12(s0)
800024c8:	00e41583          	lh	a1,14(s0)
800024cc:	01812403          	lw	s0,24(sp)
800024d0:	01c12083          	lw	ra,28(sp)
800024d4:	00098693          	mv	a3,s3
800024d8:	00090613          	mv	a2,s2
800024dc:	00c12983          	lw	s3,12(sp)
800024e0:	01012903          	lw	s2,16(sp)
800024e4:	00048513          	mv	a0,s1
800024e8:	01412483          	lw	s1,20(sp)
800024ec:	02010113          	addi	sp,sp,32
800024f0:	808ff06f          	j	800014f8 <_write_r>

800024f4 <__sseek>:
__sseek():
800024f4:	ff010113          	addi	sp,sp,-16
800024f8:	00812423          	sw	s0,8(sp)
800024fc:	00058413          	mv	s0,a1
80002500:	00e59583          	lh	a1,14(a1)
80002504:	00112623          	sw	ra,12(sp)
80002508:	5d4000ef          	jal	ra,80002adc <_lseek_r>
8000250c:	fff00793          	li	a5,-1
80002510:	00c45703          	lhu	a4,12(s0)
80002514:	02f51263          	bne	a0,a5,80002538 <__sseek+0x44>
80002518:	fffff7b7          	lui	a5,0xfffff
8000251c:	fff78793          	addi	a5,a5,-1 # ffffefff <__global_pointer$+0x7fffa7ff>
80002520:	00e7f7b3          	and	a5,a5,a4
80002524:	00f41623          	sh	a5,12(s0)
80002528:	00c12083          	lw	ra,12(sp)
8000252c:	00812403          	lw	s0,8(sp)
80002530:	01010113          	addi	sp,sp,16
80002534:	00008067          	ret
80002538:	000017b7          	lui	a5,0x1
8000253c:	00f767b3          	or	a5,a4,a5
80002540:	00f41623          	sh	a5,12(s0)
80002544:	04a42a23          	sw	a0,84(s0)
80002548:	fe1ff06f          	j	80002528 <__sseek+0x34>

8000254c <__sclose>:
__sclose():
8000254c:	00e59583          	lh	a1,14(a1)
80002550:	2bc0006f          	j	8000280c <_close_r>

80002554 <__swbuf_r>:
__swbuf_r():
80002554:	fe010113          	addi	sp,sp,-32
80002558:	00812c23          	sw	s0,24(sp)
8000255c:	00912a23          	sw	s1,20(sp)
80002560:	01212823          	sw	s2,16(sp)
80002564:	00112e23          	sw	ra,28(sp)
80002568:	01312623          	sw	s3,12(sp)
8000256c:	00050493          	mv	s1,a0
80002570:	00058913          	mv	s2,a1
80002574:	00060413          	mv	s0,a2
80002578:	00050863          	beqz	a0,80002588 <__swbuf_r+0x34>
8000257c:	01852783          	lw	a5,24(a0)
80002580:	00079463          	bnez	a5,80002588 <__swbuf_r+0x34>
80002584:	8c0ff0ef          	jal	ra,80001644 <__sinit>
80002588:	00001797          	auipc	a5,0x1
8000258c:	b2478793          	addi	a5,a5,-1244 # 800030ac <__sf_fake_stdin>
80002590:	0af41e63          	bne	s0,a5,8000264c <__swbuf_r+0xf8>
80002594:	0044a403          	lw	s0,4(s1)
80002598:	01842783          	lw	a5,24(s0)
8000259c:	00f42423          	sw	a5,8(s0)
800025a0:	00c45783          	lhu	a5,12(s0)
800025a4:	0087f793          	andi	a5,a5,8
800025a8:	0c078663          	beqz	a5,80002674 <__swbuf_r+0x120>
800025ac:	01042783          	lw	a5,16(s0)
800025b0:	0c078263          	beqz	a5,80002674 <__swbuf_r+0x120>
800025b4:	01042783          	lw	a5,16(s0)
800025b8:	00042503          	lw	a0,0(s0)
800025bc:	0ff97993          	andi	s3,s2,255
800025c0:	0ff97913          	andi	s2,s2,255
800025c4:	40f50533          	sub	a0,a0,a5
800025c8:	01442783          	lw	a5,20(s0)
800025cc:	00f54a63          	blt	a0,a5,800025e0 <__swbuf_r+0x8c>
800025d0:	00040593          	mv	a1,s0
800025d4:	00048513          	mv	a0,s1
800025d8:	464000ef          	jal	ra,80002a3c <_fflush_r>
800025dc:	0a051463          	bnez	a0,80002684 <__swbuf_r+0x130>
800025e0:	00842783          	lw	a5,8(s0)
800025e4:	00150513          	addi	a0,a0,1
800025e8:	fff78793          	addi	a5,a5,-1
800025ec:	00f42423          	sw	a5,8(s0)
800025f0:	00042783          	lw	a5,0(s0)
800025f4:	00178713          	addi	a4,a5,1
800025f8:	00e42023          	sw	a4,0(s0)
800025fc:	01378023          	sb	s3,0(a5)
80002600:	01442783          	lw	a5,20(s0)
80002604:	00a78c63          	beq	a5,a0,8000261c <__swbuf_r+0xc8>
80002608:	00c45783          	lhu	a5,12(s0)
8000260c:	0017f793          	andi	a5,a5,1
80002610:	00078e63          	beqz	a5,8000262c <__swbuf_r+0xd8>
80002614:	00a00793          	li	a5,10
80002618:	00f91a63          	bne	s2,a5,8000262c <__swbuf_r+0xd8>
8000261c:	00040593          	mv	a1,s0
80002620:	00048513          	mv	a0,s1
80002624:	418000ef          	jal	ra,80002a3c <_fflush_r>
80002628:	04051e63          	bnez	a0,80002684 <__swbuf_r+0x130>
8000262c:	01c12083          	lw	ra,28(sp)
80002630:	01812403          	lw	s0,24(sp)
80002634:	00090513          	mv	a0,s2
80002638:	01412483          	lw	s1,20(sp)
8000263c:	01012903          	lw	s2,16(sp)
80002640:	00c12983          	lw	s3,12(sp)
80002644:	02010113          	addi	sp,sp,32
80002648:	00008067          	ret
8000264c:	00001797          	auipc	a5,0x1
80002650:	a8078793          	addi	a5,a5,-1408 # 800030cc <__sf_fake_stdout>
80002654:	00f41663          	bne	s0,a5,80002660 <__swbuf_r+0x10c>
80002658:	0084a403          	lw	s0,8(s1)
8000265c:	f3dff06f          	j	80002598 <__swbuf_r+0x44>
80002660:	00001797          	auipc	a5,0x1
80002664:	a2c78793          	addi	a5,a5,-1492 # 8000308c <__sf_fake_stderr>
80002668:	f2f418e3          	bne	s0,a5,80002598 <__swbuf_r+0x44>
8000266c:	00c4a403          	lw	s0,12(s1)
80002670:	f29ff06f          	j	80002598 <__swbuf_r+0x44>
80002674:	00040593          	mv	a1,s0
80002678:	00048513          	mv	a0,s1
8000267c:	010000ef          	jal	ra,8000268c <__swsetup_r>
80002680:	f2050ae3          	beqz	a0,800025b4 <__swbuf_r+0x60>
80002684:	fff00913          	li	s2,-1
80002688:	fa5ff06f          	j	8000262c <__swbuf_r+0xd8>

8000268c <__swsetup_r>:
__swsetup_r():
8000268c:	ff010113          	addi	sp,sp,-16
80002690:	00002797          	auipc	a5,0x2
80002694:	97878793          	addi	a5,a5,-1672 # 80004008 <_impure_ptr>
80002698:	00912223          	sw	s1,4(sp)
8000269c:	0007a483          	lw	s1,0(a5)
800026a0:	00812423          	sw	s0,8(sp)
800026a4:	01212023          	sw	s2,0(sp)
800026a8:	00112623          	sw	ra,12(sp)
800026ac:	00050913          	mv	s2,a0
800026b0:	00058413          	mv	s0,a1
800026b4:	00048a63          	beqz	s1,800026c8 <__swsetup_r+0x3c>
800026b8:	0184a783          	lw	a5,24(s1)
800026bc:	00079663          	bnez	a5,800026c8 <__swsetup_r+0x3c>
800026c0:	00048513          	mv	a0,s1
800026c4:	f81fe0ef          	jal	ra,80001644 <__sinit>
800026c8:	00001797          	auipc	a5,0x1
800026cc:	9e478793          	addi	a5,a5,-1564 # 800030ac <__sf_fake_stdin>
800026d0:	04f41863          	bne	s0,a5,80002720 <__swsetup_r+0x94>
800026d4:	0044a403          	lw	s0,4(s1)
800026d8:	00c41703          	lh	a4,12(s0)
800026dc:	01071793          	slli	a5,a4,0x10
800026e0:	0107d793          	srli	a5,a5,0x10
800026e4:	0087f693          	andi	a3,a5,8
800026e8:	0a069463          	bnez	a3,80002790 <__swsetup_r+0x104>
800026ec:	0107f693          	andi	a3,a5,16
800026f0:	04069c63          	bnez	a3,80002748 <__swsetup_r+0xbc>
800026f4:	00900793          	li	a5,9
800026f8:	00f92023          	sw	a5,0(s2)
800026fc:	04076713          	ori	a4,a4,64
80002700:	00e41623          	sh	a4,12(s0)
80002704:	fff00513          	li	a0,-1
80002708:	00c12083          	lw	ra,12(sp)
8000270c:	00812403          	lw	s0,8(sp)
80002710:	00412483          	lw	s1,4(sp)
80002714:	00012903          	lw	s2,0(sp)
80002718:	01010113          	addi	sp,sp,16
8000271c:	00008067          	ret
80002720:	00001797          	auipc	a5,0x1
80002724:	9ac78793          	addi	a5,a5,-1620 # 800030cc <__sf_fake_stdout>
80002728:	00f41663          	bne	s0,a5,80002734 <__swsetup_r+0xa8>
8000272c:	0084a403          	lw	s0,8(s1)
80002730:	fa9ff06f          	j	800026d8 <__swsetup_r+0x4c>
80002734:	00001797          	auipc	a5,0x1
80002738:	95878793          	addi	a5,a5,-1704 # 8000308c <__sf_fake_stderr>
8000273c:	f8f41ee3          	bne	s0,a5,800026d8 <__swsetup_r+0x4c>
80002740:	00c4a403          	lw	s0,12(s1)
80002744:	f95ff06f          	j	800026d8 <__swsetup_r+0x4c>
80002748:	0047f793          	andi	a5,a5,4
8000274c:	02078c63          	beqz	a5,80002784 <__swsetup_r+0xf8>
80002750:	03442583          	lw	a1,52(s0)
80002754:	00058c63          	beqz	a1,8000276c <__swsetup_r+0xe0>
80002758:	04440793          	addi	a5,s0,68
8000275c:	00f58663          	beq	a1,a5,80002768 <__swsetup_r+0xdc>
80002760:	00090513          	mv	a0,s2
80002764:	56c000ef          	jal	ra,80002cd0 <_free_r>
80002768:	02042a23          	sw	zero,52(s0)
8000276c:	00c45783          	lhu	a5,12(s0)
80002770:	00042223          	sw	zero,4(s0)
80002774:	fdb7f793          	andi	a5,a5,-37
80002778:	00f41623          	sh	a5,12(s0)
8000277c:	01042783          	lw	a5,16(s0)
80002780:	00f42023          	sw	a5,0(s0)
80002784:	00c45783          	lhu	a5,12(s0)
80002788:	0087e793          	ori	a5,a5,8
8000278c:	00f41623          	sh	a5,12(s0)
80002790:	01042783          	lw	a5,16(s0)
80002794:	02079063          	bnez	a5,800027b4 <__swsetup_r+0x128>
80002798:	00c45783          	lhu	a5,12(s0)
8000279c:	20000713          	li	a4,512
800027a0:	2807f793          	andi	a5,a5,640
800027a4:	00e78863          	beq	a5,a4,800027b4 <__swsetup_r+0x128>
800027a8:	00040593          	mv	a1,s0
800027ac:	00090513          	mv	a0,s2
800027b0:	404000ef          	jal	ra,80002bb4 <__smakebuf_r>
800027b4:	00c45783          	lhu	a5,12(s0)
800027b8:	0017f713          	andi	a4,a5,1
800027bc:	02070c63          	beqz	a4,800027f4 <__swsetup_r+0x168>
800027c0:	01442783          	lw	a5,20(s0)
800027c4:	00042423          	sw	zero,8(s0)
800027c8:	40f007b3          	neg	a5,a5
800027cc:	00f42c23          	sw	a5,24(s0)
800027d0:	01042783          	lw	a5,16(s0)
800027d4:	00000513          	li	a0,0
800027d8:	f20798e3          	bnez	a5,80002708 <__swsetup_r+0x7c>
800027dc:	00c41783          	lh	a5,12(s0)
800027e0:	0807f713          	andi	a4,a5,128
800027e4:	f20702e3          	beqz	a4,80002708 <__swsetup_r+0x7c>
800027e8:	0407e793          	ori	a5,a5,64
800027ec:	00f41623          	sh	a5,12(s0)
800027f0:	f15ff06f          	j	80002704 <__swsetup_r+0x78>
800027f4:	0027f793          	andi	a5,a5,2
800027f8:	00000713          	li	a4,0
800027fc:	00079463          	bnez	a5,80002804 <__swsetup_r+0x178>
80002800:	01442703          	lw	a4,20(s0)
80002804:	00e42423          	sw	a4,8(s0)
80002808:	fc9ff06f          	j	800027d0 <__swsetup_r+0x144>

8000280c <_close_r>:
_close_r():
8000280c:	ff010113          	addi	sp,sp,-16
80002810:	00812423          	sw	s0,8(sp)
80002814:	00050413          	mv	s0,a0
80002818:	00058513          	mv	a0,a1
8000281c:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80002820:	00112623          	sw	ra,12(sp)
80002824:	e08fe0ef          	jal	ra,80000e2c <_close>
80002828:	fff00793          	li	a5,-1
8000282c:	00f51a63          	bne	a0,a5,80002840 <_close_r+0x34>
80002830:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002834:	0007a783          	lw	a5,0(a5)
80002838:	00078463          	beqz	a5,80002840 <_close_r+0x34>
8000283c:	00f42023          	sw	a5,0(s0)
80002840:	00c12083          	lw	ra,12(sp)
80002844:	00812403          	lw	s0,8(sp)
80002848:	01010113          	addi	sp,sp,16
8000284c:	00008067          	ret

80002850 <__sflush_r>:
__sflush_r():
80002850:	00c5d783          	lhu	a5,12(a1)
80002854:	fe010113          	addi	sp,sp,-32
80002858:	00812c23          	sw	s0,24(sp)
8000285c:	00912a23          	sw	s1,20(sp)
80002860:	00112e23          	sw	ra,28(sp)
80002864:	01212823          	sw	s2,16(sp)
80002868:	01312623          	sw	s3,12(sp)
8000286c:	0087f713          	andi	a4,a5,8
80002870:	00050493          	mv	s1,a0
80002874:	00058413          	mv	s0,a1
80002878:	14071e63          	bnez	a4,800029d4 <__sflush_r+0x184>
8000287c:	0045a703          	lw	a4,4(a1)
80002880:	00e04a63          	bgtz	a4,80002894 <__sflush_r+0x44>
80002884:	0405a703          	lw	a4,64(a1)
80002888:	00e04663          	bgtz	a4,80002894 <__sflush_r+0x44>
8000288c:	00000513          	li	a0,0
80002890:	11c0006f          	j	800029ac <__sflush_r+0x15c>
80002894:	02c42703          	lw	a4,44(s0)
80002898:	fe070ae3          	beqz	a4,8000288c <__sflush_r+0x3c>
8000289c:	0004a903          	lw	s2,0(s1)
800028a0:	01379693          	slli	a3,a5,0x13
800028a4:	0004a023          	sw	zero,0(s1)
800028a8:	0a06de63          	bgez	a3,80002964 <__sflush_r+0x114>
800028ac:	05442503          	lw	a0,84(s0)
800028b0:	00c45783          	lhu	a5,12(s0)
800028b4:	0047f793          	andi	a5,a5,4
800028b8:	00078e63          	beqz	a5,800028d4 <__sflush_r+0x84>
800028bc:	00442783          	lw	a5,4(s0)
800028c0:	40f50533          	sub	a0,a0,a5
800028c4:	03442783          	lw	a5,52(s0)
800028c8:	00078663          	beqz	a5,800028d4 <__sflush_r+0x84>
800028cc:	04042783          	lw	a5,64(s0)
800028d0:	40f50533          	sub	a0,a0,a5
800028d4:	02c42783          	lw	a5,44(s0)
800028d8:	02042583          	lw	a1,32(s0)
800028dc:	00050613          	mv	a2,a0
800028e0:	00000693          	li	a3,0
800028e4:	00048513          	mv	a0,s1
800028e8:	000780e7          	jalr	a5
800028ec:	fff00793          	li	a5,-1
800028f0:	00c45703          	lhu	a4,12(s0)
800028f4:	02f51263          	bne	a0,a5,80002918 <__sflush_r+0xc8>
800028f8:	0004a683          	lw	a3,0(s1)
800028fc:	01d00793          	li	a5,29
80002900:	0cd7e463          	bltu	a5,a3,800029c8 <__sflush_r+0x178>
80002904:	204007b7          	lui	a5,0x20400
80002908:	00178793          	addi	a5,a5,1 # 20400001 <STACK_SIZE+0x203ffc01>
8000290c:	00d7d7b3          	srl	a5,a5,a3
80002910:	0017f793          	andi	a5,a5,1
80002914:	0a078a63          	beqz	a5,800029c8 <__sflush_r+0x178>
80002918:	01042783          	lw	a5,16(s0)
8000291c:	00042223          	sw	zero,4(s0)
80002920:	00f42023          	sw	a5,0(s0)
80002924:	01371793          	slli	a5,a4,0x13
80002928:	0007dc63          	bgez	a5,80002940 <__sflush_r+0xf0>
8000292c:	fff00793          	li	a5,-1
80002930:	00f51663          	bne	a0,a5,8000293c <__sflush_r+0xec>
80002934:	0004a783          	lw	a5,0(s1)
80002938:	00079463          	bnez	a5,80002940 <__sflush_r+0xf0>
8000293c:	04a42a23          	sw	a0,84(s0)
80002940:	03442583          	lw	a1,52(s0)
80002944:	0124a023          	sw	s2,0(s1)
80002948:	f40582e3          	beqz	a1,8000288c <__sflush_r+0x3c>
8000294c:	04440793          	addi	a5,s0,68
80002950:	00f58663          	beq	a1,a5,8000295c <__sflush_r+0x10c>
80002954:	00048513          	mv	a0,s1
80002958:	378000ef          	jal	ra,80002cd0 <_free_r>
8000295c:	02042a23          	sw	zero,52(s0)
80002960:	f2dff06f          	j	8000288c <__sflush_r+0x3c>
80002964:	02042583          	lw	a1,32(s0)
80002968:	00100693          	li	a3,1
8000296c:	00000613          	li	a2,0
80002970:	00048513          	mv	a0,s1
80002974:	000700e7          	jalr	a4
80002978:	fff00793          	li	a5,-1
8000297c:	f2f51ae3          	bne	a0,a5,800028b0 <__sflush_r+0x60>
80002980:	0004a783          	lw	a5,0(s1)
80002984:	f20786e3          	beqz	a5,800028b0 <__sflush_r+0x60>
80002988:	01d00713          	li	a4,29
8000298c:	00e78663          	beq	a5,a4,80002998 <__sflush_r+0x148>
80002990:	01600713          	li	a4,22
80002994:	00e79663          	bne	a5,a4,800029a0 <__sflush_r+0x150>
80002998:	0124a023          	sw	s2,0(s1)
8000299c:	ef1ff06f          	j	8000288c <__sflush_r+0x3c>
800029a0:	00c45783          	lhu	a5,12(s0)
800029a4:	0407e793          	ori	a5,a5,64
800029a8:	00f41623          	sh	a5,12(s0)
800029ac:	01c12083          	lw	ra,28(sp)
800029b0:	01812403          	lw	s0,24(sp)
800029b4:	01412483          	lw	s1,20(sp)
800029b8:	01012903          	lw	s2,16(sp)
800029bc:	00c12983          	lw	s3,12(sp)
800029c0:	02010113          	addi	sp,sp,32
800029c4:	00008067          	ret
800029c8:	04076713          	ori	a4,a4,64
800029cc:	00e41623          	sh	a4,12(s0)
800029d0:	fddff06f          	j	800029ac <__sflush_r+0x15c>
800029d4:	0105a983          	lw	s3,16(a1)
800029d8:	ea098ae3          	beqz	s3,8000288c <__sflush_r+0x3c>
800029dc:	0005a903          	lw	s2,0(a1)
800029e0:	0037f793          	andi	a5,a5,3
800029e4:	0135a023          	sw	s3,0(a1)
800029e8:	41390933          	sub	s2,s2,s3
800029ec:	00000713          	li	a4,0
800029f0:	00079463          	bnez	a5,800029f8 <__sflush_r+0x1a8>
800029f4:	0145a703          	lw	a4,20(a1)
800029f8:	00e42423          	sw	a4,8(s0)
800029fc:	e92058e3          	blez	s2,8000288c <__sflush_r+0x3c>
80002a00:	02842783          	lw	a5,40(s0)
80002a04:	02042583          	lw	a1,32(s0)
80002a08:	00090693          	mv	a3,s2
80002a0c:	00098613          	mv	a2,s3
80002a10:	00048513          	mv	a0,s1
80002a14:	000780e7          	jalr	a5
80002a18:	00a04c63          	bgtz	a0,80002a30 <__sflush_r+0x1e0>
80002a1c:	00c45783          	lhu	a5,12(s0)
80002a20:	fff00513          	li	a0,-1
80002a24:	0407e793          	ori	a5,a5,64
80002a28:	00f41623          	sh	a5,12(s0)
80002a2c:	f81ff06f          	j	800029ac <__sflush_r+0x15c>
80002a30:	00a989b3          	add	s3,s3,a0
80002a34:	40a90933          	sub	s2,s2,a0
80002a38:	fc5ff06f          	j	800029fc <__sflush_r+0x1ac>

80002a3c <_fflush_r>:
_fflush_r():
80002a3c:	0105a783          	lw	a5,16(a1)
80002a40:	08078a63          	beqz	a5,80002ad4 <_fflush_r+0x98>
80002a44:	fe010113          	addi	sp,sp,-32
80002a48:	00812c23          	sw	s0,24(sp)
80002a4c:	00112e23          	sw	ra,28(sp)
80002a50:	00050413          	mv	s0,a0
80002a54:	00050c63          	beqz	a0,80002a6c <_fflush_r+0x30>
80002a58:	01852783          	lw	a5,24(a0)
80002a5c:	00079863          	bnez	a5,80002a6c <_fflush_r+0x30>
80002a60:	00b12623          	sw	a1,12(sp)
80002a64:	be1fe0ef          	jal	ra,80001644 <__sinit>
80002a68:	00c12583          	lw	a1,12(sp)
80002a6c:	00000797          	auipc	a5,0x0
80002a70:	64078793          	addi	a5,a5,1600 # 800030ac <__sf_fake_stdin>
80002a74:	02f59263          	bne	a1,a5,80002a98 <_fflush_r+0x5c>
80002a78:	00442583          	lw	a1,4(s0)
80002a7c:	00c59783          	lh	a5,12(a1)
80002a80:	04078063          	beqz	a5,80002ac0 <_fflush_r+0x84>
80002a84:	00040513          	mv	a0,s0
80002a88:	01812403          	lw	s0,24(sp)
80002a8c:	01c12083          	lw	ra,28(sp)
80002a90:	02010113          	addi	sp,sp,32
80002a94:	dbdff06f          	j	80002850 <__sflush_r>
80002a98:	00000797          	auipc	a5,0x0
80002a9c:	63478793          	addi	a5,a5,1588 # 800030cc <__sf_fake_stdout>
80002aa0:	00f59663          	bne	a1,a5,80002aac <_fflush_r+0x70>
80002aa4:	00842583          	lw	a1,8(s0)
80002aa8:	fd5ff06f          	j	80002a7c <_fflush_r+0x40>
80002aac:	00000797          	auipc	a5,0x0
80002ab0:	5e078793          	addi	a5,a5,1504 # 8000308c <__sf_fake_stderr>
80002ab4:	fcf594e3          	bne	a1,a5,80002a7c <_fflush_r+0x40>
80002ab8:	00c42583          	lw	a1,12(s0)
80002abc:	fc1ff06f          	j	80002a7c <_fflush_r+0x40>
80002ac0:	01c12083          	lw	ra,28(sp)
80002ac4:	01812403          	lw	s0,24(sp)
80002ac8:	00000513          	li	a0,0
80002acc:	02010113          	addi	sp,sp,32
80002ad0:	00008067          	ret
80002ad4:	00000513          	li	a0,0
80002ad8:	00008067          	ret

80002adc <_lseek_r>:
_lseek_r():
80002adc:	ff010113          	addi	sp,sp,-16
80002ae0:	00812423          	sw	s0,8(sp)
80002ae4:	00050413          	mv	s0,a0
80002ae8:	00058513          	mv	a0,a1
80002aec:	00060593          	mv	a1,a2
80002af0:	00068613          	mv	a2,a3
80002af4:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80002af8:	00112623          	sw	ra,12(sp)
80002afc:	b70fe0ef          	jal	ra,80000e6c <_lseek>
80002b00:	fff00793          	li	a5,-1
80002b04:	00f51a63          	bne	a0,a5,80002b18 <_lseek_r+0x3c>
80002b08:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002b0c:	0007a783          	lw	a5,0(a5)
80002b10:	00078463          	beqz	a5,80002b18 <_lseek_r+0x3c>
80002b14:	00f42023          	sw	a5,0(s0)
80002b18:	00c12083          	lw	ra,12(sp)
80002b1c:	00812403          	lw	s0,8(sp)
80002b20:	01010113          	addi	sp,sp,16
80002b24:	00008067          	ret

80002b28 <__swhatbuf_r>:
__swhatbuf_r():
80002b28:	f8010113          	addi	sp,sp,-128
80002b2c:	06912a23          	sw	s1,116(sp)
80002b30:	00058493          	mv	s1,a1
80002b34:	00e59583          	lh	a1,14(a1)
80002b38:	06812c23          	sw	s0,120(sp)
80002b3c:	06112e23          	sw	ra,124(sp)
80002b40:	00060413          	mv	s0,a2
80002b44:	0005de63          	bgez	a1,80002b60 <__swhatbuf_r+0x38>
80002b48:	00c4d783          	lhu	a5,12(s1)
80002b4c:	0006a023          	sw	zero,0(a3)
80002b50:	0807f793          	andi	a5,a5,128
80002b54:	04079063          	bnez	a5,80002b94 <__swhatbuf_r+0x6c>
80002b58:	40000793          	li	a5,1024
80002b5c:	03c0006f          	j	80002b98 <__swhatbuf_r+0x70>
80002b60:	01810613          	addi	a2,sp,24
80002b64:	00d12623          	sw	a3,12(sp)
80002b68:	2b8000ef          	jal	ra,80002e20 <_fstat_r>
80002b6c:	00c12683          	lw	a3,12(sp)
80002b70:	fc054ce3          	bltz	a0,80002b48 <__swhatbuf_r+0x20>
80002b74:	01c12703          	lw	a4,28(sp)
80002b78:	0000f7b7          	lui	a5,0xf
80002b7c:	00e7f7b3          	and	a5,a5,a4
80002b80:	ffffe737          	lui	a4,0xffffe
80002b84:	00e787b3          	add	a5,a5,a4
80002b88:	0017b793          	seqz	a5,a5
80002b8c:	00f6a023          	sw	a5,0(a3)
80002b90:	fc9ff06f          	j	80002b58 <__swhatbuf_r+0x30>
80002b94:	04000793          	li	a5,64
80002b98:	00f42023          	sw	a5,0(s0)
80002b9c:	07c12083          	lw	ra,124(sp)
80002ba0:	07812403          	lw	s0,120(sp)
80002ba4:	07412483          	lw	s1,116(sp)
80002ba8:	00000513          	li	a0,0
80002bac:	08010113          	addi	sp,sp,128
80002bb0:	00008067          	ret

80002bb4 <__smakebuf_r>:
__smakebuf_r():
80002bb4:	00c5d783          	lhu	a5,12(a1)
80002bb8:	fe010113          	addi	sp,sp,-32
80002bbc:	00812c23          	sw	s0,24(sp)
80002bc0:	00112e23          	sw	ra,28(sp)
80002bc4:	00912a23          	sw	s1,20(sp)
80002bc8:	01212823          	sw	s2,16(sp)
80002bcc:	0027f793          	andi	a5,a5,2
80002bd0:	00058413          	mv	s0,a1
80002bd4:	02078863          	beqz	a5,80002c04 <__smakebuf_r+0x50>
80002bd8:	04740793          	addi	a5,s0,71
80002bdc:	00f42023          	sw	a5,0(s0)
80002be0:	00f42823          	sw	a5,16(s0)
80002be4:	00100793          	li	a5,1
80002be8:	00f42a23          	sw	a5,20(s0)
80002bec:	01c12083          	lw	ra,28(sp)
80002bf0:	01812403          	lw	s0,24(sp)
80002bf4:	01412483          	lw	s1,20(sp)
80002bf8:	01012903          	lw	s2,16(sp)
80002bfc:	02010113          	addi	sp,sp,32
80002c00:	00008067          	ret
80002c04:	00c10693          	addi	a3,sp,12
80002c08:	00810613          	addi	a2,sp,8
80002c0c:	00050493          	mv	s1,a0
80002c10:	f19ff0ef          	jal	ra,80002b28 <__swhatbuf_r>
80002c14:	00812583          	lw	a1,8(sp)
80002c18:	00050913          	mv	s2,a0
80002c1c:	00048513          	mv	a0,s1
80002c20:	c7dfe0ef          	jal	ra,8000189c <_malloc_r>
80002c24:	02051063          	bnez	a0,80002c44 <__smakebuf_r+0x90>
80002c28:	00c41783          	lh	a5,12(s0)
80002c2c:	2007f713          	andi	a4,a5,512
80002c30:	fa071ee3          	bnez	a4,80002bec <__smakebuf_r+0x38>
80002c34:	ffc7f793          	andi	a5,a5,-4
80002c38:	0027e793          	ori	a5,a5,2
80002c3c:	00f41623          	sh	a5,12(s0)
80002c40:	f99ff06f          	j	80002bd8 <__smakebuf_r+0x24>
80002c44:	fffff797          	auipc	a5,0xfffff
80002c48:	98878793          	addi	a5,a5,-1656 # 800015cc <_cleanup_r>
80002c4c:	02f4a423          	sw	a5,40(s1)
80002c50:	00c45783          	lhu	a5,12(s0)
80002c54:	00a42023          	sw	a0,0(s0)
80002c58:	00a42823          	sw	a0,16(s0)
80002c5c:	0807e793          	ori	a5,a5,128
80002c60:	00f41623          	sh	a5,12(s0)
80002c64:	00812783          	lw	a5,8(sp)
80002c68:	00f42a23          	sw	a5,20(s0)
80002c6c:	00c12783          	lw	a5,12(sp)
80002c70:	02078263          	beqz	a5,80002c94 <__smakebuf_r+0xe0>
80002c74:	00e41583          	lh	a1,14(s0)
80002c78:	00048513          	mv	a0,s1
80002c7c:	1ec000ef          	jal	ra,80002e68 <_isatty_r>
80002c80:	00050a63          	beqz	a0,80002c94 <__smakebuf_r+0xe0>
80002c84:	00c45783          	lhu	a5,12(s0)
80002c88:	ffc7f793          	andi	a5,a5,-4
80002c8c:	0017e793          	ori	a5,a5,1
80002c90:	00f41623          	sh	a5,12(s0)
80002c94:	00c45783          	lhu	a5,12(s0)
80002c98:	00f96933          	or	s2,s2,a5
80002c9c:	01241623          	sh	s2,12(s0)
80002ca0:	f4dff06f          	j	80002bec <__smakebuf_r+0x38>

80002ca4 <memchr>:
memchr():
80002ca4:	0ff5f593          	andi	a1,a1,255
80002ca8:	00c50633          	add	a2,a0,a2
80002cac:	00c51663          	bne	a0,a2,80002cb8 <memchr+0x14>
80002cb0:	00000513          	li	a0,0
80002cb4:	00008067          	ret
80002cb8:	00054783          	lbu	a5,0(a0)
80002cbc:	feb78ce3          	beq	a5,a1,80002cb4 <memchr+0x10>
80002cc0:	00150513          	addi	a0,a0,1
80002cc4:	fe9ff06f          	j	80002cac <memchr+0x8>

80002cc8 <__malloc_lock>:
__malloc_lock():
80002cc8:	00008067          	ret

80002ccc <__malloc_unlock>:
__malloc_unlock():
80002ccc:	00008067          	ret

80002cd0 <_free_r>:
_free_r():
80002cd0:	10058063          	beqz	a1,80002dd0 <_free_r+0x100>
80002cd4:	ffc5a783          	lw	a5,-4(a1)
80002cd8:	ff010113          	addi	sp,sp,-16
80002cdc:	00812423          	sw	s0,8(sp)
80002ce0:	00112623          	sw	ra,12(sp)
80002ce4:	00912223          	sw	s1,4(sp)
80002ce8:	ffc58413          	addi	s0,a1,-4
80002cec:	0007d463          	bgez	a5,80002cf4 <_free_r+0x24>
80002cf0:	00f40433          	add	s0,s0,a5
80002cf4:	00050493          	mv	s1,a0
80002cf8:	fd1ff0ef          	jal	ra,80002cc8 <__malloc_lock>
80002cfc:	88c18793          	addi	a5,gp,-1908 # 8000408c <__malloc_free_list>
80002d00:	0007a783          	lw	a5,0(a5)
80002d04:	02079263          	bnez	a5,80002d28 <_free_r+0x58>
80002d08:	00042223          	sw	zero,4(s0)
80002d0c:	8881a623          	sw	s0,-1908(gp) # 8000408c <__malloc_free_list>
80002d10:	00812403          	lw	s0,8(sp)
80002d14:	00c12083          	lw	ra,12(sp)
80002d18:	00048513          	mv	a0,s1
80002d1c:	00412483          	lw	s1,4(sp)
80002d20:	01010113          	addi	sp,sp,16
80002d24:	fa9ff06f          	j	80002ccc <__malloc_unlock>
80002d28:	02f47663          	bgeu	s0,a5,80002d54 <_free_r+0x84>
80002d2c:	00042683          	lw	a3,0(s0)
80002d30:	00d40733          	add	a4,s0,a3
80002d34:	00e79a63          	bne	a5,a4,80002d48 <_free_r+0x78>
80002d38:	0007a703          	lw	a4,0(a5)
80002d3c:	0047a783          	lw	a5,4(a5)
80002d40:	00d70733          	add	a4,a4,a3
80002d44:	00e42023          	sw	a4,0(s0)
80002d48:	00f42223          	sw	a5,4(s0)
80002d4c:	fc1ff06f          	j	80002d0c <_free_r+0x3c>
80002d50:	00070793          	mv	a5,a4
80002d54:	0047a703          	lw	a4,4(a5)
80002d58:	00070463          	beqz	a4,80002d60 <_free_r+0x90>
80002d5c:	fee47ae3          	bgeu	s0,a4,80002d50 <_free_r+0x80>
80002d60:	0007a683          	lw	a3,0(a5)
80002d64:	00d78633          	add	a2,a5,a3
80002d68:	02861863          	bne	a2,s0,80002d98 <_free_r+0xc8>
80002d6c:	00042603          	lw	a2,0(s0)
80002d70:	00c686b3          	add	a3,a3,a2
80002d74:	00d7a023          	sw	a3,0(a5)
80002d78:	00d78633          	add	a2,a5,a3
80002d7c:	f8c71ae3          	bne	a4,a2,80002d10 <_free_r+0x40>
80002d80:	00072603          	lw	a2,0(a4) # ffffe000 <__global_pointer$+0x7fff9800>
80002d84:	00472703          	lw	a4,4(a4)
80002d88:	00d606b3          	add	a3,a2,a3
80002d8c:	00d7a023          	sw	a3,0(a5)
80002d90:	00e7a223          	sw	a4,4(a5)
80002d94:	f7dff06f          	j	80002d10 <_free_r+0x40>
80002d98:	00c47863          	bgeu	s0,a2,80002da8 <_free_r+0xd8>
80002d9c:	00c00793          	li	a5,12
80002da0:	00f4a023          	sw	a5,0(s1)
80002da4:	f6dff06f          	j	80002d10 <_free_r+0x40>
80002da8:	00042603          	lw	a2,0(s0)
80002dac:	00c406b3          	add	a3,s0,a2
80002db0:	00d71a63          	bne	a4,a3,80002dc4 <_free_r+0xf4>
80002db4:	00072683          	lw	a3,0(a4)
80002db8:	00472703          	lw	a4,4(a4)
80002dbc:	00c686b3          	add	a3,a3,a2
80002dc0:	00d42023          	sw	a3,0(s0)
80002dc4:	00e42223          	sw	a4,4(s0)
80002dc8:	0087a223          	sw	s0,4(a5)
80002dcc:	f45ff06f          	j	80002d10 <_free_r+0x40>
80002dd0:	00008067          	ret

80002dd4 <_read_r>:
_read_r():
80002dd4:	ff010113          	addi	sp,sp,-16
80002dd8:	00812423          	sw	s0,8(sp)
80002ddc:	00050413          	mv	s0,a0
80002de0:	00058513          	mv	a0,a1
80002de4:	00060593          	mv	a1,a2
80002de8:	00068613          	mv	a2,a3
80002dec:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80002df0:	00112623          	sw	ra,12(sp)
80002df4:	884fe0ef          	jal	ra,80000e78 <_read>
80002df8:	fff00793          	li	a5,-1
80002dfc:	00f51a63          	bne	a0,a5,80002e10 <_read_r+0x3c>
80002e00:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002e04:	0007a783          	lw	a5,0(a5)
80002e08:	00078463          	beqz	a5,80002e10 <_read_r+0x3c>
80002e0c:	00f42023          	sw	a5,0(s0)
80002e10:	00c12083          	lw	ra,12(sp)
80002e14:	00812403          	lw	s0,8(sp)
80002e18:	01010113          	addi	sp,sp,16
80002e1c:	00008067          	ret

80002e20 <_fstat_r>:
_fstat_r():
80002e20:	ff010113          	addi	sp,sp,-16
80002e24:	00812423          	sw	s0,8(sp)
80002e28:	00050413          	mv	s0,a0
80002e2c:	00058513          	mv	a0,a1
80002e30:	00060593          	mv	a1,a2
80002e34:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80002e38:	00112623          	sw	ra,12(sp)
80002e3c:	ff9fd0ef          	jal	ra,80000e34 <_fstat>
80002e40:	fff00793          	li	a5,-1
80002e44:	00f51a63          	bne	a0,a5,80002e58 <_fstat_r+0x38>
80002e48:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002e4c:	0007a783          	lw	a5,0(a5)
80002e50:	00078463          	beqz	a5,80002e58 <_fstat_r+0x38>
80002e54:	00f42023          	sw	a5,0(s0)
80002e58:	00c12083          	lw	ra,12(sp)
80002e5c:	00812403          	lw	s0,8(sp)
80002e60:	01010113          	addi	sp,sp,16
80002e64:	00008067          	ret

80002e68 <_isatty_r>:
_isatty_r():
80002e68:	ff010113          	addi	sp,sp,-16
80002e6c:	00812423          	sw	s0,8(sp)
80002e70:	00050413          	mv	s0,a0
80002e74:	00058513          	mv	a0,a1
80002e78:	8e01a823          	sw	zero,-1808(gp) # 800040f0 <errno>
80002e7c:	00112623          	sw	ra,12(sp)
80002e80:	fa5fd0ef          	jal	ra,80000e24 <_isatty>
80002e84:	fff00793          	li	a5,-1
80002e88:	00f51a63          	bne	a0,a5,80002e9c <_isatty_r+0x34>
80002e8c:	8f018793          	addi	a5,gp,-1808 # 800040f0 <errno>
80002e90:	0007a783          	lw	a5,0(a5)
80002e94:	00078463          	beqz	a5,80002e9c <_isatty_r+0x34>
80002e98:	00f42023          	sw	a5,0(s0)
80002e9c:	00c12083          	lw	ra,12(sp)
80002ea0:	00812403          	lw	s0,8(sp)
80002ea4:	01010113          	addi	sp,sp,16
80002ea8:	00008067          	ret
80002eac:	0000                	unimp
	...

80002eb0 <local_irq_handler_table>:
80002eb0:	0db8 8000 0db4 8000 0dbc 8000 0de4 8000     ................
80002ec0:	0dd8 8000 0dd8 8000 0dd8 8000 0dd8 8000     ................
80002ed0:	0dc0 8000 0dc4 8000 0dc8 8000 0dcc 8000     ................
80002ee0:	0dd0 8000 0dd4 8000 0ddc 8000 0de0 8000     ................
80002ef0:	0a0d 6e49 6574 6e72 6c61 5320 7379 6574     ..Internal Syste
80002f00:	206d 6954 656d 2072 6e49 6574 7272 7075     m Timer Interrup
80002f10:	2074 6f43 6e75 6574 2072 203d 6425 0000     t Counter = %d..
80002f20:	0a0d 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ..**************
80002f30:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002f40:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002f50:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002f60:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002f70:	0a0d 2a0a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ...*************
80002f80:	2a2a 2a2a 2a2a 202a 2020 4d20 2d69 2056     *******    Mi-V 
80002f90:	7953 7473 6d65 5420 6d69 7265 4220 696c     System Timer Bli
80002fa0:	6b6e 2079 7845 6d61 6c70 2065 2020 2a20     nky Example    *
80002fb0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002fc0:	2a2a 2a2a 2a2a 0a0d 2a0a 2a2a 2a2a 2a2a     ******...*******
80002fd0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002fe0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80002ff0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80003000:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
80003010:	2a2a 2a2a 2a2a 0d2a 0d0a 4f0a 7362 7265     *******....Obser
80003020:	6576 7420 6568 4c20 4445 2073 6c62 6e69     ve the LEDs blin
80003030:	696b 676e 6f20 206e 6874 2065 6f62 7261     king on the boar
80003040:	2e64 5420 6568 4c20 4445 7020 7461 6574     d. The LED patte
80003050:	6e72 6320 6168 676e 7365 6520 6576 7972     rn changes every
80003060:	7420 6d69 2065 2061 7973 7473 6d65 7420      time a system t
80003070:	6d69 7265 6920 746e 7265 7572 7470 6f20     imer interrupt o
80003080:	6363 7275 2e73 0a0d 0000 0000               ccurs.......

8000308c <__sf_fake_stderr>:
	...

800030ac <__sf_fake_stdin>:
	...

800030cc <__sf_fake_stdout>:
	...
800030ec:	2d23 2b30 0020 0000 6c68 004c 6665 4567     #-0+ ...hlL.efgE
800030fc:	4746 0000 3130 3332 3534 3736 3938 4241     FG..0123456789AB
8000310c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
8000311c:	3938 6261 6463 6665 0000 0000 0000 0000     89abcdef........
8000312c:	0000 0000                                   ....
