
miv-rv32i-systick-blinky.elf:     file format elf32-littleriscv
miv-rv32i-systick-blinky.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00002bf0 memsz 0x00003880 flags rwx

Sections:
Idx Name                       Size      VMA       LMA       File off  Algn  Flags
  0 .entry                     00000310  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text                      00002860  80000310  80000310  00001310  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .sdata2._global_impure_ptr 00000004  80002b70  80002b70  00003b70  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .sdata                     00000010  80002b80  80002b80  00003b80  2**4  CONTENTS, ALLOC, LOAD, DATA
  4 .data                      00000060  80002b90  80002b90  00003b90  2**4  CONTENTS, ALLOC, LOAD, DATA
  5 .sbss                      00000030  80002bf0  80002bf0  00003bf0  2**4  ALLOC
  6 .bss                       00000060  80002c20  80002c20  00003bf0  2**4  ALLOC
  7 .heap                      00000400  80002c80  80002c80  00003bf0  2**4  ALLOC
  8 .stack                     00000800  80003080  80003080  00003bf0  2**4  ALLOC
  9 .riscv.attributes          00000026  00000000  00000000  00003bf0  2**0  CONTENTS, READONLY
 10 .comment                   00000051  00000000  00000000  00003c16  2**0  CONTENTS, READONLY
 11 .debug_line                000034a8  00000000  00000000  00003c67  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info                00003a77  00000000  00000000  0000710f  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev              00000fe6  00000000  00000000  0000ab86  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges             000002b8  00000000  00000000  0000bb70  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str                 0000166b  00000000  00000000  0000be28  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges              00000330  00000000  00000000  0000d498  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc                 00001821  00000000  00000000  0000d7c8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame               00001210  00000000  00000000  0000efec  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .entry	00000000 .entry
80000310 l    d  .text	00000000 .text
80002b70 l    d  .sdata2._global_impure_ptr	00000000 .sdata2._global_impure_ptr
80002b80 l    d  .sdata	00000000 .sdata
80002b90 l    d  .data	00000000 .data
80002bf0 l    d  .sbss	00000000 .sbss
80002c20 l    d  .bss	00000000 .bss
80002c80 l    d  .heap	00000000 .heap
80003080 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./src/platform/miv_rv32_hal/miv_rv32_entry.o
80000310 l       .text	00000000 handle_reset
80000004 l       .entry	00000000 trap_entry
80000050 l       .entry	00000000 generic_trap_handler
80000010 l       .entry	00000000 sw_trap_entry
800000e4 l       .entry	00000000 vector_sw_trap_handler
80000020 l       .entry	00000000 tmr_trap_entry
80000170 l       .entry	00000000 vector_tmr_trap_handler
80000030 l       .entry	00000000 ext_trap_entry
800001fc l       .entry	00000000 vector_ext_trap_handler
80000288 l       .entry	00000000 generic_restore
80000354 l       .text	00000000 ima_cores_setup
8000039c l       .text	00000000 vector_address_not_matching
80000360 l       .text	00000000 generic_reset_handling
80000414 l       .text	00000000 block_copy
800003a0 l       .text	00000000 initializations
800003f4 l       .text	00000000 zeroize_block
8000043c l       .text	00000000 block_copy_error
80000404 l       .text	00000000 zeroize_loop
80000424 l       .text	00000000 block_copy_loop
80000440 l       .text	00000000 block_copy_exit
00000000 l    df *ABS*	00000000 miv_rv32_hal.c
80000444 l     F .text	00000038 MRV_read_mtime
80002bf0 l     O .sbss	00000008 g_systick_cmp_value
80002bf8 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 miv_rv32_init.c
00000000 l    df *ABS*	00000000 miv_rv32_stubs.c
00000000 l    df *ABS*	00000000 miv_rv32_syscall.c
80002b80 l     O .sdata	00000004 curbrk.2633
00000000 l    df *ABS*	00000000 hal_irq.c
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 core_gpio.c
00000000 l    df *ABS*	00000000 main.c
80002c04 l     O .sbss	00000004 interrupt_counter.3033
80002c08 l     O .sbss	00000004 val.3034
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sysisatty.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 findfp.c
80000f48 l     F .text	00000088 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
800013ec l     F .text	0000003c __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 impure.c
80002b90 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
8000286c g     F .text	00000044 _isatty_r
800024e0 g     F .text	0000004c _lseek_r
00000800 g       *ABS*	00000000 STACK_SIZE
80000e7c g     F .text	0000007c printf
80000754  w    F .text	00000008 External_11_IRQHandler
80003380 g       .sdata	00000000 __global_pointer$
80000a28 g     F .text	000000c0 UART_get_rx
80001ef8 g     F .text	00000058 __sseek
80001048 g     F .text	000000b4 __sinit
80001f58 g     F .text	00000138 __swbuf_r
80000fdc g     F .text	0000006c __sfmoreglue
800026d0 g     F .text	00000004 __malloc_unlock
80002b90 g       *ABS*	00000000 __data_load
80000d64 g     F .text	00000054 SysTick_Handler
80002b84 g     O .sdata	00000004 g_hello_msg
80000724  w    F .text	00000008 External_5_IRQHandler
8000096c g       .text	00000000 HW_get_8bit_reg_field
80002bf0 g       .sbss	00000000 __sbss_start
80002c20 g     O .bss	00000040 g_rx_buff
80002824 g     F .text	00000048 _fstat_r
80002c70 g     O .bss	00000004 errno
800008a4 g       .text	00000000 HW_set_32bit_reg
80002c60 g     O .bss	00000008 g_gpio_out
8000079c  w    F .text	00000008 External_20_IRQHandler
80000fd0 g     F .text	0000000c _cleanup_r
80002b80 g       .sdata	00000000 __sdata_start
80002c68 g     O .bss	00000008 g_uart
80000944 g       .text	00000000 HW_set_8bit_reg_field
800007cc  w    F .text	00000008 External_26_IRQHandler
80000ef8 g     F .text	00000004 isatty
80000848 g     F .text	00000038 _fstat
800006b0 g     F .text	00000044 handle_trap
8000074c  w    F .text	00000008 External_10_IRQHandler
80001de0 g     F .text	00000044 _sbrk_r
800027d8 g     F .text	0000004c _read_r
8000047c g     F .text	000000dc MRV_systick_config
800007ec  w    F .text	00000008 External_30_IRQHandler
80000784  w    F .text	00000008 External_17_IRQHandler
80003080 g       .heap	00000000 _heap_end
80000838 g     F .text	00000008 _isatty
80002b70 g     O .sdata2._global_impure_ptr	00000004 _global_impure_ptr
80002c80 g       .bss	00000000 __bss_end
80000800 g     F .text	00000038 _sbrk
800006f4 g     F .text	00000004 _init
80000934 g       .text	00000000 HW_set_8bit_reg
8000093c g       .text	00000000 HW_get_8bit_reg
80002c20 g       .sbss	00000000 __sbss_end
800008b4 g       .text	00000000 HW_set_32bit_reg_field
800007c4  w    F .text	00000008 External_25_IRQHandler
80003880 g       .stack	00000000 __stack_top
800007e4  w    F .text	00000008 External_29_IRQHandler
80002acc g     O .text	00000020 __sf_fake_stderr
80000ae8 g     F .text	00000068 UART_polled_tx_string
80000764  w    F .text	00000008 External_13_IRQHandler
8000070c  w    F .text	00000008 External_2_IRQHandler
00000400 g       *ABS*	00000000 HEAP_SIZE
8000075c  w    F .text	00000008 External_12_IRQHandler
80001428 g     F .text	00000074 __sfputs_r
800026a8 g     F .text	00000024 memchr
800026d4 g     F .text	00000104 _free_r
80000c6c g     F .text	000000ec GPIO_set_outputs
80000000 g       .entry	00000000 _start
80000880 g     F .text	0000000c _lseek
80000558 g     F .text	00000094 handle_m_timer_interrupt
80002b80 g       *ABS*	00000000 __sdata_load
80002bf0 g       .data	00000000 __data_end
8000078c  w    F .text	00000008 External_18_IRQHandler
800008dc g       .text	00000000 HW_get_32bit_reg_field
80002210 g     F .text	00000044 _close_r
80000b50 g     F .text	0000011c GPIO_init
80002090 g     F .text	00000180 __swsetup_r
800010fc g     F .text	000000f0 __sfp
800007ac  w    F .text	00000008 External_22_IRQHandler
80001e24 g     F .text	00000050 __sread
80000774  w    F .text	00000008 External_15_IRQHandler
800026cc g     F .text	00000004 __malloc_lock
80002440 g     F .text	000000a0 _fflush_r
80002aec g     O .text	00000020 __sf_fake_stdin
80002c20 g       .bss	00000000 __bss_start
8000089c g     F .text	00000008 HAL_enable_interrupts
8000077c  w    F .text	00000008 External_16_IRQHandler
80000e60 g     F .text	0000001c memset
80000db8 g     F .text	000000a8 main
800007dc  w    F .text	00000008 External_28_IRQHandler
80001f50 g     F .text	00000008 __sclose
800012a0 g     F .text	0000014c _malloc_r
800008f4 g       .text	00000000 HW_get_16bit_reg
80002b90 g       .sdata	00000000 __sdata_end
80003080 g       .heap	00000000 __heap_end
8000076c  w    F .text	00000008 External_14_IRQHandler
80002c00 g     O .sbss	00000001 g_rx_size
800006f8 g     F .text	00000004 _fini
80000e7c g     F .text	0000007c iprintf
80000efc g     F .text	0000004c _write_r
800008fc g       .text	00000000 HW_set_16bit_reg_field
80001864 g     F .text	000001b0 _printf_common
80002b88 g     O .sdata	00000004 _impure_ptr
80003080 g       .stack	00000000 __stack_bottom
80002254 g     F .text	000001ec __sflush_r
80000d58 g     F .text	0000000c Software_IRQHandler
800007d4  w    F .text	00000008 External_27_IRQHandler
8000073c  w    F .text	00000008 External_8_IRQHandler
80000744  w    F .text	00000008 External_9_IRQHandler
80002c80 g       .heap	00000000 __heap_start
800006fc  w    F .text	00000008 Invalid_IRQHandler
80000714  w    F .text	00000008 External_3_IRQHandler
8000252c g     F .text	0000008c __swhatbuf_r
80000794  w    F .text	00000008 External_19_IRQHandler
80000894 g     F .text	00000008 _write
80002c80 g       .bss	00000000 _end
80001e74 g     F .text	00000084 __swrite
8000149c g     F .text	000003c8 _vfiprintf_r
800011ec g     F .text	000000b4 _fwalk_reent
8000097c g     F .text	000000ac UART_init
80002b0c g     O .text	00000020 __sf_fake_stdout
800008ac g       .text	00000000 HW_get_32bit_reg
8000088c g     F .text	00000008 _read
800007fc g     F .text	00000004 _exit
800008ec g       .text	00000000 HW_set_16bit_reg
800025b8 g     F .text	000000f0 __smakebuf_r
80001a14 g     F .text	000003cc _printf_i
80000704  w    F .text	00000008 External_1_IRQHandler
8000072c  w    F .text	00000008 External_6_IRQHandler
80002c10 g     O .sbss	00000004 __malloc_sbrk_start
800007f4  w    F .text	00000008 External_31_IRQHandler
800028b0 g     O .text	00000080 mrv_ext_irq_handler_table
80002b90 g       .data	00000000 __data_start
80002c0c g     O .sbss	00000004 __malloc_free_list
8000149c g     F .text	000003c8 _vfprintf_r
800007a4  w    F .text	00000008 External_21_IRQHandler
800005ec g     F .text	00000020 handle_m_soft_interrupt
8000060c g     F .text	000000a4 handle_m_ext_interrupt
80000924 g       .text	00000000 HW_get_16bit_reg_field
800007b4  w    F .text	00000008 External_23_IRQHandler
800007bc  w    F .text	00000008 External_24_IRQHandler
8000071c  w    F .text	00000008 External_4_IRQHandler
80000840 g     F .text	00000008 _close
80000734  w    F .text	00000008 External_7_IRQHandler



Disassembly of section .entry:

80000000 <_start>:
_start():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:114

  .section      .entry, "ax"
  .globl _start

_start:
  j handle_reset
80000000:	3100006f          	j	80000310 <handle_reset>

80000004 <trap_entry>:
trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:125
   at the jump and you can at least look at mcause, mepc and get some hints
   about the crash. */
trap_entry:
.option push
.option norvc
j generic_trap_handler
80000004:	04c0006f          	j	80000050 <generic_trap_handler>
	...

80000010 <sw_trap_entry>:
sw_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:131
.option pop
  .word 0
  .word 0

sw_trap_entry:
  j vector_sw_trap_handler
80000010:	0d40006f          	j	800000e4 <vector_sw_trap_handler>
	...

80000020 <tmr_trap_entry>:
tmr_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:140
  .word 0
  .word 0
  .word 0

tmr_trap_entry:
  j vector_tmr_trap_handler
80000020:	1500006f          	j	80000170 <vector_tmr_trap_handler>
	...

80000030 <ext_trap_entry>:
ext_trap_entry():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:149
  .word 0
  .word 0
  .word 0

ext_trap_entry:
  j vector_ext_trap_handler
80000030:	1cc0006f          	j	800001fc <vector_ext_trap_handler>
	...
80000044:	00000013          	nop
80000048:	00000013          	nop
8000004c:	00000013          	nop

80000050 <generic_trap_handler>:
generic_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:248
#endif /* MIV_RV32_V3_0 */
#endif /* MIV_LEGACY_RV32 */

.align 4
generic_trap_handler:
  STORE_CONTEXT
80000050:	f8010113          	addi	sp,sp,-128
80000054:	00112023          	sw	ra,0(sp)
80000058:	00112023          	sw	ra,0(sp)
8000005c:	00212223          	sw	sp,4(sp)
80000060:	00312423          	sw	gp,8(sp)
80000064:	00412623          	sw	tp,12(sp)
80000068:	00512823          	sw	t0,16(sp)
8000006c:	00612a23          	sw	t1,20(sp)
80000070:	00712c23          	sw	t2,24(sp)
80000074:	00812e23          	sw	s0,28(sp)
80000078:	02912023          	sw	s1,32(sp)
8000007c:	02a12223          	sw	a0,36(sp)
80000080:	02b12423          	sw	a1,40(sp)
80000084:	02c12623          	sw	a2,44(sp)
80000088:	02d12823          	sw	a3,48(sp)
8000008c:	02e12a23          	sw	a4,52(sp)
80000090:	02f12c23          	sw	a5,56(sp)
80000094:	03012e23          	sw	a6,60(sp)
80000098:	05112023          	sw	a7,64(sp)
8000009c:	05212223          	sw	s2,68(sp)
800000a0:	05312423          	sw	s3,72(sp)
800000a4:	05412623          	sw	s4,76(sp)
800000a8:	05512823          	sw	s5,80(sp)
800000ac:	05612a23          	sw	s6,84(sp)
800000b0:	05712c23          	sw	s7,88(sp)
800000b4:	05812e23          	sw	s8,92(sp)
800000b8:	07912023          	sw	s9,96(sp)
800000bc:	07a12223          	sw	s10,100(sp)
800000c0:	07b12423          	sw	s11,104(sp)
800000c4:	07c12623          	sw	t3,108(sp)
800000c8:	07d12823          	sw	t4,112(sp)
800000cc:	07e12a23          	sw	t5,116(sp)
800000d0:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:249
  csrr a0, mcause
800000d4:	34202573          	csrr	a0,mcause
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:250
  csrr a1, mepc
800000d8:	341025f3          	csrr	a1,mepc
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:251
  jal handle_trap
800000dc:	5d4000ef          	jal	ra,800006b0 <handle_trap>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:252
  j generic_restore
800000e0:	1a80006f          	j	80000288 <generic_restore>

800000e4 <vector_sw_trap_handler>:
vector_sw_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:255

vector_sw_trap_handler:
  STORE_CONTEXT
800000e4:	f8010113          	addi	sp,sp,-128
800000e8:	00112023          	sw	ra,0(sp)
800000ec:	00112023          	sw	ra,0(sp)
800000f0:	00212223          	sw	sp,4(sp)
800000f4:	00312423          	sw	gp,8(sp)
800000f8:	00412623          	sw	tp,12(sp)
800000fc:	00512823          	sw	t0,16(sp)
80000100:	00612a23          	sw	t1,20(sp)
80000104:	00712c23          	sw	t2,24(sp)
80000108:	00812e23          	sw	s0,28(sp)
8000010c:	02912023          	sw	s1,32(sp)
80000110:	02a12223          	sw	a0,36(sp)
80000114:	02b12423          	sw	a1,40(sp)
80000118:	02c12623          	sw	a2,44(sp)
8000011c:	02d12823          	sw	a3,48(sp)
80000120:	02e12a23          	sw	a4,52(sp)
80000124:	02f12c23          	sw	a5,56(sp)
80000128:	03012e23          	sw	a6,60(sp)
8000012c:	05112023          	sw	a7,64(sp)
80000130:	05212223          	sw	s2,68(sp)
80000134:	05312423          	sw	s3,72(sp)
80000138:	05412623          	sw	s4,76(sp)
8000013c:	05512823          	sw	s5,80(sp)
80000140:	05612a23          	sw	s6,84(sp)
80000144:	05712c23          	sw	s7,88(sp)
80000148:	05812e23          	sw	s8,92(sp)
8000014c:	07912023          	sw	s9,96(sp)
80000150:	07a12223          	sw	s10,100(sp)
80000154:	07b12423          	sw	s11,104(sp)
80000158:	07c12623          	sw	t3,108(sp)
8000015c:	07d12823          	sw	t4,112(sp)
80000160:	07e12a23          	sw	t5,116(sp)
80000164:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:256
  jal handle_m_soft_interrupt
80000168:	484000ef          	jal	ra,800005ec <handle_m_soft_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:257
  j generic_restore
8000016c:	11c0006f          	j	80000288 <generic_restore>

80000170 <vector_tmr_trap_handler>:
vector_tmr_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:260

vector_tmr_trap_handler:
  STORE_CONTEXT
80000170:	f8010113          	addi	sp,sp,-128
80000174:	00112023          	sw	ra,0(sp)
80000178:	00112023          	sw	ra,0(sp)
8000017c:	00212223          	sw	sp,4(sp)
80000180:	00312423          	sw	gp,8(sp)
80000184:	00412623          	sw	tp,12(sp)
80000188:	00512823          	sw	t0,16(sp)
8000018c:	00612a23          	sw	t1,20(sp)
80000190:	00712c23          	sw	t2,24(sp)
80000194:	00812e23          	sw	s0,28(sp)
80000198:	02912023          	sw	s1,32(sp)
8000019c:	02a12223          	sw	a0,36(sp)
800001a0:	02b12423          	sw	a1,40(sp)
800001a4:	02c12623          	sw	a2,44(sp)
800001a8:	02d12823          	sw	a3,48(sp)
800001ac:	02e12a23          	sw	a4,52(sp)
800001b0:	02f12c23          	sw	a5,56(sp)
800001b4:	03012e23          	sw	a6,60(sp)
800001b8:	05112023          	sw	a7,64(sp)
800001bc:	05212223          	sw	s2,68(sp)
800001c0:	05312423          	sw	s3,72(sp)
800001c4:	05412623          	sw	s4,76(sp)
800001c8:	05512823          	sw	s5,80(sp)
800001cc:	05612a23          	sw	s6,84(sp)
800001d0:	05712c23          	sw	s7,88(sp)
800001d4:	05812e23          	sw	s8,92(sp)
800001d8:	07912023          	sw	s9,96(sp)
800001dc:	07a12223          	sw	s10,100(sp)
800001e0:	07b12423          	sw	s11,104(sp)
800001e4:	07c12623          	sw	t3,108(sp)
800001e8:	07d12823          	sw	t4,112(sp)
800001ec:	07e12a23          	sw	t5,116(sp)
800001f0:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:261
  jal handle_m_timer_interrupt
800001f4:	364000ef          	jal	ra,80000558 <handle_m_timer_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:262
  j generic_restore
800001f8:	0900006f          	j	80000288 <generic_restore>

800001fc <vector_ext_trap_handler>:
vector_ext_trap_handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:265

vector_ext_trap_handler:
  STORE_CONTEXT
800001fc:	f8010113          	addi	sp,sp,-128
80000200:	00112023          	sw	ra,0(sp)
80000204:	00112023          	sw	ra,0(sp)
80000208:	00212223          	sw	sp,4(sp)
8000020c:	00312423          	sw	gp,8(sp)
80000210:	00412623          	sw	tp,12(sp)
80000214:	00512823          	sw	t0,16(sp)
80000218:	00612a23          	sw	t1,20(sp)
8000021c:	00712c23          	sw	t2,24(sp)
80000220:	00812e23          	sw	s0,28(sp)
80000224:	02912023          	sw	s1,32(sp)
80000228:	02a12223          	sw	a0,36(sp)
8000022c:	02b12423          	sw	a1,40(sp)
80000230:	02c12623          	sw	a2,44(sp)
80000234:	02d12823          	sw	a3,48(sp)
80000238:	02e12a23          	sw	a4,52(sp)
8000023c:	02f12c23          	sw	a5,56(sp)
80000240:	03012e23          	sw	a6,60(sp)
80000244:	05112023          	sw	a7,64(sp)
80000248:	05212223          	sw	s2,68(sp)
8000024c:	05312423          	sw	s3,72(sp)
80000250:	05412623          	sw	s4,76(sp)
80000254:	05512823          	sw	s5,80(sp)
80000258:	05612a23          	sw	s6,84(sp)
8000025c:	05712c23          	sw	s7,88(sp)
80000260:	05812e23          	sw	s8,92(sp)
80000264:	07912023          	sw	s9,96(sp)
80000268:	07a12223          	sw	s10,100(sp)
8000026c:	07b12423          	sw	s11,104(sp)
80000270:	07c12623          	sw	t3,108(sp)
80000274:	07d12823          	sw	t4,112(sp)
80000278:	07e12a23          	sw	t5,116(sp)
8000027c:	07f12c23          	sw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:267
#ifdef MIV_LEGACY_RV32
  jal handle_m_ext_interrupt
80000280:	38c000ef          	jal	ra,8000060c <handle_m_ext_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:271
#else
  jal External_IRQHandler
#endif /* MIV_LEGACY_RV32 */
  j generic_restore
80000284:	0040006f          	j	80000288 <generic_restore>

80000288 <generic_restore>:
generic_restore():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:340

#endif /*MIV_RV32_V3_0*/
#endif /* MIV_LEGACY_RV32 */

generic_restore:
  LREG x1, 0 * REGBYTES(sp)
80000288:	00012083          	lw	ra,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:341
  LREG x2, 1 * REGBYTES(sp)
8000028c:	00412103          	lw	sp,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:342
  LREG x3, 2 * REGBYTES(sp)
80000290:	00812183          	lw	gp,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:343
  LREG x4, 3 * REGBYTES(sp)
80000294:	00c12203          	lw	tp,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:344
  LREG x5, 4 * REGBYTES(sp)
80000298:	01012283          	lw	t0,16(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:345
  LREG x6, 5 * REGBYTES(sp)
8000029c:	01412303          	lw	t1,20(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:346
  LREG x7, 6 * REGBYTES(sp)
800002a0:	01812383          	lw	t2,24(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:347
  LREG x8, 7 * REGBYTES(sp)
800002a4:	01c12403          	lw	s0,28(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:348
  LREG x9, 8 * REGBYTES(sp)
800002a8:	02012483          	lw	s1,32(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:349
  LREG x10, 9 * REGBYTES(sp)
800002ac:	02412503          	lw	a0,36(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:350
  LREG x11, 10 * REGBYTES(sp)
800002b0:	02812583          	lw	a1,40(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:351
  LREG x12, 11 * REGBYTES(sp)
800002b4:	02c12603          	lw	a2,44(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:352
  LREG x13, 12 * REGBYTES(sp)
800002b8:	03012683          	lw	a3,48(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:353
  LREG x14, 13 * REGBYTES(sp)
800002bc:	03412703          	lw	a4,52(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:354
  LREG x15, 14 * REGBYTES(sp)
800002c0:	03812783          	lw	a5,56(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:355
  LREG x16, 15 * REGBYTES(sp)
800002c4:	03c12803          	lw	a6,60(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:356
  LREG x17, 16 * REGBYTES(sp)
800002c8:	04012883          	lw	a7,64(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:357
  LREG x18, 17 * REGBYTES(sp)
800002cc:	04412903          	lw	s2,68(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:358
  LREG x19, 18 * REGBYTES(sp)
800002d0:	04812983          	lw	s3,72(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:359
  LREG x20, 19 * REGBYTES(sp)
800002d4:	04c12a03          	lw	s4,76(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:360
  LREG x21, 20 * REGBYTES(sp)
800002d8:	05012a83          	lw	s5,80(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:361
  LREG x22, 21 * REGBYTES(sp)
800002dc:	05412b03          	lw	s6,84(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:362
  LREG x23, 22 * REGBYTES(sp)
800002e0:	05812b83          	lw	s7,88(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:363
  LREG x24, 23 * REGBYTES(sp)
800002e4:	05c12c03          	lw	s8,92(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:364
  LREG x25, 24 * REGBYTES(sp)
800002e8:	06012c83          	lw	s9,96(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:365
  LREG x26, 25 * REGBYTES(sp)
800002ec:	06412d03          	lw	s10,100(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:366
  LREG x27, 26 * REGBYTES(sp)
800002f0:	06812d83          	lw	s11,104(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:367
  LREG x28, 27 * REGBYTES(sp)
800002f4:	06c12e03          	lw	t3,108(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:368
  LREG x29, 28 * REGBYTES(sp)
800002f8:	07012e83          	lw	t4,112(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:369
  LREG x30, 29 * REGBYTES(sp)
800002fc:	07412f03          	lw	t5,116(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:370
  LREG x31, 30 * REGBYTES(sp)
80000300:	07812f83          	lw	t6,120(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:409
  flw	f30, 30 * REGBYTES(sp)
  flw	f31, 31 * REGBYTES(sp)
  #endif /* __riscv_flen */
  #endif /* MIV_FP_CONTEXT_SAVE */

  addi sp, sp, SP_SHIFT_OFFSET*REGBYTES
80000304:	08010113          	addi	sp,sp,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:410
  mret
80000308:	30200073          	mret
8000030c:	0000                	unimp
	...

Disassembly of section .text:

80000310 <handle_reset>:
handle_reset():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:419
/* Ensure instructions are not relaxed, since gp is not yet set */
.option push
.option norelax

#ifndef MIV_RV32_V3_0
  csrwi mstatus, 0
80000310:	30005073          	csrwi	mstatus,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:420
  csrwi mie, 0
80000314:	30405073          	csrwi	mie,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:421
  la ra, _start
80000318:	00000097          	auipc	ra,0x0
8000031c:	ce808093          	addi	ra,ra,-792 # 80000000 <_start>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:429
#ifndef MIV_LEGACY_RV32
  li t0, MTIMEH_ADDR
  sw x0, 0(t0)
#endif

  csrr t0, misa
80000320:	301022f3          	csrr	t0,misa
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:430
  andi t0, t0, A_EXTENSION_MASK
80000324:	0012f293          	andi	t0,t0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:431
  bnez t0, ima_cores_setup          /* Jump to IMA core handling */
80000328:	02029663          	bnez	t0,80000354 <ima_cores_setup>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:439
/* For MIV_RV32 cores the mtvec exception base address is fixed at Reset vector
   address + 0x4. Check the mode bits. */
/* In the MIV_RV32 v3.1, the MTVEC exception base address is WARL, and can be 
   configured by the user at runtime */

  csrr t0, mtvec
8000032c:	305022f3          	csrr	t0,mtvec
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:440
  andi t0, t0, MTVEC_MODE_BIT_MASK
80000330:	0032f293          	andi	t0,t0,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:441
  li t1, MTVEC_VECTORED_MODE_VAL
80000334:	00100313          	li	t1,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:442
  bne t0, t1, ima_cores_setup        /* Jump to IMA core handling */
80000338:	00629e63          	bne	t0,t1,80000354 <ima_cores_setup>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:446

  /* When mode = 1 => this is vectored mode on MIV_RV32 core.
     Verify that the trap_handler address matches the configuration in MTVEC */
  csrr t0, mtvec
8000033c:	305022f3          	csrr	t0,mtvec
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:447
  andi t0, t0, 0xFFFFFFFC
80000340:	ffc2f293          	andi	t0,t0,-4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:448
  la t1, trap_entry
80000344:	00000317          	auipc	t1,0x0
80000348:	cc030313          	addi	t1,t1,-832 # 80000004 <trap_entry>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:449
  bne t0, t1, vector_address_not_matching
8000034c:	04629863          	bne	t0,t1,8000039c <vector_address_not_matching>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:450
  j generic_reset_handling
80000350:	0100006f          	j	80000360 <generic_reset_handling>

80000354 <ima_cores_setup>:
ima_cores_setup():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:477
  bne t0, t1, vector_address_not_matching
  j generic_reset_handling
#endif /*MIV_RV32_V3_0*/

ima_cores_setup:
  la t0, trap_entry
80000354:	00000297          	auipc	t0,0x0
80000358:	cb028293          	addi	t0,t0,-848 # 80000004 <trap_entry>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:483

#ifdef MIV_LEGACY_RV32_VECTORED_INTERRUPTS
  addi t0, t0, 0x01 /* Set the mode bit for IMA cores.
                       For both MIV_RV32 v3.1 and v3.0 cores this is done by configurator. */
#endif
  csrw mtvec, t0
8000035c:	30529073          	csrw	mtvec,t0

80000360 <generic_reset_handling>:
generic_reset_handling():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:488

generic_reset_handling:
/* Copy sdata section first so that the gp is set and linker relaxation can be
   used */
    la a4, __sdata_load
80000360:	00003717          	auipc	a4,0x3
80000364:	82070713          	addi	a4,a4,-2016 # 80002b80 <__sdata_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:489
    la a5, __sdata_start
80000368:	00003797          	auipc	a5,0x3
8000036c:	81878793          	addi	a5,a5,-2024 # 80002b80 <__sdata_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:490
    la a6, __sdata_end
80000370:	00003817          	auipc	a6,0x3
80000374:	82080813          	addi	a6,a6,-2016 # 80002b90 <__data_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:491
    beq a4, a5, 1f     /* Exit if source and dest are same */
80000378:	00f70863          	beq	a4,a5,80000388 <generic_reset_handling+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:492
    beq a5, a6, 1f     /* Exit if section start and end addresses are same */
8000037c:	01078663          	beq	a5,a6,80000388 <generic_reset_handling+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:493
    call block_copy
80000380:	00000097          	auipc	ra,0x0
80000384:	094080e7          	jalr	148(ra) # 80000414 <block_copy>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:497

1:
  /* initialize global pointer */
  la gp, __global_pointer$
80000388:	00003197          	auipc	gp,0x3
8000038c:	ff818193          	addi	gp,gp,-8 # 80003380 <__global_pointer$>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:514
  csrw mstatus, t1

  lui t0, 0x0
  fscsr t0
#endif
  call initializations
80000390:	010000ef          	jal	ra,800003a0 <initializations>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:516
  /* Initialize stack pointer */
  la sp, __stack_top
80000394:	50018113          	addi	sp,gp,1280 # 80003880 <__stack_top>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:519

  /* Jump into C code */
  j _init
80000398:	35c0006f          	j	800006f4 <_init>

8000039c <vector_address_not_matching>:
vector_address_not_matching():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:524

/* Error: trap_entry is not at the expected address of reset_vector+mtvec offset
   as configured in the MIV_RV32 core vectored mode */
vector_address_not_matching:
  ebreak
8000039c:	00100073          	ebreak

800003a0 <initializations>:
initializations():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:528

initializations:
/* Initialize the .bss section */
    mv t0, ra           /* Store ra for future use */
800003a0:	00008293          	mv	t0,ra
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:529
    la  a5, __bss_start
800003a4:	8a018793          	addi	a5,gp,-1888 # 80002c20 <__sbss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:530
    la  a6, __bss_end
800003a8:	90018813          	addi	a6,gp,-1792 # 80002c80 <__bss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:531
    beq a5, a6, 1f     /* Section start and end address are the same */
800003ac:	01078463          	beq	a5,a6,800003b4 <initializations+0x14>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:532
    call zeroize_block
800003b0:	044000ef          	jal	ra,800003f4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:536

1:
/* Initialize the .sbss section */
    la  a5, __sbss_start
800003b4:	87018793          	addi	a5,gp,-1936 # 80002bf0 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:537
    la  a6, __sbss_end
800003b8:	8a018813          	addi	a6,gp,-1888 # 80002c20 <__sbss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:538
    beq a5, a6, 1f     /* Section start and end address are the same */
800003bc:	01078c63          	beq	a5,a6,800003d4 <initializations+0x34>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:539
    call zeroize_block
800003c0:	034000ef          	jal	ra,800003f4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:542

/* Clear heap */
    la  a5, __heap_start
800003c4:	90018793          	addi	a5,gp,-1792 # 80002c80 <__bss_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:543
    la  a6, __heap_end
800003c8:	d0018813          	addi	a6,gp,-768 # 80003080 <__heap_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:544
    beq a5, a6, 1f     /* Section start and end address are the same */
800003cc:	01078463          	beq	a5,a6,800003d4 <initializations+0x34>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:545
    call zeroize_block
800003d0:	024000ef          	jal	ra,800003f4 <zeroize_block>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:549

1:
/* Copy data section */
    la  a4, __data_load
800003d4:	81018713          	addi	a4,gp,-2032 # 80002b90 <__data_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:550
    la  a5, __data_start
800003d8:	81018793          	addi	a5,gp,-2032 # 80002b90 <__data_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:551
    la  a6, __data_end
800003dc:	87018813          	addi	a6,gp,-1936 # 80002bf0 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:552
    beq a4, a5, 1f     /* Exit early if source and dest are same */
800003e0:	00f70663          	beq	a4,a5,800003ec <initializations+0x4c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:553
    beq a5, a6, 1f     /* Section start and end addresses are the same */
800003e4:	01078463          	beq	a5,a6,800003ec <initializations+0x4c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:554
    call block_copy
800003e8:	02c000ef          	jal	ra,80000414 <block_copy>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:557

1:
    mv ra, t0           /* Retrieve ra */
800003ec:	00028093          	mv	ra,t0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:558
    ret
800003f0:	00008067          	ret

800003f4 <zeroize_block>:
zeroize_block():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:561

zeroize_block:
    bltu a6, a5, block_copy_error   /* Error. End address is less than start */
800003f4:	04f86463          	bltu	a6,a5,8000043c <block_copy_error>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:562
    or a7, a6, a5                   /* Check if start or end is unalined */
800003f8:	00f868b3          	or	a7,a6,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:563
    andi a7, a7, 0x03u
800003fc:	0038f893          	andi	a7,a7,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:564
    bgtz a7, block_copy_error       /* Unaligned addresses error*/
80000400:	03104e63          	bgtz	a7,8000043c <block_copy_error>

80000404 <zeroize_loop>:
zeroize_loop():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:566
zeroize_loop:
    sw x0, 0(a5)
80000404:	0007a023          	sw	zero,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:567
    add a5, a5, __SIZEOF_POINTER__
80000408:	00478793          	addi	a5,a5,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:568
    blt a5, a6, zeroize_loop
8000040c:	ff07cce3          	blt	a5,a6,80000404 <zeroize_loop>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:569
    ret
80000410:	00008067          	ret

80000414 <block_copy>:
block_copy():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:572

block_copy:
    bltu a6, a5, block_copy_error   /* Error. End address is less than start */
80000414:	02f86463          	bltu	a6,a5,8000043c <block_copy_error>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:573
    or a7, a6, a5                   /* Check if start or end is unalined */
80000418:	00f868b3          	or	a7,a6,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:574
    andi a7, a7, 0x03u
8000041c:	0038f893          	andi	a7,a7,3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:575
    bgtz a7, block_copy_error       /* Unaligned addresses error*/
80000420:	01104e63          	bgtz	a7,8000043c <block_copy_error>

80000424 <block_copy_loop>:
block_copy_loop():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:577
block_copy_loop:
    lw a7, 0(a4)
80000424:	00072883          	lw	a7,0(a4)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:578
    sw a7, 0(a5)
80000428:	0117a023          	sw	a7,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:579
    addi a5, a5, 0x04
8000042c:	00478793          	addi	a5,a5,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:580
    addi a4, a4, 0x04
80000430:	00470713          	addi	a4,a4,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:581
    blt a5, a6, block_copy_loop
80000434:	ff07c8e3          	blt	a5,a6,80000424 <block_copy_loop>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:582
    j block_copy_exit
80000438:	0080006f          	j	80000440 <block_copy_exit>

8000043c <block_copy_error>:
block_copy_error():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:585

block_copy_error:
    j block_copy_error
8000043c:	0000006f          	j	8000043c <block_copy_error>

80000440 <block_copy_exit>:
block_copy_exit():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_entry.S:588

block_copy_exit:
    ret
80000440:	00008067          	ret

80000444 <MRV_read_mtime>:
MRV_read_mtime():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:684

/***************************************************************************//**
  The MRV_read_mtime() function returns the current MTIME register value.
 */
static inline uint64_t MRV_read_mtime(void)
{
80000444:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:685
    volatile uint32_t hi = 0u;
80000448:	00012423          	sw	zero,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:686
    volatile uint32_t lo = 0u;
8000044c:	00012623          	sw	zero,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:691

    /* when mtime lower word is 0xFFFFFFFF, there will be rollover and
     * returned value could be wrong. */
    do {
        hi = MTIMEH;
80000450:	4400c7b7          	lui	a5,0x4400c
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:691 (discriminator 1)
80000454:	ffc7a703          	lw	a4,-4(a5) # 4400bffc <STACK_SIZE+0x4400b7fc>
80000458:	00e12423          	sw	a4,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:692 (discriminator 1)
        lo = MTIME;
8000045c:	ff87a703          	lw	a4,-8(a5)
80000460:	00e12623          	sw	a4,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:693 (discriminator 1)
    } while(hi != MTIMEH);
80000464:	00812703          	lw	a4,8(sp)
80000468:	ffc7a583          	lw	a1,-4(a5)
8000046c:	fee594e3          	bne	a1,a4,80000454 <MRV_read_mtime+0x10>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:695

    return((((uint64_t)MTIMEH) << 32u) | lo);
80000470:	00c12503          	lw	a0,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:696
}
80000474:	01010113          	addi	sp,sp,16
80000478:	00008067          	ret

8000047c <MRV_systick_config>:
MRV_systick_config():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:163

/*------------------------------------------------------------------------------
 * Configure the machine timer to generate an interrupt.
 */
uint32_t MRV_systick_config(uint64_t ticks)
{
8000047c:	ff010113          	addi	sp,sp,-16
80000480:	00812423          	sw	s0,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    uint32_t ret_val = ERROR;
    uint64_t remainder = ticks;
    g_systick_increment = 0U;
80000484:	00000713          	li	a4,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
80000488:	87018793          	addi	a5,gp,-1936 # 80002bf0 <__data_end>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:163
{
8000048c:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
80000490:	87818413          	addi	s0,gp,-1928 # 80002bf8 <g_systick_increment>
80000494:	00000693          	li	a3,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
80000498:	00e7a223          	sw	a4,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
8000049c:	00e42223          	sw	a4,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:167
    g_systick_cmp_value = 0U;
800004a0:	00d7a023          	sw	a3,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:166
    g_systick_increment = 0U;
800004a4:	00d42023          	sw	a3,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:169

    while (remainder >= MTIME_PRESCALER)
800004a8:	00000793          	li	a5,0
800004ac:	00000713          	li	a4,0
800004b0:	00000613          	li	a2,0
800004b4:	06300893          	li	a7,99
800004b8:	00178813          	addi	a6,a5,1
800004bc:	00f836b3          	sltu	a3,a6,a5
800004c0:	00e686b3          	add	a3,a3,a4
800004c4:	06059863          	bnez	a1,80000534 <MRV_systick_config+0xb8>
800004c8:	06a8e663          	bltu	a7,a0,80000534 <MRV_systick_config+0xb8>
800004cc:	00060663          	beqz	a2,800004d8 <MRV_systick_config+0x5c>
800004d0:	86f1ac23          	sw	a5,-1928(gp) # 80002bf8 <g_systick_increment>
800004d4:	86e1ae23          	sw	a4,-1924(gp) # 80002bfc <g_systick_increment+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:175
    {
        remainder -= MTIME_PRESCALER;
        g_systick_increment++;
    }

    g_systick_cmp_value = g_systick_increment + MRV_read_mtime();
800004d8:	f6dff0ef          	jal	ra,80000444 <MRV_read_mtime>
800004dc:	00042783          	lw	a5,0(s0)
800004e0:	00442683          	lw	a3,4(s0)
800004e4:	00f50733          	add	a4,a0,a5
800004e8:	00a73533          	sltu	a0,a4,a0
800004ec:	00d585b3          	add	a1,a1,a3
800004f0:	00b505b3          	add	a1,a0,a1
800004f4:	86e1a823          	sw	a4,-1936(gp) # 80002bf0 <__data_end>
800004f8:	86b1aa23          	sw	a1,-1932(gp) # 80002bf4 <__data_end+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:177

    if (g_systick_increment > 0U)
800004fc:	00d7e7b3          	or	a5,a5,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:164
    uint32_t ret_val = ERROR;
80000500:	00100513          	li	a0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:177
    if (g_systick_increment > 0U)
80000504:	02078063          	beqz	a5,80000524 <MRV_systick_config+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:179
    {
        WRITE_MTIMECMP(g_systick_cmp_value);
80000508:	440047b7          	lui	a5,0x44004
8000050c:	00e7a023          	sw	a4,0(a5) # 44004000 <STACK_SIZE+0x44003800>
80000510:	00b7a223          	sw	a1,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:180
        set_csr(mie, MIP_MTIP);
80000514:	08000793          	li	a5,128
80000518:	3047a7f3          	csrrs	a5,mie,a5
MRV_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:617
    set_csr(mstatus, MSTATUS_MIE);
8000051c:	300467f3          	csrrsi	a5,mstatus,8
MRV_systick_config():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:182
        MRV_enable_interrupts();
        ret_val = SUCCESS;
80000520:	00000513          	li	a0,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:186
    }

    return ret_val;
}
80000524:	00c12083          	lw	ra,12(sp)
80000528:	00812403          	lw	s0,8(sp)
8000052c:	01010113          	addi	sp,sp,16
80000530:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:171
        remainder -= MTIME_PRESCALER;
80000534:	f9c50793          	addi	a5,a0,-100
80000538:	00a7b733          	sltu	a4,a5,a0
8000053c:	fff58593          	addi	a1,a1,-1
80000540:	00078513          	mv	a0,a5
80000544:	00b705b3          	add	a1,a4,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:172
        g_systick_increment++;
80000548:	00100613          	li	a2,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:171
        remainder -= MTIME_PRESCALER;
8000054c:	00080793          	mv	a5,a6
80000550:	00068713          	mv	a4,a3
80000554:	f65ff06f          	j	800004b8 <MRV_systick_config+0x3c>

80000558 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:192

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt(void)
{
80000558:	ff010113          	addi	sp,sp,-16
8000055c:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:193
    clear_csr(mie, MIP_MTIP);
80000560:	08000793          	li	a5,128
80000564:	3047b7f3          	csrrc	a5,mie,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:195

    uint64_t mtime_at_irq = MRV_read_mtime();
80000568:	eddff0ef          	jal	ra,80000444 <MRV_read_mtime>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201

#ifndef NDEBUG
    static volatile uint32_t d_tick = 0u;
#endif

    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
8000056c:	87018793          	addi	a5,gp,-1936 # 80002bf0 <__data_end>
80000570:	0007a703          	lw	a4,0(a5)
80000574:	00550613          	addi	a2,a0,5
80000578:	0047a783          	lw	a5,4(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
8000057c:	87818693          	addi	a3,gp,-1928 # 80002bf8 <g_systick_increment>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201
    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
80000580:	00a63533          	sltu	a0,a2,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
80000584:	0006a803          	lw	a6,0(a3)
80000588:	0046a883          	lw	a7,4(a3)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:201
    while(g_systick_cmp_value < (mtime_at_irq + MTIME_DELTA)) {
8000058c:	00b505b3          	add	a1,a0,a1
80000590:	00000693          	li	a3,0
80000594:	02b7ee63          	bltu	a5,a1,800005d0 <handle_m_timer_interrupt+0x78>
80000598:	00f59463          	bne	a1,a5,800005a0 <handle_m_timer_interrupt+0x48>
8000059c:	02c76a63          	bltu	a4,a2,800005d0 <handle_m_timer_interrupt+0x78>
800005a0:	00068663          	beqz	a3,800005ac <handle_m_timer_interrupt+0x54>
800005a4:	86e1a823          	sw	a4,-1936(gp) # 80002bf0 <__data_end>
800005a8:	86f1aa23          	sw	a5,-1932(gp) # 80002bf4 <__data_end+0x4>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:223
     * If you are running the program using the debugger and halt the CPU at a 
     * breakpoint, MTIME will continue to increment and interrupts will be 
     * missed; resulting in d_tick > 1.
     */

    WRITE_MTIMECMP(g_systick_cmp_value);
800005ac:	440046b7          	lui	a3,0x44004
800005b0:	00f6a223          	sw	a5,4(a3) # 44004004 <STACK_SIZE+0x44003804>
800005b4:	00e6a023          	sw	a4,0(a3)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:225

    SysTick_Handler();
800005b8:	7ac000ef          	jal	ra,80000d64 <SysTick_Handler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:227

    set_csr(mie, MIP_MTIP);
800005bc:	08000793          	li	a5,128
800005c0:	3047a7f3          	csrrs	a5,mie,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:228
}
800005c4:	00c12083          	lw	ra,12(sp)
800005c8:	01010113          	addi	sp,sp,16
800005cc:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:202
        g_systick_cmp_value = g_systick_cmp_value + g_systick_increment;
800005d0:	010706b3          	add	a3,a4,a6
800005d4:	00e6b533          	sltu	a0,a3,a4
800005d8:	011787b3          	add	a5,a5,a7
800005dc:	00068713          	mv	a4,a3
800005e0:	00f507b3          	add	a5,a0,a5
800005e4:	00100693          	li	a3,1
800005e8:	fadff06f          	j	80000594 <handle_m_timer_interrupt+0x3c>

800005ec <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:231

void handle_m_soft_interrupt(void)
{
800005ec:	ff010113          	addi	sp,sp,-16
800005f0:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:232
    Software_IRQHandler();
800005f4:	764000ef          	jal	ra,80000d58 <Software_IRQHandler>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:234
    MRV_clear_soft_irq();
}
800005f8:	00c12083          	lw	ra,12(sp)
MRV_clear_soft_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.h:732
  This function does not return any value.
 */
static inline void MRV_clear_soft_irq(void)
{
#ifdef MIV_LEGACY_RV32
    MSIP = 0x00u;   /* clear soft interrupt */
800005fc:	440007b7          	lui	a5,0x44000
80000600:	0007a023          	sw	zero,0(a5) # 44000000 <STACK_SIZE+0x43fff800>
handle_m_soft_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:234
80000604:	01010113          	addi	sp,sp,16
80000608:	00008067          	ret

8000060c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:240
/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for software interrupts.
 */
#ifdef MIV_LEGACY_RV32
void handle_m_ext_interrupt(void)
{
8000060c:	ff010113          	addi	sp,sp,-16
80000610:	00112623          	sw	ra,12(sp)
80000614:	00812423          	sw	s0,8(sp)
80000618:	00912223          	sw	s1,4(sp)
8000061c:	01212023          	sw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:241
    unsigned long hart_id = read_csr(mhartid);
80000620:	f1402473          	csrr	s0,mhartid
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:242
    uint32_t int_num  = PLIC->TARGET[hart_id].CLAIM_COMPLETE;
80000624:	400004b7          	lui	s1,0x40000
80000628:	00c41413          	slli	s0,s0,0xc
8000062c:	00848433          	add	s0,s1,s0
80000630:	002007b7          	lui	a5,0x200
80000634:	00f40433          	add	s0,s0,a5
80000638:	00442903          	lw	s2,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:245
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;

    if (0u !=int_num)
8000063c:	04090e63          	beqz	s2,80000698 <handle_m_ext_interrupt+0x8c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:247
    {
        disable = mrv_ext_irq_handler_table[int_num]();
80000640:	00291713          	slli	a4,s2,0x2
80000644:	00002797          	auipc	a5,0x2
80000648:	26c78793          	addi	a5,a5,620 # 800028b0 <mrv_ext_irq_handler_table>
8000064c:	00e787b3          	add	a5,a5,a4
80000650:	0007a783          	lw	a5,0(a5)
80000654:	000780e7          	jalr	a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:251

        PLIC->TARGET[hart_id].CLAIM_COMPLETE = int_num;

        if(EXT_IRQ_DISABLE == disable)
80000658:	00100793          	li	a5,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:249
        PLIC->TARGET[hart_id].CLAIM_COMPLETE = int_num;
8000065c:	01242223          	sw	s2,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:251
        if(EXT_IRQ_DISABLE == disable)
80000660:	02f51c63          	bne	a0,a5,80000698 <handle_m_ext_interrupt+0x8c>
MRV_PLIC_disable_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_plic.h:158
 * for that external interrupt is executing then you must use the return value
 * EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void MRV_PLIC_disable_irq(IRQn_Type IRQn)
{
    unsigned long hart_id = read_csr(mhartid);
80000664:	f1402773          	csrr	a4,mhartid
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_plic.h:159
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000668:	00595793          	srli	a5,s2,0x5
8000066c:	00571713          	slli	a4,a4,0x5
80000670:	00e787b3          	add	a5,a5,a4
80000674:	00279793          	slli	a5,a5,0x2
80000678:	00f484b3          	add	s1,s1,a5
8000067c:	000027b7          	lui	a5,0x2
80000680:	00f484b3          	add	s1,s1,a5
80000684:	0004a783          	lw	a5,0(s1) # 40000000 <STACK_SIZE+0x3ffff800>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_plic.h:161

    current &= ~((uint32_t)1 << (IRQn % 32));
80000688:	01251533          	sll	a0,a0,s2
8000068c:	fff54513          	not	a0,a0
80000690:	00f57533          	and	a0,a0,a5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_plic.h:163

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80000694:	00a4a023          	sw	a0,0(s1)
handle_m_ext_interrupt():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:256
        {
            MRV_PLIC_disable_irq((IRQn_Type)int_num);
        }
    }
}
80000698:	00c12083          	lw	ra,12(sp)
8000069c:	00812403          	lw	s0,8(sp)
800006a0:	00412483          	lw	s1,4(sp)
800006a4:	00012903          	lw	s2,0(sp)
800006a8:	01010113          	addi	sp,sp,16
800006ac:	00008067          	ret

800006b0 <handle_trap>:
handle_trap():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:323
 */
void handle_trap(uintptr_t mcause, uintptr_t mepc)
{   
    uint64_t is_interrupt = mcause & MCAUSE_INT;

    if (is_interrupt)
800006b0:	02055863          	bgez	a0,800006e0 <handle_trap+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:332
        {
            handle_local_ei_interrupts((uint8_t)(mcause & MCAUSE_CAUSE));
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_EXT)
#else
        if ((mcause & MCAUSE_CAUSE) == IRQ_M_EXT)
800006b4:	00151513          	slli	a0,a0,0x1
800006b8:	00155513          	srli	a0,a0,0x1
800006bc:	00b00793          	li	a5,11
800006c0:	00f51463          	bne	a0,a5,800006c8 <handle_trap+0x18>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:338
#endif
        {
#ifndef MIV_LEGACY_RV32
            External_IRQHandler();
#else
            handle_m_ext_interrupt();
800006c4:	f49ff06f          	j	8000060c <handle_m_ext_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:341
#endif
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_SOFT)
800006c8:	00300793          	li	a5,3
800006cc:	00f51463          	bne	a0,a5,800006d4 <handle_trap+0x24>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:343
        {
            handle_m_soft_interrupt();
800006d0:	f1dff06f          	j	800005ec <handle_m_soft_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:345
        }
        else if ((mcause & MCAUSE_CAUSE) == IRQ_M_TIMER)
800006d4:	00700793          	li	a5,7
800006d8:	00f51c63          	bne	a0,a5,800006f0 <handle_trap+0x40>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:347
        {
            handle_m_timer_interrupt();
800006dc:	e7dff06f          	j	80000558 <handle_m_timer_interrupt>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:320
{   
800006e0:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:402
         uintptr_t mmepc  = read_csr(mepc);

        /* breakpoint */
        __asm__("ebreak");
#else
        _exit(1 + mcause);
800006e4:	00150513          	addi	a0,a0,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:320
{   
800006e8:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_hal.c:402
        _exit(1 + mcause);
800006ec:	110000ef          	jal	ra,800007fc <_exit>
800006f0:	00008067          	ret

800006f4 <_init>:
_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_init.c:27
    /* This function is a placeholder for the case where some more hardware
     * specific initializations are required before jumping into the application
     * code. You can implement it here. */

    /* Jump to the application code after all initializations are completed */
    main();
800006f4:	6c40006f          	j	80000db8 <main>

800006f8 <_fini>:
_fini():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_init.c:34

/* Function called after main() finishes */
void
_fini(void)
{
}
800006f8:	00008067          	ret

800006fc <Invalid_IRQHandler>:
Invalid_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_stubs.c:36

#ifdef MIV_LEGACY_RV32
__attribute__((weak)) uint8_t Invalid_IRQHandler(void)
{
    return(0U); /* Default handler */
}
800006fc:	00000513          	li	a0,0
80000700:	00008067          	ret

80000704 <External_1_IRQHandler>:
External_1_IRQHandler():
80000704:	00000513          	li	a0,0
80000708:	00008067          	ret

8000070c <External_2_IRQHandler>:
External_2_IRQHandler():
8000070c:	00000513          	li	a0,0
80000710:	00008067          	ret

80000714 <External_3_IRQHandler>:
External_3_IRQHandler():
80000714:	00000513          	li	a0,0
80000718:	00008067          	ret

8000071c <External_4_IRQHandler>:
External_4_IRQHandler():
8000071c:	00000513          	li	a0,0
80000720:	00008067          	ret

80000724 <External_5_IRQHandler>:
External_5_IRQHandler():
80000724:	00000513          	li	a0,0
80000728:	00008067          	ret

8000072c <External_6_IRQHandler>:
External_6_IRQHandler():
8000072c:	00000513          	li	a0,0
80000730:	00008067          	ret

80000734 <External_7_IRQHandler>:
External_7_IRQHandler():
80000734:	00000513          	li	a0,0
80000738:	00008067          	ret

8000073c <External_8_IRQHandler>:
External_8_IRQHandler():
8000073c:	00000513          	li	a0,0
80000740:	00008067          	ret

80000744 <External_9_IRQHandler>:
External_9_IRQHandler():
80000744:	00000513          	li	a0,0
80000748:	00008067          	ret

8000074c <External_10_IRQHandler>:
External_10_IRQHandler():
8000074c:	00000513          	li	a0,0
80000750:	00008067          	ret

80000754 <External_11_IRQHandler>:
External_11_IRQHandler():
80000754:	00000513          	li	a0,0
80000758:	00008067          	ret

8000075c <External_12_IRQHandler>:
External_12_IRQHandler():
8000075c:	00000513          	li	a0,0
80000760:	00008067          	ret

80000764 <External_13_IRQHandler>:
External_13_IRQHandler():
80000764:	00000513          	li	a0,0
80000768:	00008067          	ret

8000076c <External_14_IRQHandler>:
External_14_IRQHandler():
8000076c:	00000513          	li	a0,0
80000770:	00008067          	ret

80000774 <External_15_IRQHandler>:
External_15_IRQHandler():
80000774:	00000513          	li	a0,0
80000778:	00008067          	ret

8000077c <External_16_IRQHandler>:
External_16_IRQHandler():
8000077c:	00000513          	li	a0,0
80000780:	00008067          	ret

80000784 <External_17_IRQHandler>:
External_17_IRQHandler():
80000784:	00000513          	li	a0,0
80000788:	00008067          	ret

8000078c <External_18_IRQHandler>:
External_18_IRQHandler():
8000078c:	00000513          	li	a0,0
80000790:	00008067          	ret

80000794 <External_19_IRQHandler>:
External_19_IRQHandler():
80000794:	00000513          	li	a0,0
80000798:	00008067          	ret

8000079c <External_20_IRQHandler>:
External_20_IRQHandler():
8000079c:	00000513          	li	a0,0
800007a0:	00008067          	ret

800007a4 <External_21_IRQHandler>:
External_21_IRQHandler():
800007a4:	00000513          	li	a0,0
800007a8:	00008067          	ret

800007ac <External_22_IRQHandler>:
External_22_IRQHandler():
800007ac:	00000513          	li	a0,0
800007b0:	00008067          	ret

800007b4 <External_23_IRQHandler>:
External_23_IRQHandler():
800007b4:	00000513          	li	a0,0
800007b8:	00008067          	ret

800007bc <External_24_IRQHandler>:
External_24_IRQHandler():
800007bc:	00000513          	li	a0,0
800007c0:	00008067          	ret

800007c4 <External_25_IRQHandler>:
External_25_IRQHandler():
800007c4:	00000513          	li	a0,0
800007c8:	00008067          	ret

800007cc <External_26_IRQHandler>:
External_26_IRQHandler():
800007cc:	00000513          	li	a0,0
800007d0:	00008067          	ret

800007d4 <External_27_IRQHandler>:
External_27_IRQHandler():
800007d4:	00000513          	li	a0,0
800007d8:	00008067          	ret

800007dc <External_28_IRQHandler>:
External_28_IRQHandler():
800007dc:	00000513          	li	a0,0
800007e0:	00008067          	ret

800007e4 <External_29_IRQHandler>:
External_29_IRQHandler():
800007e4:	00000513          	li	a0,0
800007e8:	00008067          	ret

800007ec <External_30_IRQHandler>:
External_30_IRQHandler():
800007ec:	00000513          	li	a0,0
800007f0:	00008067          	ret

800007f4 <External_31_IRQHandler>:
External_31_IRQHandler():
800007f4:	00000513          	li	a0,0
800007f8:	00008067          	ret

800007fc <_exit>:
_exit():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:150 (discriminator 1)

    write(STDERR_FILENO, message, strlen(message));
    write_hex(STDERR_FILENO, code);
#endif

    while (1){};
800007fc:	0000006f          	j	800007fc <_exit>

80000800 <_sbrk>:
_sbrk():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:169
     * You need to set HEAP_SIZE to a non-zero value in your linker script if
     * the following assertion fires.
     */
    ASSERT(&__heap_end > &__heap_start);

    if (((curbrk + incr) < &_end) || ((curbrk + incr) > &_heap_end))
80000800:	00002797          	auipc	a5,0x2
80000804:	38078793          	addi	a5,a5,896 # 80002b80 <__sdata_load>
80000808:	0007a783          	lw	a5,0(a5)
8000080c:	90018713          	addi	a4,gp,-1792 # 80002c80 <__bss_end>
80000810:	00a78533          	add	a0,a5,a0
80000814:	00e56e63          	bltu	a0,a4,80000830 <_sbrk+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:169 (discriminator 1)
80000818:	d0018713          	addi	a4,gp,-768 # 80003080 <__heap_end>
8000081c:	00a76a63          	bltu	a4,a0,80000830 <_sbrk+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:176
        errno = ENOMEM;
        ret = ((char *) - 1);
    }
    else
    {
        curbrk += incr;
80000820:	00002717          	auipc	a4,0x2
80000824:	36a72023          	sw	a0,864(a4) # 80002b80 <__sdata_load>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:188
     * assertion fires.
     * */
    ASSERT(curbrk <= &__heap_end);

    return(ret);
}
80000828:	00078513          	mv	a0,a5
8000082c:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:172
        ret = ((char *) - 1);
80000830:	fff00793          	li	a5,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:187
    return(ret);
80000834:	ff5ff06f          	j	80000828 <_sbrk+0x28>

80000838 <_isatty>:
_isatty():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:205
        errno = EBADF;
        ret = 0;
    }

    return(ret);
}
80000838:	00352513          	slti	a0,a0,3
8000083c:	00008067          	ret

80000840 <_close>:
_close():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:226
}

int _close(int fd)
{
    return stub(EBADF);
}
80000840:	fff00513          	li	a0,-1
80000844:	00008067          	ret

80000848 <_fstat>:
_fstat():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:239
{
    return stub(EAGAIN);
}

int _fstat(int fd, struct stat *st)
{
80000848:	fe010113          	addi	sp,sp,-32
8000084c:	00112e23          	sw	ra,28(sp)
80000850:	00b12623          	sw	a1,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:242
    int ret = 0;

    if (isatty(fd))
80000854:	6a4000ef          	jal	ra,80000ef8 <isatty>
80000858:	02050063          	beqz	a0,80000878 <_fstat+0x30>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:244
    {
        st->st_mode = S_IFCHR;
8000085c:	00c12583          	lw	a1,12(sp)
80000860:	000027b7          	lui	a5,0x2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:245
        ret = 0;
80000864:	00000513          	li	a0,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:244
        st->st_mode = S_IFCHR;
80000868:	00f5a223          	sw	a5,4(a1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:253
    {
        ret = stub(EBADF);
    }

    return ret;
}
8000086c:	01c12083          	lw	ra,28(sp)
80000870:	02010113          	addi	sp,sp,32
80000874:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:249
        ret = stub(EBADF);
80000878:	fff00513          	li	a0,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:252
    return ret;
8000087c:	ff1ff06f          	j	8000086c <_fstat+0x24>

80000880 <_lseek>:
_isatty():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:194
    if (fd <= 2)    /* one of stdin, stdout, stderr */
80000880:	00352513          	slti	a0,a0,3
_lseek():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:283
    {
        ret = stub(EBADF);
    }

    return ret;
}
80000884:	fff50513          	addi	a0,a0,-1
80000888:	00008067          	ret

8000088c <_read>:
_read():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/miv_rv32_hal/miv_rv32_syscall.c:313
        return  count;          /* Filled the buffer */
    }
#endif

    return stub(EBADF);
}
8000088c:	fff00513          	li	a0,-1
80000890:	00008067          	ret

80000894 <_write>:
_write():
80000894:	fff00513          	li	a0,-1
80000898:	00008067          	ret

8000089c <HAL_enable_interrupts>:
MRV_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\src\platform/miv_rv32_hal/miv_rv32_hal.h:617
  @return
  This functions returns the CORE_GPR_DED_RESET_REG bit value.
 */
static inline void MRV_enable_interrupts(void)
{
    set_csr(mstatus, MSTATUS_MIE);
8000089c:	300467f3          	csrrsi	a5,mstatus,8
HAL_enable_interrupts():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hal_irq.c:24
/*------------------------------------------------------------------------------
 * 
 */
void HAL_enable_interrupts(void) {
    MRV_enable_interrupts();
}
800008a0:	00008067          	ret

800008a4 <HW_set_32bit_reg>:
HW_set_32bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:39
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
800008a4:	00b52023          	sw	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:40
    ret
800008a8:	00008067          	ret

800008ac <HW_get_32bit_reg>:
HW_get_32bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:51
 * a0:   addr_t reg_addr

 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
800008ac:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:52
    ret
800008b0:	00008067          	ret

800008b4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:64
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
800008b4:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:65
    sll t3, t3, a1
800008b8:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:66
    and  t3, t3, a2
800008bc:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:67
    lw t1, 0(a0)
800008c0:	00052303          	lw	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:68
    mv t2, a2
800008c4:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:69
    not t2, t2
800008c8:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:70
    and t1, t1, t2
800008cc:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:71
    or t1, t1, t3
800008d0:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:72
    sw t1, 0(a0)
800008d4:	00652023          	sw	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:73
    ret
800008d8:	00008067          	ret

800008dc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:87
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
800008dc:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:88
    and a0, a0, a2
800008e0:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:89
    srl a0, a0, a1
800008e4:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:90
    ret
800008e8:	00008067          	ret

800008ec <HW_set_16bit_reg>:
HW_set_16bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:100
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
800008ec:	00b51023          	sh	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:101
    ret
800008f0:	00008067          	ret

800008f4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:112
 * a0:   addr_t reg_addr

 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
800008f4:	00051503          	lh	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:113
    ret
800008f8:	00008067          	ret

800008fc <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:126
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
800008fc:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:127
    sll t3, t3, a1
80000900:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:128
    and  t3, t3, a2
80000904:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:129
    lh t1, 0(a0)
80000908:	00051303          	lh	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:130
    mv t2, a2
8000090c:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:131
    not t2, t2
80000910:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:132
    and t1, t1, t2
80000914:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:133
    or t1, t1, t3
80000918:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:134
    sh t1, 0(a0)
8000091c:	00651023          	sh	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:135
    ret
80000920:	00008067          	ret

80000924 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:149
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000924:	00051503          	lh	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:150
    and a0, a0, a2
80000928:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:151
    srl a0, a0, a1
8000092c:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:152
    ret
80000930:	00008067          	ret

80000934 <HW_set_8bit_reg>:
HW_set_8bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:162
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000934:	00b50023          	sb	a1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:163
    ret
80000938:	00008067          	ret

8000093c <HW_get_8bit_reg>:
HW_get_8bit_reg():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:174
 * a0:   addr_t reg_addr

 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000093c:	00050503          	lb	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:175
    ret
80000940:	00008067          	ret

80000944 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:187
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000944:	00068e13          	mv	t3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:188
    sll t3, t3, a1
80000948:	00be1e33          	sll	t3,t3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:189
    and  t3, t3, a2
8000094c:	00ce7e33          	and	t3,t3,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:190
    lb t1, 0(a0)
80000950:	00050303          	lb	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:191
    mv t2, a2
80000954:	00060393          	mv	t2,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:192
    not t2, t2
80000958:	fff3c393          	not	t2,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:193
    and t1, t1, t2
8000095c:	00737333          	and	t1,t1,t2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:194
    or t1, t1, t3
80000960:	01c36333          	or	t1,t1,t3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:195
    sb t1, 0(a0)
80000964:	00650023          	sb	t1,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:196
    ret
80000968:	00008067          	ret

8000096c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:210
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000096c:	00050503          	lb	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:211
    and a0, a0, a2
80000970:	00c57533          	and	a0,a0,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:212
    srl a0, a0, a1
80000974:	00b55533          	srl	a0,a0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/hal/hw_reg_access.S:213
    ret
80000978:	00008067          	ret

8000097c <UART_init>:
UART_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
8000097c:	0a050463          	beqz	a0,80000a24 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80000980:	00700793          	li	a5,7
80000984:	0ad7e063          	bltu	a5,a3,80000a24 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80000988:	000027b7          	lui	a5,0x2
8000098c:	08f67c63          	bgeu	a2,a5,80000a24 <UART_init+0xa8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:46
{
80000990:	fe010113          	addi	sp,sp,-32
80000994:	00812c23          	sw	s0,24(sp)
80000998:	01212823          	sw	s2,16(sp)
8000099c:	00060413          	mv	s0,a2
800009a0:	00058913          	mv	s2,a1
800009a4:	00912a23          	sw	s1,20(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800009a8:	0ff67593          	andi	a1,a2,255
800009ac:	00050493          	mv	s1,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800009b0:	40545413          	srai	s0,s0,0x5
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800009b4:	00890513          	addi	a0,s2,8
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:46
{
800009b8:	00112e23          	sw	ra,28(sp)
800009bc:	01312623          	sw	s3,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800009c0:	7f847413          	andi	s0,s0,2040
800009c4:	00068993          	mv	s3,a3
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:60
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800009c8:	f6dff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:67
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800009cc:	00c90513          	addi	a0,s2,12
800009d0:	013465b3          	or	a1,s0,s3
800009d4:	f61ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800009d8:	01090513          	addi	a0,s2,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:71
        this_uart->base_address = base_addr;
800009dc:	0124a023          	sw	s2,0(s1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:99
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800009e0:	f5dff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
800009e4:	00257513          	andi	a0,a0,2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
800009e8:	02051263          	bnez	a0,80000a0c <UART_init+0x90>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800009ec:	00048223          	sb	zero,4(s1)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:108
    }
}
800009f0:	01c12083          	lw	ra,28(sp)
800009f4:	01812403          	lw	s0,24(sp)
800009f8:	01412483          	lw	s1,20(sp)
800009fc:	01012903          	lw	s2,16(sp)
80000a00:	00c12983          	lw	s3,12(sp)
80000a04:	02010113          	addi	sp,sp,32
80000a08:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:98
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80000a0c:	0004a503          	lw	a0,0(s1)
80000a10:	00450513          	addi	a0,a0,4
80000a14:	f29ff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000a18:	0004a503          	lw	a0,0(s1)
80000a1c:	01050513          	addi	a0,a0,16
80000a20:	fc1ff06f          	j	800009e0 <UART_init+0x64>
80000a24:	00008067          	ret

80000a28 <UART_get_rx>:
UART_get_rx():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:199
(
    UART_instance_t * this_uart,
    uint8_t * rx_buffer,
    size_t buff_size
)
{
80000a28:	fe010113          	addi	sp,sp,-32
80000a2c:	00112e23          	sw	ra,28(sp)
80000a30:	00812c23          	sw	s0,24(sp)
80000a34:	00912a23          	sw	s1,20(sp)
80000a38:	01212823          	sw	s2,16(sp)
80000a3c:	01312623          	sw	s3,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:208
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( rx_buffer != NULL_BUFFER )
    HAL_ASSERT( buff_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80000a40:	08050c63          	beqz	a0,80000ad8 <UART_get_rx+0xb0>
80000a44:	00058993          	mv	s3,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:208 (discriminator 1)
80000a48:	08058863          	beqz	a1,80000ad8 <UART_get_rx+0xb0>
80000a4c:	00060493          	mv	s1,a2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:209
        (rx_buffer != NULL_BUFFER)   &&
80000a50:	02060863          	beqz	a2,80000a80 <UART_get_rx+0x58>
80000a54:	00050413          	mv	s0,a0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:213
        (buff_size > 0u) )
    {
        rx_idx = 0u;
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80000a58:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:212
        rx_idx = 0u;
80000a5c:	00000913          	li	s2,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:213
        new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80000a60:	01050513          	addi	a0,a0,16
80000a64:	ed9ff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:214
        this_uart->status |= new_status;
80000a68:	00444783          	lbu	a5,4(s0)
80000a6c:	00f567b3          	or	a5,a0,a5
80000a70:	00f40223          	sb	a5,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:215
        rx_full = new_status & STATUS_RXFULL_MASK;
80000a74:	00257513          	andi	a0,a0,2
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:216
        while ( ( rx_full ) && ( rx_idx < buff_size ) )
80000a78:	06050463          	beqz	a0,80000ae0 <UART_get_rx+0xb8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:216 (discriminator 1)
80000a7c:	02991263          	bne	s2,s1,80000aa0 <UART_get_rx+0x78>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:227
            this_uart->status |= new_status;
            rx_full = new_status & STATUS_RXFULL_MASK;
        }
    }
    return rx_idx;
}
80000a80:	01c12083          	lw	ra,28(sp)
80000a84:	01812403          	lw	s0,24(sp)
80000a88:	00048513          	mv	a0,s1
80000a8c:	01012903          	lw	s2,16(sp)
80000a90:	01412483          	lw	s1,20(sp)
80000a94:	00c12983          	lw	s3,12(sp)
80000a98:	02010113          	addi	sp,sp,32
80000a9c:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:218
            rx_buffer[rx_idx] = HAL_get_8bit_reg( this_uart->base_address,
80000aa0:	00042503          	lw	a0,0(s0)
80000aa4:	00450513          	addi	a0,a0,4
80000aa8:	e95ff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
80000aac:	012987b3          	add	a5,s3,s2
80000ab0:	00a78023          	sb	a0,0(a5) # 2000 <STACK_SIZE+0x1800>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:221
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80000ab4:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:220
            rx_idx++;
80000ab8:	00190913          	addi	s2,s2,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:221
            new_status = HAL_get_8bit_reg( this_uart->base_address, STATUS );
80000abc:	01050513          	addi	a0,a0,16
80000ac0:	e7dff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:222
            this_uart->status |= new_status;
80000ac4:	00444783          	lbu	a5,4(s0)
80000ac8:	00f567b3          	or	a5,a0,a5
80000acc:	00f40223          	sb	a5,4(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:223
            rx_full = new_status & STATUS_RXFULL_MASK;
80000ad0:	00257513          	andi	a0,a0,2
80000ad4:	fa5ff06f          	j	80000a78 <UART_get_rx+0x50>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:202
    size_t rx_idx = 0u;
80000ad8:	00000493          	li	s1,0
80000adc:	fa5ff06f          	j	80000a80 <UART_get_rx+0x58>
80000ae0:	00090493          	mv	s1,s2
80000ae4:	f9dff06f          	j	80000a80 <UART_get_rx+0x58>

80000ae8 <UART_polled_tx_string>:
UART_polled_tx_string():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80000ae8:	06050263          	beqz	a0,80000b4c <UART_polled_tx_string+0x64>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80000aec:	06058063          	beqz	a1,80000b4c <UART_polled_tx_string+0x64>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:239
{
80000af0:	ff010113          	addi	sp,sp,-16
80000af4:	00812423          	sw	s0,8(sp)
80000af8:	00912223          	sw	s1,4(sp)
80000afc:	00112623          	sw	ra,12(sp)
80000b00:	00050493          	mv	s1,a0
80000b04:	00058413          	mv	s0,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:249
    {
        char_idx = 0U;
        while( 0U != p_sz_string[char_idx] )
80000b08:	00044783          	lbu	a5,0(s0)
80000b0c:	00079c63          	bnez	a5,80000b24 <UART_polled_tx_string+0x3c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:262
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
        }
    }
}
80000b10:	00c12083          	lw	ra,12(sp)
80000b14:	00812403          	lw	s0,8(sp)
80000b18:	00412483          	lw	s1,4(sp)
80000b1c:	01010113          	addi	sp,sp,16
80000b20:	00008067          	ret
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000b24:	0004a503          	lw	a0,0(s1)
80000b28:	01050513          	addi	a0,a0,16
80000b2c:	e11ff0ef          	jal	ra,8000093c <HW_get_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
            } while ( !tx_ready );
80000b30:	00157513          	andi	a0,a0,1
80000b34:	fe0508e3          	beqz	a0,80000b24 <UART_polled_tx_string+0x3c>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:257
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80000b38:	00044583          	lbu	a1,0(s0)
80000b3c:	0004a503          	lw	a0,0(s1)
80000b40:	00140413          	addi	s0,s0,1
80000b44:	df1ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreUARTapb/core_uart_apb.c:259
            char_idx++;
80000b48:	fc1ff06f          	j	80000b08 <UART_polled_tx_string+0x20>
80000b4c:	00008067          	ret

80000b50 <GPIO_init>:
GPIO_init():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:37
(
    gpio_instance_t *   this_gpio,
    addr_t              base_addr,
    gpio_apb_width_t    bus_width
)
{
80000b50:	ff010113          	addi	sp,sp,-16
80000b54:	00812423          	sw	s0,8(sp)
80000b58:	00050413          	mv	s0,a0
80000b5c:	00912223          	sw	s1,4(sp)
80000b60:	01212023          	sw	s2,0(sp)
80000b64:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:41
    uint8_t i = 0;
    addr_t cfg_reg_addr = base_addr;
    
    this_gpio->base_addr = base_addr;
80000b68:	00b42023          	sw	a1,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:37
{
80000b6c:	00058493          	mv	s1,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:42
    this_gpio->apb_bus_width = bus_width;
80000b70:	00c52223          	sw	a2,4(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:45
    
    /* Clear configuration. */
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
80000b74:	08058913          	addi	s2,a1,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:47 (discriminator 3)
    {
        HW_set_8bit_reg( cfg_reg_addr, 0 );
80000b78:	00048513          	mv	a0,s1
80000b7c:	00000593          	li	a1,0
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:48 (discriminator 3)
        cfg_reg_addr += 4;
80000b80:	00448493          	addi	s1,s1,4
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:47 (discriminator 3)
        HW_set_8bit_reg( cfg_reg_addr, 0 );
80000b84:	db1ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:45 (discriminator 3)
    for( i = 0, cfg_reg_addr = base_addr; i < NB_OF_GPIO; ++i )
80000b88:	ff2498e3          	bne	s1,s2,80000b78 <GPIO_init+0x28>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:51
    }
    /* Clear any pending interrupts */
    switch( this_gpio->apb_bus_width )
80000b8c:	00442783          	lw	a5,4(s0)
80000b90:	00100713          	li	a4,1
80000b94:	02e78a63          	beq	a5,a4,80000bc8 <GPIO_init+0x78>
80000b98:	06078463          	beqz	a5,80000c00 <GPIO_init+0xb0>
80000b9c:	00200713          	li	a4,2
80000ba0:	0ae79a63          	bne	a5,a4,80000c54 <GPIO_init+0x104>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
80000ba4:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
            
        default:
            HAL_ASSERT(0);
            break;
    }
}
80000ba8:	00812403          	lw	s0,8(sp)
80000bac:	00c12083          	lw	ra,12(sp)
80000bb0:	00412483          	lw	s1,4(sp)
80000bb4:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
80000bb8:	fff00593          	li	a1,-1
80000bbc:	08050513          	addi	a0,a0,128
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000bc0:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:54
            HAL_set_32bit_reg( this_gpio->base_addr, IRQ, CLEAR_ALL_IRQ32 );
80000bc4:	ce1ff06f          	j	800008a4 <HW_set_32bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:58
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ0, (uint16_t)CLEAR_ALL_IRQ16 );
80000bc8:	00042503          	lw	a0,0(s0)
80000bcc:	000104b7          	lui	s1,0x10
80000bd0:	fff48593          	addi	a1,s1,-1 # ffff <STACK_SIZE+0xf7ff>
80000bd4:	08050513          	addi	a0,a0,128
80000bd8:	d15ff0ef          	jal	ra,800008ec <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
80000bdc:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000be0:	00812403          	lw	s0,8(sp)
80000be4:	00c12083          	lw	ra,12(sp)
80000be8:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
80000bec:	fff48593          	addi	a1,s1,-1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000bf0:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
80000bf4:	08450513          	addi	a0,a0,132
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000bf8:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:59
            HAL_set_16bit_reg( this_gpio->base_addr, IRQ1, (uint16_t)CLEAR_ALL_IRQ16 );
80000bfc:	cf1ff06f          	j	800008ec <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:63
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ0, (uint8_t)CLEAR_ALL_IRQ8 );
80000c00:	00042503          	lw	a0,0(s0)
80000c04:	0ff00593          	li	a1,255
80000c08:	08050513          	addi	a0,a0,128
80000c0c:	d29ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:64
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ1, (uint8_t)CLEAR_ALL_IRQ8 );
80000c10:	00042503          	lw	a0,0(s0)
80000c14:	0ff00593          	li	a1,255
80000c18:	08450513          	addi	a0,a0,132
80000c1c:	d19ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:65
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ2, (uint8_t)CLEAR_ALL_IRQ8 );
80000c20:	00042503          	lw	a0,0(s0)
80000c24:	0ff00593          	li	a1,255
80000c28:	08850513          	addi	a0,a0,136
80000c2c:	d09ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80000c30:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000c34:	00812403          	lw	s0,8(sp)
80000c38:	00c12083          	lw	ra,12(sp)
80000c3c:	00412483          	lw	s1,4(sp)
80000c40:	00012903          	lw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80000c44:	0ff00593          	li	a1,255
80000c48:	08c50513          	addi	a0,a0,140
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000c4c:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:66
            HAL_set_8bit_reg( this_gpio->base_addr, IRQ3, (uint8_t)CLEAR_ALL_IRQ8 );
80000c50:	ce5ff06f          	j	80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:73
}
80000c54:	00c12083          	lw	ra,12(sp)
80000c58:	00812403          	lw	s0,8(sp)
80000c5c:	00412483          	lw	s1,4(sp)
80000c60:	00012903          	lw	s2,0(sp)
80000c64:	01010113          	addi	sp,sp,16
80000c68:	00008067          	ret

80000c6c <GPIO_set_outputs>:
GPIO_set_outputs():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
(
    gpio_instance_t *   this_gpio,
    uint32_t            value
)
{
    switch( this_gpio->apb_bus_width )
80000c6c:	00452783          	lw	a5,4(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:114
{
80000c70:	ff010113          	addi	sp,sp,-16
80000c74:	00812423          	sw	s0,8(sp)
80000c78:	00912223          	sw	s1,4(sp)
80000c7c:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
    switch( this_gpio->apb_bus_width )
80000c80:	00100713          	li	a4,1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:114
{
80000c84:	00050413          	mv	s0,a0
80000c88:	00058493          	mv	s1,a1
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:115
    switch( this_gpio->apb_bus_width )
80000c8c:	02e78663          	beq	a5,a4,80000cb8 <GPIO_set_outputs+0x4c>
80000c90:	04078e63          	beqz	a5,80000cec <GPIO_set_outputs+0x80>
80000c94:	00200713          	li	a4,2
80000c98:	0ae79663          	bne	a5,a4,80000d44 <GPIO_set_outputs+0xd8>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
    {
        case GPIO_APB_32_BITS_BUS:
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80000c9c:	00052503          	lw	a0,0(a0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
     * the number of GPIOs selected in the CoreGPIO hardware flow configuration.
     * It may also indicate that the base address or APB bus width passed as
     * parameter to the GPIO_init() function do not match the hardware design.
     */
    HAL_ASSERT( GPIO_get_outputs( this_gpio ) == value );
}
80000ca0:	00812403          	lw	s0,8(sp)
80000ca4:	00c12083          	lw	ra,12(sp)
80000ca8:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80000cac:	0a050513          	addi	a0,a0,160
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000cb0:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:118
            HAL_set_32bit_reg( this_gpio->base_addr, GPIO_OUT, value );
80000cb4:	bf1ff06f          	j	800008a4 <HW_set_32bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:122
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint16_t)value );
80000cb8:	00052503          	lw	a0,0(a0)
80000cbc:	01059593          	slli	a1,a1,0x10
80000cc0:	0105d593          	srli	a1,a1,0x10
80000cc4:	0a050513          	addi	a0,a0,160
80000cc8:	c25ff0ef          	jal	ra,800008ec <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
80000ccc:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000cd0:	00812403          	lw	s0,8(sp)
80000cd4:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
80000cd8:	0104d593          	srli	a1,s1,0x10
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000cdc:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
80000ce0:	0a450513          	addi	a0,a0,164
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000ce4:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:123
            HAL_set_16bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint16_t)(value >> 16) );
80000ce8:	c05ff06f          	j	800008ec <HW_set_16bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:127
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT0, (uint8_t)value );
80000cec:	00052503          	lw	a0,0(a0)
80000cf0:	0ff5f593          	andi	a1,a1,255
80000cf4:	0a050513          	addi	a0,a0,160
80000cf8:	c3dff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:128
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT1, (uint8_t)(value >> 8) );
80000cfc:	00042503          	lw	a0,0(s0)
80000d00:	0084d593          	srli	a1,s1,0x8
80000d04:	0ff5f593          	andi	a1,a1,255
80000d08:	0a450513          	addi	a0,a0,164
80000d0c:	c29ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:129
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT2, (uint8_t)(value >> 16) );
80000d10:	00042503          	lw	a0,0(s0)
80000d14:	0104d593          	srli	a1,s1,0x10
80000d18:	0ff5f593          	andi	a1,a1,255
80000d1c:	0a850513          	addi	a0,a0,168
80000d20:	c15ff0ef          	jal	ra,80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80000d24:	00042503          	lw	a0,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000d28:	00812403          	lw	s0,8(sp)
80000d2c:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80000d30:	0184d593          	srli	a1,s1,0x18
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000d34:	00412483          	lw	s1,4(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80000d38:	0ac50513          	addi	a0,a0,172
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000d3c:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:130
            HAL_set_8bit_reg( this_gpio->base_addr, GPIO_OUT3, (uint8_t)(value >> 24) );
80000d40:	bf5ff06f          	j	80000934 <HW_set_8bit_reg>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/platform/drivers/fpga_ip/CoreGPIO/core_gpio.c:146
}
80000d44:	00c12083          	lw	ra,12(sp)
80000d48:	00812403          	lw	s0,8(sp)
80000d4c:	00412483          	lw	s1,4(sp)
80000d50:	01010113          	addi	sp,sp,16
80000d54:	00008067          	ret

80000d58 <Software_IRQHandler>:
MRV_clear_soft_irq():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\src\platform/miv_rv32_hal/miv_rv32_hal.h:732
  This function does not return any value.
 */
static inline void MRV_clear_soft_irq(void)
{
#ifdef MIV_LEGACY_RV32
    MSIP = 0x00u;   /* clear soft interrupt */
80000d58:	440007b7          	lui	a5,0x44000
80000d5c:	0007a023          	sw	zero,0(a5) # 44000000 <STACK_SIZE+0x43fff800>
Software_IRQHandler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:45
 * in miv_rv32_stubs.c.
 */
void Software_IRQHandler()
{
    MRV_clear_soft_irq();
}
80000d60:	00008067          	ret

80000d64 <SysTick_Handler>:
SysTick_Handler():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:54
 * Toggles the LEDs on the board through the GPIO and counts the number of Ticks
 * that have occured and prints the interrupt count in message on the UART.
 */

void SysTick_Handler(void)
{
80000d64:	ff010113          	addi	sp,sp,-16
80000d68:	00812423          	sw	s0,8(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:56
    static uint32_t interrupt_counter = 0;
    interrupt_counter++;
80000d6c:	88418413          	addi	s0,gp,-1916 # 80002c04 <interrupt_counter.3033>
80000d70:	00042783          	lw	a5,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:54
{
80000d74:	00112623          	sw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:59
    static volatile uint32_t val = 0u;
    val ^= 0xFu;
    GPIO_set_outputs(&g_gpio_out, val);
80000d78:	8e018513          	addi	a0,gp,-1824 # 80002c60 <g_gpio_out>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:56
    interrupt_counter++;
80000d7c:	00178793          	addi	a5,a5,1
80000d80:	00f42023          	sw	a5,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:58
    val ^= 0xFu;
80000d84:	88818793          	addi	a5,gp,-1912 # 80002c08 <val.3034>
80000d88:	0007a703          	lw	a4,0(a5)
80000d8c:	00f74713          	xori	a4,a4,15
80000d90:	00e7a023          	sw	a4,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:59
    GPIO_set_outputs(&g_gpio_out, val);
80000d94:	0007a583          	lw	a1,0(a5)
80000d98:	ed5ff0ef          	jal	ra,80000c6c <GPIO_set_outputs>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
80000d9c:	00042583          	lw	a1,0(s0)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:61
}
80000da0:	00812403          	lw	s0,8(sp)
80000da4:	00c12083          	lw	ra,12(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
80000da8:	00002517          	auipc	a0,0x2
80000dac:	b8850513          	addi	a0,a0,-1144 # 80002930 <mrv_ext_irq_handler_table+0x80>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:61
}
80000db0:	01010113          	addi	sp,sp,16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:60
    printf("\r\nInternal System Timer Interrupt Counter = %d", interrupt_counter);
80000db4:	0c80006f          	j	80000e7c <iprintf>

80000db8 <main>:
main():
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:67

/*-------------------------------------------------------------------------//**
  main() function.
*/
int main(void)
{
80000db8:	ff010113          	addi	sp,sp,-16
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:72
    uint8_t rx_char;
    uint8_t rx_count;
    uint32_t switches;

    UART_init(&g_uart,
80000dbc:	00100693          	li	a3,1
80000dc0:	01a00613          	li	a2,26
80000dc4:	700015b7          	lui	a1,0x70001
80000dc8:	8e818513          	addi	a0,gp,-1816 # 80002c68 <g_uart>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:67
{
80000dcc:	00112623          	sw	ra,12(sp)
80000dd0:	00812423          	sw	s0,8(sp)
80000dd4:	00912223          	sw	s1,4(sp)
80000dd8:	01212023          	sw	s2,0(sp)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:72
    UART_init(&g_uart,
80000ddc:	ba1ff0ef          	jal	ra,8000097c <UART_init>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:77
              COREUARTAPB0_BASE_ADDR,
              BAUD_VALUE_115200,
              (DATA_8_BITS | NO_PARITY));

    printf(g_hello_msg);
80000de0:	00002797          	auipc	a5,0x2
80000de4:	da478793          	addi	a5,a5,-604 # 80002b84 <g_hello_msg>
80000de8:	0007a503          	lw	a0,0(a5)
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:114
    /**************************************************************************
    * Loop
    *************************************************************************/
    do
    {
        g_rx_size = UART_get_rx(&g_uart, g_rx_buff, sizeof(g_rx_buff));
80000dec:	8a018493          	addi	s1,gp,-1888 # 80002c20 <__sbss_end>
80000df0:	8e818413          	addi	s0,gp,-1816 # 80002c68 <g_uart>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:77
    printf(g_hello_msg);
80000df4:	088000ef          	jal	ra,80000e7c <iprintf>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:80
    GPIO_init(&g_gpio_out, COREGPIO_OUT_BASE_ADDR, GPIO_APB_32_BITS_BUS);
80000df8:	00200613          	li	a2,2
80000dfc:	700055b7          	lui	a1,0x70005
80000e00:	8e018513          	addi	a0,gp,-1824 # 80002c60 <g_gpio_out>
80000e04:	d4dff0ef          	jal	ra,80000b50 <GPIO_init>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:98
    GPIO_set_outputs(&g_gpio_out, 0x0u);
80000e08:	00000593          	li	a1,0
80000e0c:	8e018513          	addi	a0,gp,-1824 # 80002c60 <g_gpio_out>
80000e10:	e5dff0ef          	jal	ra,80000c6c <GPIO_set_outputs>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:101
    HAL_enable_interrupts();
80000e14:	a89ff0ef          	jal	ra,8000089c <HAL_enable_interrupts>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:107
    MRV_systick_config(SYS_CLK_FREQ);
80000e18:	02faf537          	lui	a0,0x2faf
80000e1c:	08050513          	addi	a0,a0,128 # 2faf080 <STACK_SIZE+0x2fae880>
80000e20:	00000593          	li	a1,0
80000e24:	e58ff0ef          	jal	ra,8000047c <MRV_systick_config>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:114
        g_rx_size = UART_get_rx(&g_uart, g_rx_buff, sizeof(g_rx_buff));
80000e28:	88018913          	addi	s2,gp,-1920 # 80002c00 <g_rx_size>
80000e2c:	04000613          	li	a2,64
80000e30:	8a018593          	addi	a1,gp,-1888 # 80002c20 <__sbss_end>
80000e34:	00040513          	mv	a0,s0
80000e38:	bf1ff0ef          	jal	ra,80000a28 <UART_get_rx>
80000e3c:	88a18023          	sb	a0,-1920(gp) # 80002c00 <g_rx_size>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:116

        if (g_rx_size > 0u)
80000e40:	00094783          	lbu	a5,0(s2)
80000e44:	0ff7f793          	andi	a5,a5,255
80000e48:	fe0782e3          	beqz	a5,80000e2c <main+0x74>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:119
        {
            /* Echo the characters received from the terminal */
            UART_polled_tx_string(&g_uart, (const uint8_t *)g_rx_buff);
80000e4c:	00048593          	mv	a1,s1
80000e50:	00040513          	mv	a0,s0
80000e54:	c95ff0ef          	jal	ra,80000ae8 <UART_polled_tx_string>
C:\Microchip\SoftConsole-v2022.2-RISC-V-747\extras\workspace.examples\miv-rv32i-systick-blinky\miv32ima-Release/../src/application/main.c:120
            g_rx_size = 0u;
80000e58:	88018023          	sb	zero,-1920(gp) # 80002c00 <g_rx_size>
80000e5c:	fd1ff06f          	j	80000e2c <main+0x74>

80000e60 <memset>:
memset():
80000e60:	00050313          	mv	t1,a0
80000e64:	00060a63          	beqz	a2,80000e78 <memset+0x18>
80000e68:	00b30023          	sb	a1,0(t1)
80000e6c:	fff60613          	addi	a2,a2,-1
80000e70:	00130313          	addi	t1,t1,1
80000e74:	fe061ae3          	bnez	a2,80000e68 <memset+0x8>
80000e78:	00008067          	ret

80000e7c <iprintf>:
printf():
80000e7c:	fc010113          	addi	sp,sp,-64
80000e80:	02f12a23          	sw	a5,52(sp)
80000e84:	02b12223          	sw	a1,36(sp)
80000e88:	02c12423          	sw	a2,40(sp)
80000e8c:	02d12623          	sw	a3,44(sp)
80000e90:	02e12823          	sw	a4,48(sp)
80000e94:	03012c23          	sw	a6,56(sp)
80000e98:	03112e23          	sw	a7,60(sp)
80000e9c:	00002797          	auipc	a5,0x2
80000ea0:	cec78793          	addi	a5,a5,-788 # 80002b88 <_impure_ptr>
80000ea4:	00812c23          	sw	s0,24(sp)
80000ea8:	0007a403          	lw	s0,0(a5)
80000eac:	00912a23          	sw	s1,20(sp)
80000eb0:	00112e23          	sw	ra,28(sp)
80000eb4:	00050493          	mv	s1,a0
80000eb8:	00040a63          	beqz	s0,80000ecc <iprintf+0x50>
80000ebc:	01842783          	lw	a5,24(s0)
80000ec0:	00079663          	bnez	a5,80000ecc <iprintf+0x50>
80000ec4:	00040513          	mv	a0,s0
80000ec8:	180000ef          	jal	ra,80001048 <__sinit>
80000ecc:	00842583          	lw	a1,8(s0)
80000ed0:	02410693          	addi	a3,sp,36
80000ed4:	00048613          	mv	a2,s1
80000ed8:	00040513          	mv	a0,s0
80000edc:	00d12623          	sw	a3,12(sp)
80000ee0:	5bc000ef          	jal	ra,8000149c <_vfiprintf_r>
80000ee4:	01c12083          	lw	ra,28(sp)
80000ee8:	01812403          	lw	s0,24(sp)
80000eec:	01412483          	lw	s1,20(sp)
80000ef0:	04010113          	addi	sp,sp,64
80000ef4:	00008067          	ret

80000ef8 <isatty>:
isatty():
80000ef8:	941ff06f          	j	80000838 <_isatty>

80000efc <_write_r>:
_write_r():
80000efc:	ff010113          	addi	sp,sp,-16
80000f00:	00812423          	sw	s0,8(sp)
80000f04:	00050413          	mv	s0,a0
80000f08:	00058513          	mv	a0,a1
80000f0c:	00060593          	mv	a1,a2
80000f10:	00068613          	mv	a2,a3
80000f14:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
80000f18:	00112623          	sw	ra,12(sp)
80000f1c:	979ff0ef          	jal	ra,80000894 <_write>
80000f20:	fff00793          	li	a5,-1
80000f24:	00f51a63          	bne	a0,a5,80000f38 <_write_r+0x3c>
80000f28:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80000f2c:	0007a783          	lw	a5,0(a5)
80000f30:	00078463          	beqz	a5,80000f38 <_write_r+0x3c>
80000f34:	00f42023          	sw	a5,0(s0)
80000f38:	00c12083          	lw	ra,12(sp)
80000f3c:	00812403          	lw	s0,8(sp)
80000f40:	01010113          	addi	sp,sp,16
80000f44:	00008067          	ret

80000f48 <std>:
std():
80000f48:	ff010113          	addi	sp,sp,-16
80000f4c:	00812423          	sw	s0,8(sp)
80000f50:	00112623          	sw	ra,12(sp)
80000f54:	00050413          	mv	s0,a0
80000f58:	00b51623          	sh	a1,12(a0)
80000f5c:	00c51723          	sh	a2,14(a0)
80000f60:	00052023          	sw	zero,0(a0)
80000f64:	00052223          	sw	zero,4(a0)
80000f68:	00052423          	sw	zero,8(a0)
80000f6c:	06052223          	sw	zero,100(a0)
80000f70:	00052823          	sw	zero,16(a0)
80000f74:	00052a23          	sw	zero,20(a0)
80000f78:	00052c23          	sw	zero,24(a0)
80000f7c:	00800613          	li	a2,8
80000f80:	00000593          	li	a1,0
80000f84:	05c50513          	addi	a0,a0,92
80000f88:	ed9ff0ef          	jal	ra,80000e60 <memset>
80000f8c:	00001797          	auipc	a5,0x1
80000f90:	e9878793          	addi	a5,a5,-360 # 80001e24 <__sread>
80000f94:	02f42223          	sw	a5,36(s0)
80000f98:	00001797          	auipc	a5,0x1
80000f9c:	edc78793          	addi	a5,a5,-292 # 80001e74 <__swrite>
80000fa0:	02f42423          	sw	a5,40(s0)
80000fa4:	00001797          	auipc	a5,0x1
80000fa8:	f5478793          	addi	a5,a5,-172 # 80001ef8 <__sseek>
80000fac:	02f42623          	sw	a5,44(s0)
80000fb0:	00001797          	auipc	a5,0x1
80000fb4:	fa078793          	addi	a5,a5,-96 # 80001f50 <__sclose>
80000fb8:	02842023          	sw	s0,32(s0)
80000fbc:	02f42823          	sw	a5,48(s0)
80000fc0:	00c12083          	lw	ra,12(sp)
80000fc4:	00812403          	lw	s0,8(sp)
80000fc8:	01010113          	addi	sp,sp,16
80000fcc:	00008067          	ret

80000fd0 <_cleanup_r>:
_cleanup_r():
80000fd0:	00001597          	auipc	a1,0x1
80000fd4:	47058593          	addi	a1,a1,1136 # 80002440 <_fflush_r>
80000fd8:	2140006f          	j	800011ec <_fwalk_reent>

80000fdc <__sfmoreglue>:
__sfmoreglue():
80000fdc:	ff010113          	addi	sp,sp,-16
80000fe0:	00912223          	sw	s1,4(sp)
80000fe4:	06800613          	li	a2,104
80000fe8:	fff58493          	addi	s1,a1,-1
80000fec:	02c484b3          	mul	s1,s1,a2
80000ff0:	01212023          	sw	s2,0(sp)
80000ff4:	00058913          	mv	s2,a1
80000ff8:	00812423          	sw	s0,8(sp)
80000ffc:	00112623          	sw	ra,12(sp)
80001000:	07448593          	addi	a1,s1,116
80001004:	29c000ef          	jal	ra,800012a0 <_malloc_r>
80001008:	00050413          	mv	s0,a0
8000100c:	02050063          	beqz	a0,8000102c <__sfmoreglue+0x50>
80001010:	00052023          	sw	zero,0(a0)
80001014:	01252223          	sw	s2,4(a0)
80001018:	00c50513          	addi	a0,a0,12
8000101c:	00a42423          	sw	a0,8(s0)
80001020:	06848613          	addi	a2,s1,104
80001024:	00000593          	li	a1,0
80001028:	e39ff0ef          	jal	ra,80000e60 <memset>
8000102c:	00040513          	mv	a0,s0
80001030:	00c12083          	lw	ra,12(sp)
80001034:	00812403          	lw	s0,8(sp)
80001038:	00412483          	lw	s1,4(sp)
8000103c:	00012903          	lw	s2,0(sp)
80001040:	01010113          	addi	sp,sp,16
80001044:	00008067          	ret

80001048 <__sinit>:
__sinit():
80001048:	01852783          	lw	a5,24(a0)
8000104c:	0a079663          	bnez	a5,800010f8 <__sinit+0xb0>
80001050:	ff010113          	addi	sp,sp,-16
80001054:	00112623          	sw	ra,12(sp)
80001058:	00812423          	sw	s0,8(sp)
8000105c:	00000797          	auipc	a5,0x0
80001060:	f7478793          	addi	a5,a5,-140 # 80000fd0 <_cleanup_r>
80001064:	02f52423          	sw	a5,40(a0)
80001068:	00002797          	auipc	a5,0x2
8000106c:	b0878793          	addi	a5,a5,-1272 # 80002b70 <_global_impure_ptr>
80001070:	0007a783          	lw	a5,0(a5)
80001074:	04052423          	sw	zero,72(a0)
80001078:	04052623          	sw	zero,76(a0)
8000107c:	04052823          	sw	zero,80(a0)
80001080:	00f51663          	bne	a0,a5,8000108c <__sinit+0x44>
80001084:	00100793          	li	a5,1
80001088:	00f52c23          	sw	a5,24(a0)
8000108c:	00050413          	mv	s0,a0
80001090:	06c000ef          	jal	ra,800010fc <__sfp>
80001094:	00a42223          	sw	a0,4(s0)
80001098:	00040513          	mv	a0,s0
8000109c:	060000ef          	jal	ra,800010fc <__sfp>
800010a0:	00a42423          	sw	a0,8(s0)
800010a4:	00040513          	mv	a0,s0
800010a8:	054000ef          	jal	ra,800010fc <__sfp>
800010ac:	00a42623          	sw	a0,12(s0)
800010b0:	00442503          	lw	a0,4(s0)
800010b4:	00000613          	li	a2,0
800010b8:	00400593          	li	a1,4
800010bc:	e8dff0ef          	jal	ra,80000f48 <std>
800010c0:	00842503          	lw	a0,8(s0)
800010c4:	00100613          	li	a2,1
800010c8:	00900593          	li	a1,9
800010cc:	e7dff0ef          	jal	ra,80000f48 <std>
800010d0:	00c42503          	lw	a0,12(s0)
800010d4:	00200613          	li	a2,2
800010d8:	01200593          	li	a1,18
800010dc:	e6dff0ef          	jal	ra,80000f48 <std>
800010e0:	00100793          	li	a5,1
800010e4:	00f42c23          	sw	a5,24(s0)
800010e8:	00c12083          	lw	ra,12(sp)
800010ec:	00812403          	lw	s0,8(sp)
800010f0:	01010113          	addi	sp,sp,16
800010f4:	00008067          	ret
800010f8:	00008067          	ret

800010fc <__sfp>:
__sfp():
800010fc:	ff010113          	addi	sp,sp,-16
80001100:	00002797          	auipc	a5,0x2
80001104:	a7078793          	addi	a5,a5,-1424 # 80002b70 <_global_impure_ptr>
80001108:	00912223          	sw	s1,4(sp)
8000110c:	0007a483          	lw	s1,0(a5)
80001110:	01212023          	sw	s2,0(sp)
80001114:	00112623          	sw	ra,12(sp)
80001118:	0184a783          	lw	a5,24(s1)
8000111c:	00812423          	sw	s0,8(sp)
80001120:	00050913          	mv	s2,a0
80001124:	00079663          	bnez	a5,80001130 <__sfp+0x34>
80001128:	00048513          	mv	a0,s1
8000112c:	f1dff0ef          	jal	ra,80001048 <__sinit>
80001130:	04848493          	addi	s1,s1,72
80001134:	0084a403          	lw	s0,8(s1)
80001138:	0044a783          	lw	a5,4(s1)
8000113c:	fff78793          	addi	a5,a5,-1
80001140:	0007da63          	bgez	a5,80001154 <__sfp+0x58>
80001144:	0004a783          	lw	a5,0(s1)
80001148:	08078063          	beqz	a5,800011c8 <__sfp+0xcc>
8000114c:	0004a483          	lw	s1,0(s1)
80001150:	fe5ff06f          	j	80001134 <__sfp+0x38>
80001154:	00c41703          	lh	a4,12(s0)
80001158:	06071463          	bnez	a4,800011c0 <__sfp+0xc4>
8000115c:	ffff07b7          	lui	a5,0xffff0
80001160:	00178793          	addi	a5,a5,1 # ffff0001 <__stack_top+0x7ffec781>
80001164:	06042223          	sw	zero,100(s0)
80001168:	00042023          	sw	zero,0(s0)
8000116c:	00042223          	sw	zero,4(s0)
80001170:	00042423          	sw	zero,8(s0)
80001174:	00f42623          	sw	a5,12(s0)
80001178:	00042823          	sw	zero,16(s0)
8000117c:	00042a23          	sw	zero,20(s0)
80001180:	00042c23          	sw	zero,24(s0)
80001184:	00800613          	li	a2,8
80001188:	00000593          	li	a1,0
8000118c:	05c40513          	addi	a0,s0,92
80001190:	cd1ff0ef          	jal	ra,80000e60 <memset>
80001194:	02042a23          	sw	zero,52(s0)
80001198:	02042c23          	sw	zero,56(s0)
8000119c:	04042423          	sw	zero,72(s0)
800011a0:	04042623          	sw	zero,76(s0)
800011a4:	00040513          	mv	a0,s0
800011a8:	00c12083          	lw	ra,12(sp)
800011ac:	00812403          	lw	s0,8(sp)
800011b0:	00412483          	lw	s1,4(sp)
800011b4:	00012903          	lw	s2,0(sp)
800011b8:	01010113          	addi	sp,sp,16
800011bc:	00008067          	ret
800011c0:	06840413          	addi	s0,s0,104
800011c4:	f79ff06f          	j	8000113c <__sfp+0x40>
800011c8:	00400593          	li	a1,4
800011cc:	00090513          	mv	a0,s2
800011d0:	e0dff0ef          	jal	ra,80000fdc <__sfmoreglue>
800011d4:	00a4a023          	sw	a0,0(s1)
800011d8:	00050413          	mv	s0,a0
800011dc:	f60518e3          	bnez	a0,8000114c <__sfp+0x50>
800011e0:	00c00793          	li	a5,12
800011e4:	00f92023          	sw	a5,0(s2)
800011e8:	fbdff06f          	j	800011a4 <__sfp+0xa8>

800011ec <_fwalk_reent>:
_fwalk_reent():
800011ec:	fd010113          	addi	sp,sp,-48
800011f0:	02812423          	sw	s0,40(sp)
800011f4:	03212023          	sw	s2,32(sp)
800011f8:	01412c23          	sw	s4,24(sp)
800011fc:	01512a23          	sw	s5,20(sp)
80001200:	01612823          	sw	s6,16(sp)
80001204:	01712623          	sw	s7,12(sp)
80001208:	02112623          	sw	ra,44(sp)
8000120c:	02912223          	sw	s1,36(sp)
80001210:	01312e23          	sw	s3,28(sp)
80001214:	00050a13          	mv	s4,a0
80001218:	00058a93          	mv	s5,a1
8000121c:	04850413          	addi	s0,a0,72
80001220:	00000913          	li	s2,0
80001224:	00100b13          	li	s6,1
80001228:	fff00b93          	li	s7,-1
8000122c:	02041a63          	bnez	s0,80001260 <_fwalk_reent+0x74>
80001230:	02c12083          	lw	ra,44(sp)
80001234:	02812403          	lw	s0,40(sp)
80001238:	00090513          	mv	a0,s2
8000123c:	02412483          	lw	s1,36(sp)
80001240:	02012903          	lw	s2,32(sp)
80001244:	01c12983          	lw	s3,28(sp)
80001248:	01812a03          	lw	s4,24(sp)
8000124c:	01412a83          	lw	s5,20(sp)
80001250:	01012b03          	lw	s6,16(sp)
80001254:	00c12b83          	lw	s7,12(sp)
80001258:	03010113          	addi	sp,sp,48
8000125c:	00008067          	ret
80001260:	00842483          	lw	s1,8(s0)
80001264:	00442983          	lw	s3,4(s0)
80001268:	fff98993          	addi	s3,s3,-1
8000126c:	0009d663          	bgez	s3,80001278 <_fwalk_reent+0x8c>
80001270:	00042403          	lw	s0,0(s0)
80001274:	fb9ff06f          	j	8000122c <_fwalk_reent+0x40>
80001278:	00c4d783          	lhu	a5,12(s1)
8000127c:	00fb7e63          	bgeu	s6,a5,80001298 <_fwalk_reent+0xac>
80001280:	00e49783          	lh	a5,14(s1)
80001284:	01778a63          	beq	a5,s7,80001298 <_fwalk_reent+0xac>
80001288:	00048593          	mv	a1,s1
8000128c:	000a0513          	mv	a0,s4
80001290:	000a80e7          	jalr	s5
80001294:	00a96933          	or	s2,s2,a0
80001298:	06848493          	addi	s1,s1,104
8000129c:	fcdff06f          	j	80001268 <_fwalk_reent+0x7c>

800012a0 <_malloc_r>:
_malloc_r():
800012a0:	fe010113          	addi	sp,sp,-32
800012a4:	00912a23          	sw	s1,20(sp)
800012a8:	00358493          	addi	s1,a1,3
800012ac:	ffc4f493          	andi	s1,s1,-4
800012b0:	00112e23          	sw	ra,28(sp)
800012b4:	00812c23          	sw	s0,24(sp)
800012b8:	01212823          	sw	s2,16(sp)
800012bc:	01312623          	sw	s3,12(sp)
800012c0:	00848493          	addi	s1,s1,8
800012c4:	00c00793          	li	a5,12
800012c8:	06f4f463          	bgeu	s1,a5,80001330 <_malloc_r+0x90>
800012cc:	00c00493          	li	s1,12
800012d0:	06b4e263          	bltu	s1,a1,80001334 <_malloc_r+0x94>
800012d4:	00050913          	mv	s2,a0
800012d8:	3f4010ef          	jal	ra,800026cc <__malloc_lock>
800012dc:	88c18793          	addi	a5,gp,-1908 # 80002c0c <__malloc_free_list>
800012e0:	0007a703          	lw	a4,0(a5)
800012e4:	00070413          	mv	s0,a4
800012e8:	06041a63          	bnez	s0,8000135c <_malloc_r+0xbc>
800012ec:	89018793          	addi	a5,gp,-1904 # 80002c10 <__malloc_sbrk_start>
800012f0:	0007a783          	lw	a5,0(a5)
800012f4:	00079a63          	bnez	a5,80001308 <_malloc_r+0x68>
800012f8:	00000593          	li	a1,0
800012fc:	00090513          	mv	a0,s2
80001300:	2e1000ef          	jal	ra,80001de0 <_sbrk_r>
80001304:	88a1a823          	sw	a0,-1904(gp) # 80002c10 <__malloc_sbrk_start>
80001308:	00048593          	mv	a1,s1
8000130c:	00090513          	mv	a0,s2
80001310:	2d1000ef          	jal	ra,80001de0 <_sbrk_r>
80001314:	fff00993          	li	s3,-1
80001318:	0b351a63          	bne	a0,s3,800013cc <_malloc_r+0x12c>
8000131c:	00c00793          	li	a5,12
80001320:	00f92023          	sw	a5,0(s2)
80001324:	00090513          	mv	a0,s2
80001328:	3a8010ef          	jal	ra,800026d0 <__malloc_unlock>
8000132c:	0100006f          	j	8000133c <_malloc_r+0x9c>
80001330:	fa04d0e3          	bgez	s1,800012d0 <_malloc_r+0x30>
80001334:	00c00793          	li	a5,12
80001338:	00f52023          	sw	a5,0(a0)
8000133c:	00000513          	li	a0,0
80001340:	01c12083          	lw	ra,28(sp)
80001344:	01812403          	lw	s0,24(sp)
80001348:	01412483          	lw	s1,20(sp)
8000134c:	01012903          	lw	s2,16(sp)
80001350:	00c12983          	lw	s3,12(sp)
80001354:	02010113          	addi	sp,sp,32
80001358:	00008067          	ret
8000135c:	00042783          	lw	a5,0(s0)
80001360:	409787b3          	sub	a5,a5,s1
80001364:	0407ce63          	bltz	a5,800013c0 <_malloc_r+0x120>
80001368:	00b00693          	li	a3,11
8000136c:	00f6fa63          	bgeu	a3,a5,80001380 <_malloc_r+0xe0>
80001370:	00f42023          	sw	a5,0(s0)
80001374:	00f40433          	add	s0,s0,a5
80001378:	00942023          	sw	s1,0(s0)
8000137c:	0100006f          	j	8000138c <_malloc_r+0xec>
80001380:	00442783          	lw	a5,4(s0)
80001384:	02871a63          	bne	a4,s0,800013b8 <_malloc_r+0x118>
80001388:	88f1a623          	sw	a5,-1908(gp) # 80002c0c <__malloc_free_list>
8000138c:	00090513          	mv	a0,s2
80001390:	340010ef          	jal	ra,800026d0 <__malloc_unlock>
80001394:	00b40513          	addi	a0,s0,11
80001398:	00440793          	addi	a5,s0,4
8000139c:	ff857513          	andi	a0,a0,-8
800013a0:	40f50733          	sub	a4,a0,a5
800013a4:	f8070ee3          	beqz	a4,80001340 <_malloc_r+0xa0>
800013a8:	00e40433          	add	s0,s0,a4
800013ac:	40a787b3          	sub	a5,a5,a0
800013b0:	00f42023          	sw	a5,0(s0)
800013b4:	f8dff06f          	j	80001340 <_malloc_r+0xa0>
800013b8:	00f72223          	sw	a5,4(a4)
800013bc:	fd1ff06f          	j	8000138c <_malloc_r+0xec>
800013c0:	00040713          	mv	a4,s0
800013c4:	00442403          	lw	s0,4(s0)
800013c8:	f21ff06f          	j	800012e8 <_malloc_r+0x48>
800013cc:	00350413          	addi	s0,a0,3
800013d0:	ffc47413          	andi	s0,s0,-4
800013d4:	fa8502e3          	beq	a0,s0,80001378 <_malloc_r+0xd8>
800013d8:	40a405b3          	sub	a1,s0,a0
800013dc:	00090513          	mv	a0,s2
800013e0:	201000ef          	jal	ra,80001de0 <_sbrk_r>
800013e4:	f9351ae3          	bne	a0,s3,80001378 <_malloc_r+0xd8>
800013e8:	f35ff06f          	j	8000131c <_malloc_r+0x7c>

800013ec <__sfputc_r>:
__sfputc_r():
800013ec:	00862783          	lw	a5,8(a2)
800013f0:	fff78793          	addi	a5,a5,-1
800013f4:	00f62423          	sw	a5,8(a2)
800013f8:	0007dc63          	bgez	a5,80001410 <__sfputc_r+0x24>
800013fc:	01862703          	lw	a4,24(a2)
80001400:	00e7c663          	blt	a5,a4,8000140c <__sfputc_r+0x20>
80001404:	00a00793          	li	a5,10
80001408:	00f59463          	bne	a1,a5,80001410 <__sfputc_r+0x24>
8000140c:	34d0006f          	j	80001f58 <__swbuf_r>
80001410:	00062783          	lw	a5,0(a2)
80001414:	00058513          	mv	a0,a1
80001418:	00178713          	addi	a4,a5,1
8000141c:	00e62023          	sw	a4,0(a2)
80001420:	00b78023          	sb	a1,0(a5)
80001424:	00008067          	ret

80001428 <__sfputs_r>:
__sfputs_r():
80001428:	fe010113          	addi	sp,sp,-32
8000142c:	00812c23          	sw	s0,24(sp)
80001430:	00912a23          	sw	s1,20(sp)
80001434:	01212823          	sw	s2,16(sp)
80001438:	01312623          	sw	s3,12(sp)
8000143c:	01412423          	sw	s4,8(sp)
80001440:	00112e23          	sw	ra,28(sp)
80001444:	00050913          	mv	s2,a0
80001448:	00058993          	mv	s3,a1
8000144c:	00060413          	mv	s0,a2
80001450:	00d604b3          	add	s1,a2,a3
80001454:	fff00a13          	li	s4,-1
80001458:	00941663          	bne	s0,s1,80001464 <__sfputs_r+0x3c>
8000145c:	00000513          	li	a0,0
80001460:	01c0006f          	j	8000147c <__sfputs_r+0x54>
80001464:	00044583          	lbu	a1,0(s0)
80001468:	00098613          	mv	a2,s3
8000146c:	00090513          	mv	a0,s2
80001470:	f7dff0ef          	jal	ra,800013ec <__sfputc_r>
80001474:	00140413          	addi	s0,s0,1
80001478:	ff4510e3          	bne	a0,s4,80001458 <__sfputs_r+0x30>
8000147c:	01c12083          	lw	ra,28(sp)
80001480:	01812403          	lw	s0,24(sp)
80001484:	01412483          	lw	s1,20(sp)
80001488:	01012903          	lw	s2,16(sp)
8000148c:	00c12983          	lw	s3,12(sp)
80001490:	00812a03          	lw	s4,8(sp)
80001494:	02010113          	addi	sp,sp,32
80001498:	00008067          	ret

8000149c <_vfiprintf_r>:
_vfiprintf_r():
8000149c:	f6010113          	addi	sp,sp,-160
800014a0:	08812c23          	sw	s0,152(sp)
800014a4:	08912a23          	sw	s1,148(sp)
800014a8:	09212823          	sw	s2,144(sp)
800014ac:	09312623          	sw	s3,140(sp)
800014b0:	08112e23          	sw	ra,156(sp)
800014b4:	09412423          	sw	s4,136(sp)
800014b8:	09512223          	sw	s5,132(sp)
800014bc:	09612023          	sw	s6,128(sp)
800014c0:	07712e23          	sw	s7,124(sp)
800014c4:	07812c23          	sw	s8,120(sp)
800014c8:	07912a23          	sw	s9,116(sp)
800014cc:	00050993          	mv	s3,a0
800014d0:	00058493          	mv	s1,a1
800014d4:	00060913          	mv	s2,a2
800014d8:	00068413          	mv	s0,a3
800014dc:	00050863          	beqz	a0,800014ec <_vfiprintf_r+0x50>
800014e0:	01852783          	lw	a5,24(a0)
800014e4:	00079463          	bnez	a5,800014ec <_vfiprintf_r+0x50>
800014e8:	b61ff0ef          	jal	ra,80001048 <__sinit>
800014ec:	00001797          	auipc	a5,0x1
800014f0:	60078793          	addi	a5,a5,1536 # 80002aec <__sf_fake_stdin>
800014f4:	12f49263          	bne	s1,a5,80001618 <_vfiprintf_r+0x17c>
800014f8:	0049a483          	lw	s1,4(s3)
800014fc:	00c4d783          	lhu	a5,12(s1)
80001500:	0087f793          	andi	a5,a5,8
80001504:	12078e63          	beqz	a5,80001640 <_vfiprintf_r+0x1a4>
80001508:	0104a783          	lw	a5,16(s1)
8000150c:	12078a63          	beqz	a5,80001640 <_vfiprintf_r+0x1a4>
80001510:	02000793          	li	a5,32
80001514:	02f104a3          	sb	a5,41(sp)
80001518:	03000793          	li	a5,48
8000151c:	02012223          	sw	zero,36(sp)
80001520:	02f10523          	sb	a5,42(sp)
80001524:	00812623          	sw	s0,12(sp)
80001528:	02500b93          	li	s7,37
8000152c:	00001a97          	auipc	s5,0x1
80001530:	600a8a93          	addi	s5,s5,1536 # 80002b2c <__sf_fake_stdout+0x20>
80001534:	00100c13          	li	s8,1
80001538:	00a00b13          	li	s6,10
8000153c:	00090413          	mv	s0,s2
80001540:	00044783          	lbu	a5,0(s0)
80001544:	00078463          	beqz	a5,8000154c <_vfiprintf_r+0xb0>
80001548:	15779063          	bne	a5,s7,80001688 <_vfiprintf_r+0x1ec>
8000154c:	41240cb3          	sub	s9,s0,s2
80001550:	020c8663          	beqz	s9,8000157c <_vfiprintf_r+0xe0>
80001554:	000c8693          	mv	a3,s9
80001558:	00090613          	mv	a2,s2
8000155c:	00048593          	mv	a1,s1
80001560:	00098513          	mv	a0,s3
80001564:	ec5ff0ef          	jal	ra,80001428 <__sfputs_r>
80001568:	fff00793          	li	a5,-1
8000156c:	2cf50263          	beq	a0,a5,80001830 <_vfiprintf_r+0x394>
80001570:	02412683          	lw	a3,36(sp)
80001574:	019686b3          	add	a3,a3,s9
80001578:	02d12223          	sw	a3,36(sp)
8000157c:	00044783          	lbu	a5,0(s0)
80001580:	2a078863          	beqz	a5,80001830 <_vfiprintf_r+0x394>
80001584:	fff00793          	li	a5,-1
80001588:	00140913          	addi	s2,s0,1
8000158c:	00012823          	sw	zero,16(sp)
80001590:	00012e23          	sw	zero,28(sp)
80001594:	00f12a23          	sw	a5,20(sp)
80001598:	00012c23          	sw	zero,24(sp)
8000159c:	040109a3          	sb	zero,83(sp)
800015a0:	06012423          	sw	zero,104(sp)
800015a4:	00094583          	lbu	a1,0(s2)
800015a8:	00500613          	li	a2,5
800015ac:	000a8513          	mv	a0,s5
800015b0:	0f8010ef          	jal	ra,800026a8 <memchr>
800015b4:	00190413          	addi	s0,s2,1
800015b8:	01012783          	lw	a5,16(sp)
800015bc:	0c051a63          	bnez	a0,80001690 <_vfiprintf_r+0x1f4>
800015c0:	0107f713          	andi	a4,a5,16
800015c4:	00070663          	beqz	a4,800015d0 <_vfiprintf_r+0x134>
800015c8:	02000713          	li	a4,32
800015cc:	04e109a3          	sb	a4,83(sp)
800015d0:	0087f713          	andi	a4,a5,8
800015d4:	00070663          	beqz	a4,800015e0 <_vfiprintf_r+0x144>
800015d8:	02b00713          	li	a4,43
800015dc:	04e109a3          	sb	a4,83(sp)
800015e0:	00094683          	lbu	a3,0(s2)
800015e4:	02a00713          	li	a4,42
800015e8:	0ce68063          	beq	a3,a4,800016a8 <_vfiprintf_r+0x20c>
800015ec:	01c12783          	lw	a5,28(sp)
800015f0:	00090413          	mv	s0,s2
800015f4:	00000693          	li	a3,0
800015f8:	00900613          	li	a2,9
800015fc:	00044703          	lbu	a4,0(s0)
80001600:	00140593          	addi	a1,s0,1
80001604:	fd070713          	addi	a4,a4,-48
80001608:	10e67263          	bgeu	a2,a4,8000170c <_vfiprintf_r+0x270>
8000160c:	0a068a63          	beqz	a3,800016c0 <_vfiprintf_r+0x224>
80001610:	00f12e23          	sw	a5,28(sp)
80001614:	0ac0006f          	j	800016c0 <_vfiprintf_r+0x224>
80001618:	00001797          	auipc	a5,0x1
8000161c:	4f478793          	addi	a5,a5,1268 # 80002b0c <__sf_fake_stdout>
80001620:	00f49663          	bne	s1,a5,8000162c <_vfiprintf_r+0x190>
80001624:	0089a483          	lw	s1,8(s3)
80001628:	ed5ff06f          	j	800014fc <_vfiprintf_r+0x60>
8000162c:	00001797          	auipc	a5,0x1
80001630:	4a078793          	addi	a5,a5,1184 # 80002acc <__sf_fake_stderr>
80001634:	ecf494e3          	bne	s1,a5,800014fc <_vfiprintf_r+0x60>
80001638:	00c9a483          	lw	s1,12(s3)
8000163c:	ec1ff06f          	j	800014fc <_vfiprintf_r+0x60>
80001640:	00048593          	mv	a1,s1
80001644:	00098513          	mv	a0,s3
80001648:	249000ef          	jal	ra,80002090 <__swsetup_r>
8000164c:	ec0502e3          	beqz	a0,80001510 <_vfiprintf_r+0x74>
80001650:	fff00513          	li	a0,-1
80001654:	09c12083          	lw	ra,156(sp)
80001658:	09812403          	lw	s0,152(sp)
8000165c:	09412483          	lw	s1,148(sp)
80001660:	09012903          	lw	s2,144(sp)
80001664:	08c12983          	lw	s3,140(sp)
80001668:	08812a03          	lw	s4,136(sp)
8000166c:	08412a83          	lw	s5,132(sp)
80001670:	08012b03          	lw	s6,128(sp)
80001674:	07c12b83          	lw	s7,124(sp)
80001678:	07812c03          	lw	s8,120(sp)
8000167c:	07412c83          	lw	s9,116(sp)
80001680:	0a010113          	addi	sp,sp,160
80001684:	00008067          	ret
80001688:	00140413          	addi	s0,s0,1
8000168c:	eb5ff06f          	j	80001540 <_vfiprintf_r+0xa4>
80001690:	41550533          	sub	a0,a0,s5
80001694:	00ac1533          	sll	a0,s8,a0
80001698:	00a7e7b3          	or	a5,a5,a0
8000169c:	00f12823          	sw	a5,16(sp)
800016a0:	00040913          	mv	s2,s0
800016a4:	f01ff06f          	j	800015a4 <_vfiprintf_r+0x108>
800016a8:	00c12703          	lw	a4,12(sp)
800016ac:	00470693          	addi	a3,a4,4
800016b0:	00072703          	lw	a4,0(a4)
800016b4:	00d12623          	sw	a3,12(sp)
800016b8:	04074063          	bltz	a4,800016f8 <_vfiprintf_r+0x25c>
800016bc:	00e12e23          	sw	a4,28(sp)
800016c0:	00044703          	lbu	a4,0(s0)
800016c4:	02e00793          	li	a5,46
800016c8:	08f71463          	bne	a4,a5,80001750 <_vfiprintf_r+0x2b4>
800016cc:	00144703          	lbu	a4,1(s0)
800016d0:	02a00793          	li	a5,42
800016d4:	04f71a63          	bne	a4,a5,80001728 <_vfiprintf_r+0x28c>
800016d8:	00c12783          	lw	a5,12(sp)
800016dc:	00240413          	addi	s0,s0,2
800016e0:	00478713          	addi	a4,a5,4
800016e4:	0007a783          	lw	a5,0(a5)
800016e8:	00e12623          	sw	a4,12(sp)
800016ec:	0207ca63          	bltz	a5,80001720 <_vfiprintf_r+0x284>
800016f0:	00f12a23          	sw	a5,20(sp)
800016f4:	05c0006f          	j	80001750 <_vfiprintf_r+0x2b4>
800016f8:	40e00733          	neg	a4,a4
800016fc:	0027e793          	ori	a5,a5,2
80001700:	00e12e23          	sw	a4,28(sp)
80001704:	00f12823          	sw	a5,16(sp)
80001708:	fb9ff06f          	j	800016c0 <_vfiprintf_r+0x224>
8000170c:	036787b3          	mul	a5,a5,s6
80001710:	00100693          	li	a3,1
80001714:	00058413          	mv	s0,a1
80001718:	00e787b3          	add	a5,a5,a4
8000171c:	ee1ff06f          	j	800015fc <_vfiprintf_r+0x160>
80001720:	fff00793          	li	a5,-1
80001724:	fcdff06f          	j	800016f0 <_vfiprintf_r+0x254>
80001728:	00140413          	addi	s0,s0,1
8000172c:	00012a23          	sw	zero,20(sp)
80001730:	00000693          	li	a3,0
80001734:	00000793          	li	a5,0
80001738:	00900613          	li	a2,9
8000173c:	00044703          	lbu	a4,0(s0)
80001740:	00140593          	addi	a1,s0,1
80001744:	fd070713          	addi	a4,a4,-48
80001748:	08e67c63          	bgeu	a2,a4,800017e0 <_vfiprintf_r+0x344>
8000174c:	fa0692e3          	bnez	a3,800016f0 <_vfiprintf_r+0x254>
80001750:	00044583          	lbu	a1,0(s0)
80001754:	00300613          	li	a2,3
80001758:	00001517          	auipc	a0,0x1
8000175c:	3dc50513          	addi	a0,a0,988 # 80002b34 <__sf_fake_stdout+0x28>
80001760:	749000ef          	jal	ra,800026a8 <memchr>
80001764:	02050463          	beqz	a0,8000178c <_vfiprintf_r+0x2f0>
80001768:	00001797          	auipc	a5,0x1
8000176c:	3cc78793          	addi	a5,a5,972 # 80002b34 <__sf_fake_stdout+0x28>
80001770:	40f50533          	sub	a0,a0,a5
80001774:	04000793          	li	a5,64
80001778:	00a797b3          	sll	a5,a5,a0
8000177c:	01012503          	lw	a0,16(sp)
80001780:	00140413          	addi	s0,s0,1
80001784:	00f56533          	or	a0,a0,a5
80001788:	00a12823          	sw	a0,16(sp)
8000178c:	00044583          	lbu	a1,0(s0)
80001790:	00600613          	li	a2,6
80001794:	00001517          	auipc	a0,0x1
80001798:	3a450513          	addi	a0,a0,932 # 80002b38 <__sf_fake_stdout+0x2c>
8000179c:	00140913          	addi	s2,s0,1
800017a0:	02b10423          	sb	a1,40(sp)
800017a4:	705000ef          	jal	ra,800026a8 <memchr>
800017a8:	08050e63          	beqz	a0,80001844 <_vfiprintf_r+0x3a8>
800017ac:	7ffff797          	auipc	a5,0x7ffff
800017b0:	85478793          	addi	a5,a5,-1964 # 0 <__stack_top+0x7fffc780>
800017b4:	04079863          	bnez	a5,80001804 <_vfiprintf_r+0x368>
800017b8:	01012703          	lw	a4,16(sp)
800017bc:	00c12783          	lw	a5,12(sp)
800017c0:	10077713          	andi	a4,a4,256
800017c4:	02070863          	beqz	a4,800017f4 <_vfiprintf_r+0x358>
800017c8:	00478793          	addi	a5,a5,4
800017cc:	00f12623          	sw	a5,12(sp)
800017d0:	02412783          	lw	a5,36(sp)
800017d4:	014787b3          	add	a5,a5,s4
800017d8:	02f12223          	sw	a5,36(sp)
800017dc:	d61ff06f          	j	8000153c <_vfiprintf_r+0xa0>
800017e0:	036787b3          	mul	a5,a5,s6
800017e4:	00100693          	li	a3,1
800017e8:	00058413          	mv	s0,a1
800017ec:	00e787b3          	add	a5,a5,a4
800017f0:	f4dff06f          	j	8000173c <_vfiprintf_r+0x2a0>
800017f4:	00778793          	addi	a5,a5,7
800017f8:	ff87f793          	andi	a5,a5,-8
800017fc:	00878793          	addi	a5,a5,8
80001800:	fcdff06f          	j	800017cc <_vfiprintf_r+0x330>
80001804:	00c10713          	addi	a4,sp,12
80001808:	00000697          	auipc	a3,0x0
8000180c:	c2068693          	addi	a3,a3,-992 # 80001428 <__sfputs_r>
80001810:	00048613          	mv	a2,s1
80001814:	01010593          	addi	a1,sp,16
80001818:	00098513          	mv	a0,s3
8000181c:	00000097          	auipc	ra,0x0
80001820:	000000e7          	jalr	zero # 0 <HEAP_SIZE-0x400>
80001824:	fff00793          	li	a5,-1
80001828:	00050a13          	mv	s4,a0
8000182c:	faf512e3          	bne	a0,a5,800017d0 <_vfiprintf_r+0x334>
80001830:	00c4d783          	lhu	a5,12(s1)
80001834:	0407f793          	andi	a5,a5,64
80001838:	e0079ce3          	bnez	a5,80001650 <_vfiprintf_r+0x1b4>
8000183c:	02412503          	lw	a0,36(sp)
80001840:	e15ff06f          	j	80001654 <_vfiprintf_r+0x1b8>
80001844:	00c10713          	addi	a4,sp,12
80001848:	00000697          	auipc	a3,0x0
8000184c:	be068693          	addi	a3,a3,-1056 # 80001428 <__sfputs_r>
80001850:	00048613          	mv	a2,s1
80001854:	01010593          	addi	a1,sp,16
80001858:	00098513          	mv	a0,s3
8000185c:	1b8000ef          	jal	ra,80001a14 <_printf_i>
80001860:	fc5ff06f          	j	80001824 <_vfiprintf_r+0x388>

80001864 <_printf_common>:
_printf_common():
80001864:	fd010113          	addi	sp,sp,-48
80001868:	01512a23          	sw	s5,20(sp)
8000186c:	0105a783          	lw	a5,16(a1)
80001870:	00070a93          	mv	s5,a4
80001874:	0085a703          	lw	a4,8(a1)
80001878:	02812423          	sw	s0,40(sp)
8000187c:	02912223          	sw	s1,36(sp)
80001880:	01312e23          	sw	s3,28(sp)
80001884:	01412c23          	sw	s4,24(sp)
80001888:	02112623          	sw	ra,44(sp)
8000188c:	03212023          	sw	s2,32(sp)
80001890:	01612823          	sw	s6,16(sp)
80001894:	01712623          	sw	s7,12(sp)
80001898:	00050993          	mv	s3,a0
8000189c:	00058413          	mv	s0,a1
800018a0:	00060493          	mv	s1,a2
800018a4:	00068a13          	mv	s4,a3
800018a8:	00e7d463          	bge	a5,a4,800018b0 <_printf_common+0x4c>
800018ac:	00070793          	mv	a5,a4
800018b0:	00f4a023          	sw	a5,0(s1)
800018b4:	04344703          	lbu	a4,67(s0)
800018b8:	00070663          	beqz	a4,800018c4 <_printf_common+0x60>
800018bc:	00178793          	addi	a5,a5,1
800018c0:	00f4a023          	sw	a5,0(s1)
800018c4:	00042783          	lw	a5,0(s0)
800018c8:	0207f793          	andi	a5,a5,32
800018cc:	00078863          	beqz	a5,800018dc <_printf_common+0x78>
800018d0:	0004a783          	lw	a5,0(s1)
800018d4:	00278793          	addi	a5,a5,2
800018d8:	00f4a023          	sw	a5,0(s1)
800018dc:	00042903          	lw	s2,0(s0)
800018e0:	00697913          	andi	s2,s2,6
800018e4:	00091e63          	bnez	s2,80001900 <_printf_common+0x9c>
800018e8:	01940b13          	addi	s6,s0,25
800018ec:	fff00b93          	li	s7,-1
800018f0:	00c42783          	lw	a5,12(s0)
800018f4:	0004a703          	lw	a4,0(s1)
800018f8:	40e787b3          	sub	a5,a5,a4
800018fc:	08f94263          	blt	s2,a5,80001980 <_printf_common+0x11c>
80001900:	00042783          	lw	a5,0(s0)
80001904:	04344683          	lbu	a3,67(s0)
80001908:	0207f793          	andi	a5,a5,32
8000190c:	00d036b3          	snez	a3,a3
80001910:	0c079063          	bnez	a5,800019d0 <_printf_common+0x16c>
80001914:	04340613          	addi	a2,s0,67
80001918:	000a0593          	mv	a1,s4
8000191c:	00098513          	mv	a0,s3
80001920:	000a80e7          	jalr	s5
80001924:	fff00793          	li	a5,-1
80001928:	06f50863          	beq	a0,a5,80001998 <_printf_common+0x134>
8000192c:	00042783          	lw	a5,0(s0)
80001930:	00400613          	li	a2,4
80001934:	0004a703          	lw	a4,0(s1)
80001938:	0067f793          	andi	a5,a5,6
8000193c:	00c42683          	lw	a3,12(s0)
80001940:	00000493          	li	s1,0
80001944:	00c79863          	bne	a5,a2,80001954 <_printf_common+0xf0>
80001948:	40e684b3          	sub	s1,a3,a4
8000194c:	0004d463          	bgez	s1,80001954 <_printf_common+0xf0>
80001950:	00000493          	li	s1,0
80001954:	00842783          	lw	a5,8(s0)
80001958:	01042703          	lw	a4,16(s0)
8000195c:	00f75663          	bge	a4,a5,80001968 <_printf_common+0x104>
80001960:	40e787b3          	sub	a5,a5,a4
80001964:	00f484b3          	add	s1,s1,a5
80001968:	00000913          	li	s2,0
8000196c:	01a40413          	addi	s0,s0,26
80001970:	fff00b13          	li	s6,-1
80001974:	09249063          	bne	s1,s2,800019f4 <_printf_common+0x190>
80001978:	00000513          	li	a0,0
8000197c:	0200006f          	j	8000199c <_printf_common+0x138>
80001980:	00100693          	li	a3,1
80001984:	000b0613          	mv	a2,s6
80001988:	000a0593          	mv	a1,s4
8000198c:	00098513          	mv	a0,s3
80001990:	000a80e7          	jalr	s5
80001994:	03751a63          	bne	a0,s7,800019c8 <_printf_common+0x164>
80001998:	fff00513          	li	a0,-1
8000199c:	02c12083          	lw	ra,44(sp)
800019a0:	02812403          	lw	s0,40(sp)
800019a4:	02412483          	lw	s1,36(sp)
800019a8:	02012903          	lw	s2,32(sp)
800019ac:	01c12983          	lw	s3,28(sp)
800019b0:	01812a03          	lw	s4,24(sp)
800019b4:	01412a83          	lw	s5,20(sp)
800019b8:	01012b03          	lw	s6,16(sp)
800019bc:	00c12b83          	lw	s7,12(sp)
800019c0:	03010113          	addi	sp,sp,48
800019c4:	00008067          	ret
800019c8:	00190913          	addi	s2,s2,1
800019cc:	f25ff06f          	j	800018f0 <_printf_common+0x8c>
800019d0:	00d40733          	add	a4,s0,a3
800019d4:	03000613          	li	a2,48
800019d8:	04c701a3          	sb	a2,67(a4)
800019dc:	04544703          	lbu	a4,69(s0)
800019e0:	00168793          	addi	a5,a3,1
800019e4:	00f407b3          	add	a5,s0,a5
800019e8:	00268693          	addi	a3,a3,2
800019ec:	04e781a3          	sb	a4,67(a5)
800019f0:	f25ff06f          	j	80001914 <_printf_common+0xb0>
800019f4:	00100693          	li	a3,1
800019f8:	00040613          	mv	a2,s0
800019fc:	000a0593          	mv	a1,s4
80001a00:	00098513          	mv	a0,s3
80001a04:	000a80e7          	jalr	s5
80001a08:	f96508e3          	beq	a0,s6,80001998 <_printf_common+0x134>
80001a0c:	00190913          	addi	s2,s2,1
80001a10:	f65ff06f          	j	80001974 <_printf_common+0x110>

80001a14 <_printf_i>:
_printf_i():
80001a14:	fd010113          	addi	sp,sp,-48
80001a18:	02812423          	sw	s0,40(sp)
80001a1c:	02912223          	sw	s1,36(sp)
80001a20:	03212023          	sw	s2,32(sp)
80001a24:	01312e23          	sw	s3,28(sp)
80001a28:	02112623          	sw	ra,44(sp)
80001a2c:	01412c23          	sw	s4,24(sp)
80001a30:	01512a23          	sw	s5,20(sp)
80001a34:	01612823          	sw	s6,16(sp)
80001a38:	00068993          	mv	s3,a3
80001a3c:	0185c683          	lbu	a3,24(a1)
80001a40:	06e00793          	li	a5,110
80001a44:	00060913          	mv	s2,a2
80001a48:	00050493          	mv	s1,a0
80001a4c:	00058413          	mv	s0,a1
80001a50:	04358613          	addi	a2,a1,67
80001a54:	28f68863          	beq	a3,a5,80001ce4 <_printf_i+0x2d0>
80001a58:	06d7ea63          	bltu	a5,a3,80001acc <_printf_i+0xb8>
80001a5c:	06300793          	li	a5,99
80001a60:	0af68e63          	beq	a3,a5,80001b1c <_printf_i+0x108>
80001a64:	00d7ee63          	bltu	a5,a3,80001a80 <_printf_i+0x6c>
80001a68:	2a068c63          	beqz	a3,80001d20 <_printf_i+0x30c>
80001a6c:	05800793          	li	a5,88
80001a70:	1ef68a63          	beq	a3,a5,80001c64 <_printf_i+0x250>
80001a74:	04240a93          	addi	s5,s0,66
80001a78:	04d40123          	sb	a3,66(s0)
80001a7c:	0b80006f          	j	80001b34 <_printf_i+0x120>
80001a80:	06400793          	li	a5,100
80001a84:	00f68663          	beq	a3,a5,80001a90 <_printf_i+0x7c>
80001a88:	06900793          	li	a5,105
80001a8c:	fef694e3          	bne	a3,a5,80001a74 <_printf_i+0x60>
80001a90:	00042783          	lw	a5,0(s0)
80001a94:	00072503          	lw	a0,0(a4)
80001a98:	0807f693          	andi	a3,a5,128
80001a9c:	00450593          	addi	a1,a0,4
80001aa0:	08068e63          	beqz	a3,80001b3c <_printf_i+0x128>
80001aa4:	00052783          	lw	a5,0(a0)
80001aa8:	00b72023          	sw	a1,0(a4)
80001aac:	0007d863          	bgez	a5,80001abc <_printf_i+0xa8>
80001ab0:	02d00713          	li	a4,45
80001ab4:	40f007b3          	neg	a5,a5
80001ab8:	04e401a3          	sb	a4,67(s0)
80001abc:	00001697          	auipc	a3,0x1
80001ac0:	08468693          	addi	a3,a3,132 # 80002b40 <__sf_fake_stdout+0x34>
80001ac4:	00a00713          	li	a4,10
80001ac8:	0d80006f          	j	80001ba0 <_printf_i+0x18c>
80001acc:	07300793          	li	a5,115
80001ad0:	24f68e63          	beq	a3,a5,80001d2c <_printf_i+0x318>
80001ad4:	02d7e263          	bltu	a5,a3,80001af8 <_printf_i+0xe4>
80001ad8:	06f00793          	li	a5,111
80001adc:	06f68e63          	beq	a3,a5,80001b58 <_printf_i+0x144>
80001ae0:	07000793          	li	a5,112
80001ae4:	f8f698e3          	bne	a3,a5,80001a74 <_printf_i+0x60>
80001ae8:	0005a783          	lw	a5,0(a1)
80001aec:	0207e793          	ori	a5,a5,32
80001af0:	00f5a023          	sw	a5,0(a1)
80001af4:	0140006f          	j	80001b08 <_printf_i+0xf4>
80001af8:	07500793          	li	a5,117
80001afc:	04f68e63          	beq	a3,a5,80001b58 <_printf_i+0x144>
80001b00:	07800793          	li	a5,120
80001b04:	f6f698e3          	bne	a3,a5,80001a74 <_printf_i+0x60>
80001b08:	07800793          	li	a5,120
80001b0c:	04f402a3          	sb	a5,69(s0)
80001b10:	00001697          	auipc	a3,0x1
80001b14:	04468693          	addi	a3,a3,68 # 80002b54 <__sf_fake_stdout+0x48>
80001b18:	1580006f          	j	80001c70 <_printf_i+0x25c>
80001b1c:	00072783          	lw	a5,0(a4)
80001b20:	04258a93          	addi	s5,a1,66
80001b24:	00478693          	addi	a3,a5,4
80001b28:	0007a783          	lw	a5,0(a5)
80001b2c:	00d72023          	sw	a3,0(a4)
80001b30:	04f58123          	sb	a5,66(a1)
80001b34:	00100793          	li	a5,1
80001b38:	2240006f          	j	80001d5c <_printf_i+0x348>
80001b3c:	0407f693          	andi	a3,a5,64
80001b40:	00052783          	lw	a5,0(a0)
80001b44:	00b72023          	sw	a1,0(a4)
80001b48:	f60682e3          	beqz	a3,80001aac <_printf_i+0x98>
80001b4c:	01079793          	slli	a5,a5,0x10
80001b50:	4107d793          	srai	a5,a5,0x10
80001b54:	f59ff06f          	j	80001aac <_printf_i+0x98>
80001b58:	00042583          	lw	a1,0(s0)
80001b5c:	00072783          	lw	a5,0(a4)
80001b60:	0805f813          	andi	a6,a1,128
80001b64:	00478513          	addi	a0,a5,4
80001b68:	00080863          	beqz	a6,80001b78 <_printf_i+0x164>
80001b6c:	00a72023          	sw	a0,0(a4)
80001b70:	0007a783          	lw	a5,0(a5)
80001b74:	0140006f          	j	80001b88 <_printf_i+0x174>
80001b78:	0405f593          	andi	a1,a1,64
80001b7c:	00a72023          	sw	a0,0(a4)
80001b80:	fe0588e3          	beqz	a1,80001b70 <_printf_i+0x15c>
80001b84:	0007d783          	lhu	a5,0(a5)
80001b88:	06f00713          	li	a4,111
80001b8c:	14e68063          	beq	a3,a4,80001ccc <_printf_i+0x2b8>
80001b90:	00001697          	auipc	a3,0x1
80001b94:	fb068693          	addi	a3,a3,-80 # 80002b40 <__sf_fake_stdout+0x34>
80001b98:	00a00713          	li	a4,10
80001b9c:	040401a3          	sb	zero,67(s0)
80001ba0:	00442583          	lw	a1,4(s0)
80001ba4:	00b42423          	sw	a1,8(s0)
80001ba8:	0005c863          	bltz	a1,80001bb8 <_printf_i+0x1a4>
80001bac:	00042503          	lw	a0,0(s0)
80001bb0:	ffb57513          	andi	a0,a0,-5
80001bb4:	00a42023          	sw	a0,0(s0)
80001bb8:	00079663          	bnez	a5,80001bc4 <_printf_i+0x1b0>
80001bbc:	00060a93          	mv	s5,a2
80001bc0:	02058263          	beqz	a1,80001be4 <_printf_i+0x1d0>
80001bc4:	00060a93          	mv	s5,a2
80001bc8:	02e7f5b3          	remu	a1,a5,a4
80001bcc:	fffa8a93          	addi	s5,s5,-1
80001bd0:	00b685b3          	add	a1,a3,a1
80001bd4:	0005c583          	lbu	a1,0(a1)
80001bd8:	00ba8023          	sb	a1,0(s5)
80001bdc:	02e7d5b3          	divu	a1,a5,a4
80001be0:	0ee7fe63          	bgeu	a5,a4,80001cdc <_printf_i+0x2c8>
80001be4:	00800793          	li	a5,8
80001be8:	02f71463          	bne	a4,a5,80001c10 <_printf_i+0x1fc>
80001bec:	00042783          	lw	a5,0(s0)
80001bf0:	0017f793          	andi	a5,a5,1
80001bf4:	00078e63          	beqz	a5,80001c10 <_printf_i+0x1fc>
80001bf8:	00442703          	lw	a4,4(s0)
80001bfc:	01042783          	lw	a5,16(s0)
80001c00:	00e7c863          	blt	a5,a4,80001c10 <_printf_i+0x1fc>
80001c04:	03000793          	li	a5,48
80001c08:	fefa8fa3          	sb	a5,-1(s5)
80001c0c:	fffa8a93          	addi	s5,s5,-1
80001c10:	41560633          	sub	a2,a2,s5
80001c14:	00c42823          	sw	a2,16(s0)
80001c18:	00098713          	mv	a4,s3
80001c1c:	00090693          	mv	a3,s2
80001c20:	00c10613          	addi	a2,sp,12
80001c24:	00040593          	mv	a1,s0
80001c28:	00048513          	mv	a0,s1
80001c2c:	c39ff0ef          	jal	ra,80001864 <_printf_common>
80001c30:	fff00a13          	li	s4,-1
80001c34:	13451a63          	bne	a0,s4,80001d68 <_printf_i+0x354>
80001c38:	fff00513          	li	a0,-1
80001c3c:	02c12083          	lw	ra,44(sp)
80001c40:	02812403          	lw	s0,40(sp)
80001c44:	02412483          	lw	s1,36(sp)
80001c48:	02012903          	lw	s2,32(sp)
80001c4c:	01c12983          	lw	s3,28(sp)
80001c50:	01812a03          	lw	s4,24(sp)
80001c54:	01412a83          	lw	s5,20(sp)
80001c58:	01012b03          	lw	s6,16(sp)
80001c5c:	03010113          	addi	sp,sp,48
80001c60:	00008067          	ret
80001c64:	04d582a3          	sb	a3,69(a1)
80001c68:	00001697          	auipc	a3,0x1
80001c6c:	ed868693          	addi	a3,a3,-296 # 80002b40 <__sf_fake_stdout+0x34>
80001c70:	00042583          	lw	a1,0(s0)
80001c74:	00072503          	lw	a0,0(a4)
80001c78:	0805f813          	andi	a6,a1,128
80001c7c:	00052783          	lw	a5,0(a0)
80001c80:	00450513          	addi	a0,a0,4
80001c84:	02080863          	beqz	a6,80001cb4 <_printf_i+0x2a0>
80001c88:	00a72023          	sw	a0,0(a4)
80001c8c:	0015f713          	andi	a4,a1,1
80001c90:	00070663          	beqz	a4,80001c9c <_printf_i+0x288>
80001c94:	0205e593          	ori	a1,a1,32
80001c98:	00b42023          	sw	a1,0(s0)
80001c9c:	01000713          	li	a4,16
80001ca0:	ee079ee3          	bnez	a5,80001b9c <_printf_i+0x188>
80001ca4:	00042583          	lw	a1,0(s0)
80001ca8:	fdf5f593          	andi	a1,a1,-33
80001cac:	00b42023          	sw	a1,0(s0)
80001cb0:	eedff06f          	j	80001b9c <_printf_i+0x188>
80001cb4:	0405f813          	andi	a6,a1,64
80001cb8:	00a72023          	sw	a0,0(a4)
80001cbc:	fc0808e3          	beqz	a6,80001c8c <_printf_i+0x278>
80001cc0:	01079793          	slli	a5,a5,0x10
80001cc4:	0107d793          	srli	a5,a5,0x10
80001cc8:	fc5ff06f          	j	80001c8c <_printf_i+0x278>
80001ccc:	00001697          	auipc	a3,0x1
80001cd0:	e7468693          	addi	a3,a3,-396 # 80002b40 <__sf_fake_stdout+0x34>
80001cd4:	00800713          	li	a4,8
80001cd8:	ec5ff06f          	j	80001b9c <_printf_i+0x188>
80001cdc:	00058793          	mv	a5,a1
80001ce0:	ee9ff06f          	j	80001bc8 <_printf_i+0x1b4>
80001ce4:	0005a683          	lw	a3,0(a1)
80001ce8:	00072783          	lw	a5,0(a4)
80001cec:	0145a583          	lw	a1,20(a1)
80001cf0:	0806f813          	andi	a6,a3,128
80001cf4:	00478513          	addi	a0,a5,4
80001cf8:	00080a63          	beqz	a6,80001d0c <_printf_i+0x2f8>
80001cfc:	00a72023          	sw	a0,0(a4)
80001d00:	0007a783          	lw	a5,0(a5)
80001d04:	00b7a023          	sw	a1,0(a5)
80001d08:	0180006f          	j	80001d20 <_printf_i+0x30c>
80001d0c:	00a72023          	sw	a0,0(a4)
80001d10:	0406f693          	andi	a3,a3,64
80001d14:	0007a783          	lw	a5,0(a5)
80001d18:	fe0686e3          	beqz	a3,80001d04 <_printf_i+0x2f0>
80001d1c:	00b79023          	sh	a1,0(a5)
80001d20:	00042823          	sw	zero,16(s0)
80001d24:	00060a93          	mv	s5,a2
80001d28:	ef1ff06f          	j	80001c18 <_printf_i+0x204>
80001d2c:	00072783          	lw	a5,0(a4)
80001d30:	0045a603          	lw	a2,4(a1)
80001d34:	00000593          	li	a1,0
80001d38:	00478693          	addi	a3,a5,4
80001d3c:	00d72023          	sw	a3,0(a4)
80001d40:	0007aa83          	lw	s5,0(a5)
80001d44:	000a8513          	mv	a0,s5
80001d48:	161000ef          	jal	ra,800026a8 <memchr>
80001d4c:	00050663          	beqz	a0,80001d58 <_printf_i+0x344>
80001d50:	41550533          	sub	a0,a0,s5
80001d54:	00a42223          	sw	a0,4(s0)
80001d58:	00442783          	lw	a5,4(s0)
80001d5c:	00f42823          	sw	a5,16(s0)
80001d60:	040401a3          	sb	zero,67(s0)
80001d64:	eb5ff06f          	j	80001c18 <_printf_i+0x204>
80001d68:	01042683          	lw	a3,16(s0)
80001d6c:	000a8613          	mv	a2,s5
80001d70:	00090593          	mv	a1,s2
80001d74:	00048513          	mv	a0,s1
80001d78:	000980e7          	jalr	s3
80001d7c:	eb450ee3          	beq	a0,s4,80001c38 <_printf_i+0x224>
80001d80:	00042783          	lw	a5,0(s0)
80001d84:	0027f793          	andi	a5,a5,2
80001d88:	04079463          	bnez	a5,80001dd0 <_printf_i+0x3bc>
80001d8c:	00c12783          	lw	a5,12(sp)
80001d90:	00c42503          	lw	a0,12(s0)
80001d94:	eaf554e3          	bge	a0,a5,80001c3c <_printf_i+0x228>
80001d98:	00078513          	mv	a0,a5
80001d9c:	ea1ff06f          	j	80001c3c <_printf_i+0x228>
80001da0:	00100693          	li	a3,1
80001da4:	000a8613          	mv	a2,s5
80001da8:	00090593          	mv	a1,s2
80001dac:	00048513          	mv	a0,s1
80001db0:	000980e7          	jalr	s3
80001db4:	e96502e3          	beq	a0,s6,80001c38 <_printf_i+0x224>
80001db8:	001a0a13          	addi	s4,s4,1
80001dbc:	00c42783          	lw	a5,12(s0)
80001dc0:	00c12703          	lw	a4,12(sp)
80001dc4:	40e787b3          	sub	a5,a5,a4
80001dc8:	fcfa4ce3          	blt	s4,a5,80001da0 <_printf_i+0x38c>
80001dcc:	fc1ff06f          	j	80001d8c <_printf_i+0x378>
80001dd0:	00000a13          	li	s4,0
80001dd4:	01940a93          	addi	s5,s0,25
80001dd8:	fff00b13          	li	s6,-1
80001ddc:	fe1ff06f          	j	80001dbc <_printf_i+0x3a8>

80001de0 <_sbrk_r>:
_sbrk_r():
80001de0:	ff010113          	addi	sp,sp,-16
80001de4:	00812423          	sw	s0,8(sp)
80001de8:	00050413          	mv	s0,a0
80001dec:	00058513          	mv	a0,a1
80001df0:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
80001df4:	00112623          	sw	ra,12(sp)
80001df8:	a09fe0ef          	jal	ra,80000800 <_sbrk>
80001dfc:	fff00793          	li	a5,-1
80001e00:	00f51a63          	bne	a0,a5,80001e14 <_sbrk_r+0x34>
80001e04:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80001e08:	0007a783          	lw	a5,0(a5)
80001e0c:	00078463          	beqz	a5,80001e14 <_sbrk_r+0x34>
80001e10:	00f42023          	sw	a5,0(s0)
80001e14:	00c12083          	lw	ra,12(sp)
80001e18:	00812403          	lw	s0,8(sp)
80001e1c:	01010113          	addi	sp,sp,16
80001e20:	00008067          	ret

80001e24 <__sread>:
__sread():
80001e24:	ff010113          	addi	sp,sp,-16
80001e28:	00812423          	sw	s0,8(sp)
80001e2c:	00058413          	mv	s0,a1
80001e30:	00e59583          	lh	a1,14(a1)
80001e34:	00112623          	sw	ra,12(sp)
80001e38:	1a1000ef          	jal	ra,800027d8 <_read_r>
80001e3c:	02054063          	bltz	a0,80001e5c <__sread+0x38>
80001e40:	05442783          	lw	a5,84(s0)
80001e44:	00a787b3          	add	a5,a5,a0
80001e48:	04f42a23          	sw	a5,84(s0)
80001e4c:	00c12083          	lw	ra,12(sp)
80001e50:	00812403          	lw	s0,8(sp)
80001e54:	01010113          	addi	sp,sp,16
80001e58:	00008067          	ret
80001e5c:	00c45783          	lhu	a5,12(s0)
80001e60:	fffff737          	lui	a4,0xfffff
80001e64:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack_top+0x7fffb77f>
80001e68:	00e7f7b3          	and	a5,a5,a4
80001e6c:	00f41623          	sh	a5,12(s0)
80001e70:	fddff06f          	j	80001e4c <__sread+0x28>

80001e74 <__swrite>:
__swrite():
80001e74:	00c5d783          	lhu	a5,12(a1)
80001e78:	fe010113          	addi	sp,sp,-32
80001e7c:	00812c23          	sw	s0,24(sp)
80001e80:	00912a23          	sw	s1,20(sp)
80001e84:	01212823          	sw	s2,16(sp)
80001e88:	01312623          	sw	s3,12(sp)
80001e8c:	00112e23          	sw	ra,28(sp)
80001e90:	1007f793          	andi	a5,a5,256
80001e94:	00050493          	mv	s1,a0
80001e98:	00058413          	mv	s0,a1
80001e9c:	00060913          	mv	s2,a2
80001ea0:	00068993          	mv	s3,a3
80001ea4:	00078a63          	beqz	a5,80001eb8 <__swrite+0x44>
80001ea8:	00e59583          	lh	a1,14(a1)
80001eac:	00200693          	li	a3,2
80001eb0:	00000613          	li	a2,0
80001eb4:	62c000ef          	jal	ra,800024e0 <_lseek_r>
80001eb8:	00c45783          	lhu	a5,12(s0)
80001ebc:	fffff737          	lui	a4,0xfffff
80001ec0:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack_top+0x7fffb77f>
80001ec4:	00e7f7b3          	and	a5,a5,a4
80001ec8:	00f41623          	sh	a5,12(s0)
80001ecc:	00e41583          	lh	a1,14(s0)
80001ed0:	01812403          	lw	s0,24(sp)
80001ed4:	01c12083          	lw	ra,28(sp)
80001ed8:	00098693          	mv	a3,s3
80001edc:	00090613          	mv	a2,s2
80001ee0:	00c12983          	lw	s3,12(sp)
80001ee4:	01012903          	lw	s2,16(sp)
80001ee8:	00048513          	mv	a0,s1
80001eec:	01412483          	lw	s1,20(sp)
80001ef0:	02010113          	addi	sp,sp,32
80001ef4:	808ff06f          	j	80000efc <_write_r>

80001ef8 <__sseek>:
__sseek():
80001ef8:	ff010113          	addi	sp,sp,-16
80001efc:	00812423          	sw	s0,8(sp)
80001f00:	00058413          	mv	s0,a1
80001f04:	00e59583          	lh	a1,14(a1)
80001f08:	00112623          	sw	ra,12(sp)
80001f0c:	5d4000ef          	jal	ra,800024e0 <_lseek_r>
80001f10:	fff00793          	li	a5,-1
80001f14:	00c45703          	lhu	a4,12(s0)
80001f18:	02f51263          	bne	a0,a5,80001f3c <__sseek+0x44>
80001f1c:	fffff7b7          	lui	a5,0xfffff
80001f20:	fff78793          	addi	a5,a5,-1 # ffffefff <__stack_top+0x7fffb77f>
80001f24:	00e7f7b3          	and	a5,a5,a4
80001f28:	00f41623          	sh	a5,12(s0)
80001f2c:	00c12083          	lw	ra,12(sp)
80001f30:	00812403          	lw	s0,8(sp)
80001f34:	01010113          	addi	sp,sp,16
80001f38:	00008067          	ret
80001f3c:	000017b7          	lui	a5,0x1
80001f40:	00f767b3          	or	a5,a4,a5
80001f44:	00f41623          	sh	a5,12(s0)
80001f48:	04a42a23          	sw	a0,84(s0)
80001f4c:	fe1ff06f          	j	80001f2c <__sseek+0x34>

80001f50 <__sclose>:
__sclose():
80001f50:	00e59583          	lh	a1,14(a1)
80001f54:	2bc0006f          	j	80002210 <_close_r>

80001f58 <__swbuf_r>:
__swbuf_r():
80001f58:	fe010113          	addi	sp,sp,-32
80001f5c:	00812c23          	sw	s0,24(sp)
80001f60:	00912a23          	sw	s1,20(sp)
80001f64:	01212823          	sw	s2,16(sp)
80001f68:	00112e23          	sw	ra,28(sp)
80001f6c:	01312623          	sw	s3,12(sp)
80001f70:	00050493          	mv	s1,a0
80001f74:	00058913          	mv	s2,a1
80001f78:	00060413          	mv	s0,a2
80001f7c:	00050863          	beqz	a0,80001f8c <__swbuf_r+0x34>
80001f80:	01852783          	lw	a5,24(a0)
80001f84:	00079463          	bnez	a5,80001f8c <__swbuf_r+0x34>
80001f88:	8c0ff0ef          	jal	ra,80001048 <__sinit>
80001f8c:	00001797          	auipc	a5,0x1
80001f90:	b6078793          	addi	a5,a5,-1184 # 80002aec <__sf_fake_stdin>
80001f94:	0af41e63          	bne	s0,a5,80002050 <__swbuf_r+0xf8>
80001f98:	0044a403          	lw	s0,4(s1)
80001f9c:	01842783          	lw	a5,24(s0)
80001fa0:	00f42423          	sw	a5,8(s0)
80001fa4:	00c45783          	lhu	a5,12(s0)
80001fa8:	0087f793          	andi	a5,a5,8
80001fac:	0c078663          	beqz	a5,80002078 <__swbuf_r+0x120>
80001fb0:	01042783          	lw	a5,16(s0)
80001fb4:	0c078263          	beqz	a5,80002078 <__swbuf_r+0x120>
80001fb8:	01042783          	lw	a5,16(s0)
80001fbc:	00042503          	lw	a0,0(s0)
80001fc0:	0ff97993          	andi	s3,s2,255
80001fc4:	0ff97913          	andi	s2,s2,255
80001fc8:	40f50533          	sub	a0,a0,a5
80001fcc:	01442783          	lw	a5,20(s0)
80001fd0:	00f54a63          	blt	a0,a5,80001fe4 <__swbuf_r+0x8c>
80001fd4:	00040593          	mv	a1,s0
80001fd8:	00048513          	mv	a0,s1
80001fdc:	464000ef          	jal	ra,80002440 <_fflush_r>
80001fe0:	0a051463          	bnez	a0,80002088 <__swbuf_r+0x130>
80001fe4:	00842783          	lw	a5,8(s0)
80001fe8:	00150513          	addi	a0,a0,1
80001fec:	fff78793          	addi	a5,a5,-1
80001ff0:	00f42423          	sw	a5,8(s0)
80001ff4:	00042783          	lw	a5,0(s0)
80001ff8:	00178713          	addi	a4,a5,1
80001ffc:	00e42023          	sw	a4,0(s0)
80002000:	01378023          	sb	s3,0(a5)
80002004:	01442783          	lw	a5,20(s0)
80002008:	00a78c63          	beq	a5,a0,80002020 <__swbuf_r+0xc8>
8000200c:	00c45783          	lhu	a5,12(s0)
80002010:	0017f793          	andi	a5,a5,1
80002014:	00078e63          	beqz	a5,80002030 <__swbuf_r+0xd8>
80002018:	00a00793          	li	a5,10
8000201c:	00f91a63          	bne	s2,a5,80002030 <__swbuf_r+0xd8>
80002020:	00040593          	mv	a1,s0
80002024:	00048513          	mv	a0,s1
80002028:	418000ef          	jal	ra,80002440 <_fflush_r>
8000202c:	04051e63          	bnez	a0,80002088 <__swbuf_r+0x130>
80002030:	01c12083          	lw	ra,28(sp)
80002034:	01812403          	lw	s0,24(sp)
80002038:	00090513          	mv	a0,s2
8000203c:	01412483          	lw	s1,20(sp)
80002040:	01012903          	lw	s2,16(sp)
80002044:	00c12983          	lw	s3,12(sp)
80002048:	02010113          	addi	sp,sp,32
8000204c:	00008067          	ret
80002050:	00001797          	auipc	a5,0x1
80002054:	abc78793          	addi	a5,a5,-1348 # 80002b0c <__sf_fake_stdout>
80002058:	00f41663          	bne	s0,a5,80002064 <__swbuf_r+0x10c>
8000205c:	0084a403          	lw	s0,8(s1)
80002060:	f3dff06f          	j	80001f9c <__swbuf_r+0x44>
80002064:	00001797          	auipc	a5,0x1
80002068:	a6878793          	addi	a5,a5,-1432 # 80002acc <__sf_fake_stderr>
8000206c:	f2f418e3          	bne	s0,a5,80001f9c <__swbuf_r+0x44>
80002070:	00c4a403          	lw	s0,12(s1)
80002074:	f29ff06f          	j	80001f9c <__swbuf_r+0x44>
80002078:	00040593          	mv	a1,s0
8000207c:	00048513          	mv	a0,s1
80002080:	010000ef          	jal	ra,80002090 <__swsetup_r>
80002084:	f2050ae3          	beqz	a0,80001fb8 <__swbuf_r+0x60>
80002088:	fff00913          	li	s2,-1
8000208c:	fa5ff06f          	j	80002030 <__swbuf_r+0xd8>

80002090 <__swsetup_r>:
__swsetup_r():
80002090:	ff010113          	addi	sp,sp,-16
80002094:	00001797          	auipc	a5,0x1
80002098:	af478793          	addi	a5,a5,-1292 # 80002b88 <_impure_ptr>
8000209c:	00912223          	sw	s1,4(sp)
800020a0:	0007a483          	lw	s1,0(a5)
800020a4:	00812423          	sw	s0,8(sp)
800020a8:	01212023          	sw	s2,0(sp)
800020ac:	00112623          	sw	ra,12(sp)
800020b0:	00050913          	mv	s2,a0
800020b4:	00058413          	mv	s0,a1
800020b8:	00048a63          	beqz	s1,800020cc <__swsetup_r+0x3c>
800020bc:	0184a783          	lw	a5,24(s1)
800020c0:	00079663          	bnez	a5,800020cc <__swsetup_r+0x3c>
800020c4:	00048513          	mv	a0,s1
800020c8:	f81fe0ef          	jal	ra,80001048 <__sinit>
800020cc:	00001797          	auipc	a5,0x1
800020d0:	a2078793          	addi	a5,a5,-1504 # 80002aec <__sf_fake_stdin>
800020d4:	04f41863          	bne	s0,a5,80002124 <__swsetup_r+0x94>
800020d8:	0044a403          	lw	s0,4(s1)
800020dc:	00c41703          	lh	a4,12(s0)
800020e0:	01071793          	slli	a5,a4,0x10
800020e4:	0107d793          	srli	a5,a5,0x10
800020e8:	0087f693          	andi	a3,a5,8
800020ec:	0a069463          	bnez	a3,80002194 <__swsetup_r+0x104>
800020f0:	0107f693          	andi	a3,a5,16
800020f4:	04069c63          	bnez	a3,8000214c <__swsetup_r+0xbc>
800020f8:	00900793          	li	a5,9
800020fc:	00f92023          	sw	a5,0(s2)
80002100:	04076713          	ori	a4,a4,64
80002104:	00e41623          	sh	a4,12(s0)
80002108:	fff00513          	li	a0,-1
8000210c:	00c12083          	lw	ra,12(sp)
80002110:	00812403          	lw	s0,8(sp)
80002114:	00412483          	lw	s1,4(sp)
80002118:	00012903          	lw	s2,0(sp)
8000211c:	01010113          	addi	sp,sp,16
80002120:	00008067          	ret
80002124:	00001797          	auipc	a5,0x1
80002128:	9e878793          	addi	a5,a5,-1560 # 80002b0c <__sf_fake_stdout>
8000212c:	00f41663          	bne	s0,a5,80002138 <__swsetup_r+0xa8>
80002130:	0084a403          	lw	s0,8(s1)
80002134:	fa9ff06f          	j	800020dc <__swsetup_r+0x4c>
80002138:	00001797          	auipc	a5,0x1
8000213c:	99478793          	addi	a5,a5,-1644 # 80002acc <__sf_fake_stderr>
80002140:	f8f41ee3          	bne	s0,a5,800020dc <__swsetup_r+0x4c>
80002144:	00c4a403          	lw	s0,12(s1)
80002148:	f95ff06f          	j	800020dc <__swsetup_r+0x4c>
8000214c:	0047f793          	andi	a5,a5,4
80002150:	02078c63          	beqz	a5,80002188 <__swsetup_r+0xf8>
80002154:	03442583          	lw	a1,52(s0)
80002158:	00058c63          	beqz	a1,80002170 <__swsetup_r+0xe0>
8000215c:	04440793          	addi	a5,s0,68
80002160:	00f58663          	beq	a1,a5,8000216c <__swsetup_r+0xdc>
80002164:	00090513          	mv	a0,s2
80002168:	56c000ef          	jal	ra,800026d4 <_free_r>
8000216c:	02042a23          	sw	zero,52(s0)
80002170:	00c45783          	lhu	a5,12(s0)
80002174:	00042223          	sw	zero,4(s0)
80002178:	fdb7f793          	andi	a5,a5,-37
8000217c:	00f41623          	sh	a5,12(s0)
80002180:	01042783          	lw	a5,16(s0)
80002184:	00f42023          	sw	a5,0(s0)
80002188:	00c45783          	lhu	a5,12(s0)
8000218c:	0087e793          	ori	a5,a5,8
80002190:	00f41623          	sh	a5,12(s0)
80002194:	01042783          	lw	a5,16(s0)
80002198:	02079063          	bnez	a5,800021b8 <__swsetup_r+0x128>
8000219c:	00c45783          	lhu	a5,12(s0)
800021a0:	20000713          	li	a4,512
800021a4:	2807f793          	andi	a5,a5,640
800021a8:	00e78863          	beq	a5,a4,800021b8 <__swsetup_r+0x128>
800021ac:	00040593          	mv	a1,s0
800021b0:	00090513          	mv	a0,s2
800021b4:	404000ef          	jal	ra,800025b8 <__smakebuf_r>
800021b8:	00c45783          	lhu	a5,12(s0)
800021bc:	0017f713          	andi	a4,a5,1
800021c0:	02070c63          	beqz	a4,800021f8 <__swsetup_r+0x168>
800021c4:	01442783          	lw	a5,20(s0)
800021c8:	00042423          	sw	zero,8(s0)
800021cc:	40f007b3          	neg	a5,a5
800021d0:	00f42c23          	sw	a5,24(s0)
800021d4:	01042783          	lw	a5,16(s0)
800021d8:	00000513          	li	a0,0
800021dc:	f20798e3          	bnez	a5,8000210c <__swsetup_r+0x7c>
800021e0:	00c41783          	lh	a5,12(s0)
800021e4:	0807f713          	andi	a4,a5,128
800021e8:	f20702e3          	beqz	a4,8000210c <__swsetup_r+0x7c>
800021ec:	0407e793          	ori	a5,a5,64
800021f0:	00f41623          	sh	a5,12(s0)
800021f4:	f15ff06f          	j	80002108 <__swsetup_r+0x78>
800021f8:	0027f793          	andi	a5,a5,2
800021fc:	00000713          	li	a4,0
80002200:	00079463          	bnez	a5,80002208 <__swsetup_r+0x178>
80002204:	01442703          	lw	a4,20(s0)
80002208:	00e42423          	sw	a4,8(s0)
8000220c:	fc9ff06f          	j	800021d4 <__swsetup_r+0x144>

80002210 <_close_r>:
_close_r():
80002210:	ff010113          	addi	sp,sp,-16
80002214:	00812423          	sw	s0,8(sp)
80002218:	00050413          	mv	s0,a0
8000221c:	00058513          	mv	a0,a1
80002220:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
80002224:	00112623          	sw	ra,12(sp)
80002228:	e18fe0ef          	jal	ra,80000840 <_close>
8000222c:	fff00793          	li	a5,-1
80002230:	00f51a63          	bne	a0,a5,80002244 <_close_r+0x34>
80002234:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80002238:	0007a783          	lw	a5,0(a5)
8000223c:	00078463          	beqz	a5,80002244 <_close_r+0x34>
80002240:	00f42023          	sw	a5,0(s0)
80002244:	00c12083          	lw	ra,12(sp)
80002248:	00812403          	lw	s0,8(sp)
8000224c:	01010113          	addi	sp,sp,16
80002250:	00008067          	ret

80002254 <__sflush_r>:
__sflush_r():
80002254:	00c5d783          	lhu	a5,12(a1)
80002258:	fe010113          	addi	sp,sp,-32
8000225c:	00812c23          	sw	s0,24(sp)
80002260:	00912a23          	sw	s1,20(sp)
80002264:	00112e23          	sw	ra,28(sp)
80002268:	01212823          	sw	s2,16(sp)
8000226c:	01312623          	sw	s3,12(sp)
80002270:	0087f713          	andi	a4,a5,8
80002274:	00050493          	mv	s1,a0
80002278:	00058413          	mv	s0,a1
8000227c:	14071e63          	bnez	a4,800023d8 <__sflush_r+0x184>
80002280:	0045a703          	lw	a4,4(a1)
80002284:	00e04a63          	bgtz	a4,80002298 <__sflush_r+0x44>
80002288:	0405a703          	lw	a4,64(a1)
8000228c:	00e04663          	bgtz	a4,80002298 <__sflush_r+0x44>
80002290:	00000513          	li	a0,0
80002294:	11c0006f          	j	800023b0 <__sflush_r+0x15c>
80002298:	02c42703          	lw	a4,44(s0)
8000229c:	fe070ae3          	beqz	a4,80002290 <__sflush_r+0x3c>
800022a0:	0004a903          	lw	s2,0(s1)
800022a4:	01379693          	slli	a3,a5,0x13
800022a8:	0004a023          	sw	zero,0(s1)
800022ac:	0a06de63          	bgez	a3,80002368 <__sflush_r+0x114>
800022b0:	05442503          	lw	a0,84(s0)
800022b4:	00c45783          	lhu	a5,12(s0)
800022b8:	0047f793          	andi	a5,a5,4
800022bc:	00078e63          	beqz	a5,800022d8 <__sflush_r+0x84>
800022c0:	00442783          	lw	a5,4(s0)
800022c4:	40f50533          	sub	a0,a0,a5
800022c8:	03442783          	lw	a5,52(s0)
800022cc:	00078663          	beqz	a5,800022d8 <__sflush_r+0x84>
800022d0:	04042783          	lw	a5,64(s0)
800022d4:	40f50533          	sub	a0,a0,a5
800022d8:	02c42783          	lw	a5,44(s0)
800022dc:	02042583          	lw	a1,32(s0)
800022e0:	00050613          	mv	a2,a0
800022e4:	00000693          	li	a3,0
800022e8:	00048513          	mv	a0,s1
800022ec:	000780e7          	jalr	a5
800022f0:	fff00793          	li	a5,-1
800022f4:	00c45703          	lhu	a4,12(s0)
800022f8:	02f51263          	bne	a0,a5,8000231c <__sflush_r+0xc8>
800022fc:	0004a683          	lw	a3,0(s1)
80002300:	01d00793          	li	a5,29
80002304:	0cd7e463          	bltu	a5,a3,800023cc <__sflush_r+0x178>
80002308:	204007b7          	lui	a5,0x20400
8000230c:	00178793          	addi	a5,a5,1 # 20400001 <STACK_SIZE+0x203ff801>
80002310:	00d7d7b3          	srl	a5,a5,a3
80002314:	0017f793          	andi	a5,a5,1
80002318:	0a078a63          	beqz	a5,800023cc <__sflush_r+0x178>
8000231c:	01042783          	lw	a5,16(s0)
80002320:	00042223          	sw	zero,4(s0)
80002324:	00f42023          	sw	a5,0(s0)
80002328:	01371793          	slli	a5,a4,0x13
8000232c:	0007dc63          	bgez	a5,80002344 <__sflush_r+0xf0>
80002330:	fff00793          	li	a5,-1
80002334:	00f51663          	bne	a0,a5,80002340 <__sflush_r+0xec>
80002338:	0004a783          	lw	a5,0(s1)
8000233c:	00079463          	bnez	a5,80002344 <__sflush_r+0xf0>
80002340:	04a42a23          	sw	a0,84(s0)
80002344:	03442583          	lw	a1,52(s0)
80002348:	0124a023          	sw	s2,0(s1)
8000234c:	f40582e3          	beqz	a1,80002290 <__sflush_r+0x3c>
80002350:	04440793          	addi	a5,s0,68
80002354:	00f58663          	beq	a1,a5,80002360 <__sflush_r+0x10c>
80002358:	00048513          	mv	a0,s1
8000235c:	378000ef          	jal	ra,800026d4 <_free_r>
80002360:	02042a23          	sw	zero,52(s0)
80002364:	f2dff06f          	j	80002290 <__sflush_r+0x3c>
80002368:	02042583          	lw	a1,32(s0)
8000236c:	00100693          	li	a3,1
80002370:	00000613          	li	a2,0
80002374:	00048513          	mv	a0,s1
80002378:	000700e7          	jalr	a4
8000237c:	fff00793          	li	a5,-1
80002380:	f2f51ae3          	bne	a0,a5,800022b4 <__sflush_r+0x60>
80002384:	0004a783          	lw	a5,0(s1)
80002388:	f20786e3          	beqz	a5,800022b4 <__sflush_r+0x60>
8000238c:	01d00713          	li	a4,29
80002390:	00e78663          	beq	a5,a4,8000239c <__sflush_r+0x148>
80002394:	01600713          	li	a4,22
80002398:	00e79663          	bne	a5,a4,800023a4 <__sflush_r+0x150>
8000239c:	0124a023          	sw	s2,0(s1)
800023a0:	ef1ff06f          	j	80002290 <__sflush_r+0x3c>
800023a4:	00c45783          	lhu	a5,12(s0)
800023a8:	0407e793          	ori	a5,a5,64
800023ac:	00f41623          	sh	a5,12(s0)
800023b0:	01c12083          	lw	ra,28(sp)
800023b4:	01812403          	lw	s0,24(sp)
800023b8:	01412483          	lw	s1,20(sp)
800023bc:	01012903          	lw	s2,16(sp)
800023c0:	00c12983          	lw	s3,12(sp)
800023c4:	02010113          	addi	sp,sp,32
800023c8:	00008067          	ret
800023cc:	04076713          	ori	a4,a4,64
800023d0:	00e41623          	sh	a4,12(s0)
800023d4:	fddff06f          	j	800023b0 <__sflush_r+0x15c>
800023d8:	0105a983          	lw	s3,16(a1)
800023dc:	ea098ae3          	beqz	s3,80002290 <__sflush_r+0x3c>
800023e0:	0005a903          	lw	s2,0(a1)
800023e4:	0037f793          	andi	a5,a5,3
800023e8:	0135a023          	sw	s3,0(a1)
800023ec:	41390933          	sub	s2,s2,s3
800023f0:	00000713          	li	a4,0
800023f4:	00079463          	bnez	a5,800023fc <__sflush_r+0x1a8>
800023f8:	0145a703          	lw	a4,20(a1)
800023fc:	00e42423          	sw	a4,8(s0)
80002400:	e92058e3          	blez	s2,80002290 <__sflush_r+0x3c>
80002404:	02842783          	lw	a5,40(s0)
80002408:	02042583          	lw	a1,32(s0)
8000240c:	00090693          	mv	a3,s2
80002410:	00098613          	mv	a2,s3
80002414:	00048513          	mv	a0,s1
80002418:	000780e7          	jalr	a5
8000241c:	00a04c63          	bgtz	a0,80002434 <__sflush_r+0x1e0>
80002420:	00c45783          	lhu	a5,12(s0)
80002424:	fff00513          	li	a0,-1
80002428:	0407e793          	ori	a5,a5,64
8000242c:	00f41623          	sh	a5,12(s0)
80002430:	f81ff06f          	j	800023b0 <__sflush_r+0x15c>
80002434:	00a989b3          	add	s3,s3,a0
80002438:	40a90933          	sub	s2,s2,a0
8000243c:	fc5ff06f          	j	80002400 <__sflush_r+0x1ac>

80002440 <_fflush_r>:
_fflush_r():
80002440:	0105a783          	lw	a5,16(a1)
80002444:	08078a63          	beqz	a5,800024d8 <_fflush_r+0x98>
80002448:	fe010113          	addi	sp,sp,-32
8000244c:	00812c23          	sw	s0,24(sp)
80002450:	00112e23          	sw	ra,28(sp)
80002454:	00050413          	mv	s0,a0
80002458:	00050c63          	beqz	a0,80002470 <_fflush_r+0x30>
8000245c:	01852783          	lw	a5,24(a0)
80002460:	00079863          	bnez	a5,80002470 <_fflush_r+0x30>
80002464:	00b12623          	sw	a1,12(sp)
80002468:	be1fe0ef          	jal	ra,80001048 <__sinit>
8000246c:	00c12583          	lw	a1,12(sp)
80002470:	00000797          	auipc	a5,0x0
80002474:	67c78793          	addi	a5,a5,1660 # 80002aec <__sf_fake_stdin>
80002478:	02f59263          	bne	a1,a5,8000249c <_fflush_r+0x5c>
8000247c:	00442583          	lw	a1,4(s0)
80002480:	00c59783          	lh	a5,12(a1)
80002484:	04078063          	beqz	a5,800024c4 <_fflush_r+0x84>
80002488:	00040513          	mv	a0,s0
8000248c:	01812403          	lw	s0,24(sp)
80002490:	01c12083          	lw	ra,28(sp)
80002494:	02010113          	addi	sp,sp,32
80002498:	dbdff06f          	j	80002254 <__sflush_r>
8000249c:	00000797          	auipc	a5,0x0
800024a0:	67078793          	addi	a5,a5,1648 # 80002b0c <__sf_fake_stdout>
800024a4:	00f59663          	bne	a1,a5,800024b0 <_fflush_r+0x70>
800024a8:	00842583          	lw	a1,8(s0)
800024ac:	fd5ff06f          	j	80002480 <_fflush_r+0x40>
800024b0:	00000797          	auipc	a5,0x0
800024b4:	61c78793          	addi	a5,a5,1564 # 80002acc <__sf_fake_stderr>
800024b8:	fcf594e3          	bne	a1,a5,80002480 <_fflush_r+0x40>
800024bc:	00c42583          	lw	a1,12(s0)
800024c0:	fc1ff06f          	j	80002480 <_fflush_r+0x40>
800024c4:	01c12083          	lw	ra,28(sp)
800024c8:	01812403          	lw	s0,24(sp)
800024cc:	00000513          	li	a0,0
800024d0:	02010113          	addi	sp,sp,32
800024d4:	00008067          	ret
800024d8:	00000513          	li	a0,0
800024dc:	00008067          	ret

800024e0 <_lseek_r>:
_lseek_r():
800024e0:	ff010113          	addi	sp,sp,-16
800024e4:	00812423          	sw	s0,8(sp)
800024e8:	00050413          	mv	s0,a0
800024ec:	00058513          	mv	a0,a1
800024f0:	00060593          	mv	a1,a2
800024f4:	00068613          	mv	a2,a3
800024f8:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
800024fc:	00112623          	sw	ra,12(sp)
80002500:	b80fe0ef          	jal	ra,80000880 <_lseek>
80002504:	fff00793          	li	a5,-1
80002508:	00f51a63          	bne	a0,a5,8000251c <_lseek_r+0x3c>
8000250c:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80002510:	0007a783          	lw	a5,0(a5)
80002514:	00078463          	beqz	a5,8000251c <_lseek_r+0x3c>
80002518:	00f42023          	sw	a5,0(s0)
8000251c:	00c12083          	lw	ra,12(sp)
80002520:	00812403          	lw	s0,8(sp)
80002524:	01010113          	addi	sp,sp,16
80002528:	00008067          	ret

8000252c <__swhatbuf_r>:
__swhatbuf_r():
8000252c:	f8010113          	addi	sp,sp,-128
80002530:	06912a23          	sw	s1,116(sp)
80002534:	00058493          	mv	s1,a1
80002538:	00e59583          	lh	a1,14(a1)
8000253c:	06812c23          	sw	s0,120(sp)
80002540:	06112e23          	sw	ra,124(sp)
80002544:	00060413          	mv	s0,a2
80002548:	0005de63          	bgez	a1,80002564 <__swhatbuf_r+0x38>
8000254c:	00c4d783          	lhu	a5,12(s1)
80002550:	0006a023          	sw	zero,0(a3)
80002554:	0807f793          	andi	a5,a5,128
80002558:	04079063          	bnez	a5,80002598 <__swhatbuf_r+0x6c>
8000255c:	40000793          	li	a5,1024
80002560:	03c0006f          	j	8000259c <__swhatbuf_r+0x70>
80002564:	01810613          	addi	a2,sp,24
80002568:	00d12623          	sw	a3,12(sp)
8000256c:	2b8000ef          	jal	ra,80002824 <_fstat_r>
80002570:	00c12683          	lw	a3,12(sp)
80002574:	fc054ce3          	bltz	a0,8000254c <__swhatbuf_r+0x20>
80002578:	01c12703          	lw	a4,28(sp)
8000257c:	0000f7b7          	lui	a5,0xf
80002580:	00e7f7b3          	and	a5,a5,a4
80002584:	ffffe737          	lui	a4,0xffffe
80002588:	00e787b3          	add	a5,a5,a4
8000258c:	0017b793          	seqz	a5,a5
80002590:	00f6a023          	sw	a5,0(a3)
80002594:	fc9ff06f          	j	8000255c <__swhatbuf_r+0x30>
80002598:	04000793          	li	a5,64
8000259c:	00f42023          	sw	a5,0(s0)
800025a0:	07c12083          	lw	ra,124(sp)
800025a4:	07812403          	lw	s0,120(sp)
800025a8:	07412483          	lw	s1,116(sp)
800025ac:	00000513          	li	a0,0
800025b0:	08010113          	addi	sp,sp,128
800025b4:	00008067          	ret

800025b8 <__smakebuf_r>:
__smakebuf_r():
800025b8:	00c5d783          	lhu	a5,12(a1)
800025bc:	fe010113          	addi	sp,sp,-32
800025c0:	00812c23          	sw	s0,24(sp)
800025c4:	00112e23          	sw	ra,28(sp)
800025c8:	00912a23          	sw	s1,20(sp)
800025cc:	01212823          	sw	s2,16(sp)
800025d0:	0027f793          	andi	a5,a5,2
800025d4:	00058413          	mv	s0,a1
800025d8:	02078863          	beqz	a5,80002608 <__smakebuf_r+0x50>
800025dc:	04740793          	addi	a5,s0,71
800025e0:	00f42023          	sw	a5,0(s0)
800025e4:	00f42823          	sw	a5,16(s0)
800025e8:	00100793          	li	a5,1
800025ec:	00f42a23          	sw	a5,20(s0)
800025f0:	01c12083          	lw	ra,28(sp)
800025f4:	01812403          	lw	s0,24(sp)
800025f8:	01412483          	lw	s1,20(sp)
800025fc:	01012903          	lw	s2,16(sp)
80002600:	02010113          	addi	sp,sp,32
80002604:	00008067          	ret
80002608:	00c10693          	addi	a3,sp,12
8000260c:	00810613          	addi	a2,sp,8
80002610:	00050493          	mv	s1,a0
80002614:	f19ff0ef          	jal	ra,8000252c <__swhatbuf_r>
80002618:	00812583          	lw	a1,8(sp)
8000261c:	00050913          	mv	s2,a0
80002620:	00048513          	mv	a0,s1
80002624:	c7dfe0ef          	jal	ra,800012a0 <_malloc_r>
80002628:	02051063          	bnez	a0,80002648 <__smakebuf_r+0x90>
8000262c:	00c41783          	lh	a5,12(s0)
80002630:	2007f713          	andi	a4,a5,512
80002634:	fa071ee3          	bnez	a4,800025f0 <__smakebuf_r+0x38>
80002638:	ffc7f793          	andi	a5,a5,-4
8000263c:	0027e793          	ori	a5,a5,2
80002640:	00f41623          	sh	a5,12(s0)
80002644:	f99ff06f          	j	800025dc <__smakebuf_r+0x24>
80002648:	fffff797          	auipc	a5,0xfffff
8000264c:	98878793          	addi	a5,a5,-1656 # 80000fd0 <_cleanup_r>
80002650:	02f4a423          	sw	a5,40(s1)
80002654:	00c45783          	lhu	a5,12(s0)
80002658:	00a42023          	sw	a0,0(s0)
8000265c:	00a42823          	sw	a0,16(s0)
80002660:	0807e793          	ori	a5,a5,128
80002664:	00f41623          	sh	a5,12(s0)
80002668:	00812783          	lw	a5,8(sp)
8000266c:	00f42a23          	sw	a5,20(s0)
80002670:	00c12783          	lw	a5,12(sp)
80002674:	02078263          	beqz	a5,80002698 <__smakebuf_r+0xe0>
80002678:	00e41583          	lh	a1,14(s0)
8000267c:	00048513          	mv	a0,s1
80002680:	1ec000ef          	jal	ra,8000286c <_isatty_r>
80002684:	00050a63          	beqz	a0,80002698 <__smakebuf_r+0xe0>
80002688:	00c45783          	lhu	a5,12(s0)
8000268c:	ffc7f793          	andi	a5,a5,-4
80002690:	0017e793          	ori	a5,a5,1
80002694:	00f41623          	sh	a5,12(s0)
80002698:	00c45783          	lhu	a5,12(s0)
8000269c:	00f96933          	or	s2,s2,a5
800026a0:	01241623          	sh	s2,12(s0)
800026a4:	f4dff06f          	j	800025f0 <__smakebuf_r+0x38>

800026a8 <memchr>:
memchr():
800026a8:	0ff5f593          	andi	a1,a1,255
800026ac:	00c50633          	add	a2,a0,a2
800026b0:	00c51663          	bne	a0,a2,800026bc <memchr+0x14>
800026b4:	00000513          	li	a0,0
800026b8:	00008067          	ret
800026bc:	00054783          	lbu	a5,0(a0)
800026c0:	feb78ce3          	beq	a5,a1,800026b8 <memchr+0x10>
800026c4:	00150513          	addi	a0,a0,1
800026c8:	fe9ff06f          	j	800026b0 <memchr+0x8>

800026cc <__malloc_lock>:
__malloc_lock():
800026cc:	00008067          	ret

800026d0 <__malloc_unlock>:
__malloc_unlock():
800026d0:	00008067          	ret

800026d4 <_free_r>:
_free_r():
800026d4:	10058063          	beqz	a1,800027d4 <_free_r+0x100>
800026d8:	ffc5a783          	lw	a5,-4(a1)
800026dc:	ff010113          	addi	sp,sp,-16
800026e0:	00812423          	sw	s0,8(sp)
800026e4:	00112623          	sw	ra,12(sp)
800026e8:	00912223          	sw	s1,4(sp)
800026ec:	ffc58413          	addi	s0,a1,-4
800026f0:	0007d463          	bgez	a5,800026f8 <_free_r+0x24>
800026f4:	00f40433          	add	s0,s0,a5
800026f8:	00050493          	mv	s1,a0
800026fc:	fd1ff0ef          	jal	ra,800026cc <__malloc_lock>
80002700:	88c18793          	addi	a5,gp,-1908 # 80002c0c <__malloc_free_list>
80002704:	0007a783          	lw	a5,0(a5)
80002708:	02079263          	bnez	a5,8000272c <_free_r+0x58>
8000270c:	00042223          	sw	zero,4(s0)
80002710:	8881a623          	sw	s0,-1908(gp) # 80002c0c <__malloc_free_list>
80002714:	00812403          	lw	s0,8(sp)
80002718:	00c12083          	lw	ra,12(sp)
8000271c:	00048513          	mv	a0,s1
80002720:	00412483          	lw	s1,4(sp)
80002724:	01010113          	addi	sp,sp,16
80002728:	fa9ff06f          	j	800026d0 <__malloc_unlock>
8000272c:	02f47663          	bgeu	s0,a5,80002758 <_free_r+0x84>
80002730:	00042683          	lw	a3,0(s0)
80002734:	00d40733          	add	a4,s0,a3
80002738:	00e79a63          	bne	a5,a4,8000274c <_free_r+0x78>
8000273c:	0007a703          	lw	a4,0(a5)
80002740:	0047a783          	lw	a5,4(a5)
80002744:	00d70733          	add	a4,a4,a3
80002748:	00e42023          	sw	a4,0(s0)
8000274c:	00f42223          	sw	a5,4(s0)
80002750:	fc1ff06f          	j	80002710 <_free_r+0x3c>
80002754:	00070793          	mv	a5,a4
80002758:	0047a703          	lw	a4,4(a5)
8000275c:	00070463          	beqz	a4,80002764 <_free_r+0x90>
80002760:	fee47ae3          	bgeu	s0,a4,80002754 <_free_r+0x80>
80002764:	0007a683          	lw	a3,0(a5)
80002768:	00d78633          	add	a2,a5,a3
8000276c:	02861863          	bne	a2,s0,8000279c <_free_r+0xc8>
80002770:	00042603          	lw	a2,0(s0)
80002774:	00c686b3          	add	a3,a3,a2
80002778:	00d7a023          	sw	a3,0(a5)
8000277c:	00d78633          	add	a2,a5,a3
80002780:	f8c71ae3          	bne	a4,a2,80002714 <_free_r+0x40>
80002784:	00072603          	lw	a2,0(a4) # ffffe000 <__stack_top+0x7fffa780>
80002788:	00472703          	lw	a4,4(a4)
8000278c:	00d606b3          	add	a3,a2,a3
80002790:	00d7a023          	sw	a3,0(a5)
80002794:	00e7a223          	sw	a4,4(a5)
80002798:	f7dff06f          	j	80002714 <_free_r+0x40>
8000279c:	00c47863          	bgeu	s0,a2,800027ac <_free_r+0xd8>
800027a0:	00c00793          	li	a5,12
800027a4:	00f4a023          	sw	a5,0(s1)
800027a8:	f6dff06f          	j	80002714 <_free_r+0x40>
800027ac:	00042603          	lw	a2,0(s0)
800027b0:	00c406b3          	add	a3,s0,a2
800027b4:	00d71a63          	bne	a4,a3,800027c8 <_free_r+0xf4>
800027b8:	00072683          	lw	a3,0(a4)
800027bc:	00472703          	lw	a4,4(a4)
800027c0:	00c686b3          	add	a3,a3,a2
800027c4:	00d42023          	sw	a3,0(s0)
800027c8:	00e42223          	sw	a4,4(s0)
800027cc:	0087a223          	sw	s0,4(a5)
800027d0:	f45ff06f          	j	80002714 <_free_r+0x40>
800027d4:	00008067          	ret

800027d8 <_read_r>:
_read_r():
800027d8:	ff010113          	addi	sp,sp,-16
800027dc:	00812423          	sw	s0,8(sp)
800027e0:	00050413          	mv	s0,a0
800027e4:	00058513          	mv	a0,a1
800027e8:	00060593          	mv	a1,a2
800027ec:	00068613          	mv	a2,a3
800027f0:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
800027f4:	00112623          	sw	ra,12(sp)
800027f8:	894fe0ef          	jal	ra,8000088c <_read>
800027fc:	fff00793          	li	a5,-1
80002800:	00f51a63          	bne	a0,a5,80002814 <_read_r+0x3c>
80002804:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80002808:	0007a783          	lw	a5,0(a5)
8000280c:	00078463          	beqz	a5,80002814 <_read_r+0x3c>
80002810:	00f42023          	sw	a5,0(s0)
80002814:	00c12083          	lw	ra,12(sp)
80002818:	00812403          	lw	s0,8(sp)
8000281c:	01010113          	addi	sp,sp,16
80002820:	00008067          	ret

80002824 <_fstat_r>:
_fstat_r():
80002824:	ff010113          	addi	sp,sp,-16
80002828:	00812423          	sw	s0,8(sp)
8000282c:	00050413          	mv	s0,a0
80002830:	00058513          	mv	a0,a1
80002834:	00060593          	mv	a1,a2
80002838:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
8000283c:	00112623          	sw	ra,12(sp)
80002840:	808fe0ef          	jal	ra,80000848 <_fstat>
80002844:	fff00793          	li	a5,-1
80002848:	00f51a63          	bne	a0,a5,8000285c <_fstat_r+0x38>
8000284c:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80002850:	0007a783          	lw	a5,0(a5)
80002854:	00078463          	beqz	a5,8000285c <_fstat_r+0x38>
80002858:	00f42023          	sw	a5,0(s0)
8000285c:	00c12083          	lw	ra,12(sp)
80002860:	00812403          	lw	s0,8(sp)
80002864:	01010113          	addi	sp,sp,16
80002868:	00008067          	ret

8000286c <_isatty_r>:
_isatty_r():
8000286c:	ff010113          	addi	sp,sp,-16
80002870:	00812423          	sw	s0,8(sp)
80002874:	00050413          	mv	s0,a0
80002878:	00058513          	mv	a0,a1
8000287c:	8e01a823          	sw	zero,-1808(gp) # 80002c70 <errno>
80002880:	00112623          	sw	ra,12(sp)
80002884:	fb5fd0ef          	jal	ra,80000838 <_isatty>
80002888:	fff00793          	li	a5,-1
8000288c:	00f51a63          	bne	a0,a5,800028a0 <_isatty_r+0x34>
80002890:	8f018793          	addi	a5,gp,-1808 # 80002c70 <errno>
80002894:	0007a783          	lw	a5,0(a5)
80002898:	00078463          	beqz	a5,800028a0 <_isatty_r+0x34>
8000289c:	00f42023          	sw	a5,0(s0)
800028a0:	00c12083          	lw	ra,12(sp)
800028a4:	00812403          	lw	s0,8(sp)
800028a8:	01010113          	addi	sp,sp,16
800028ac:	00008067          	ret

800028b0 <mrv_ext_irq_handler_table>:
800028b0:	800006fc 80000704 8000070c 80000714     ................
800028c0:	8000071c 80000724 8000072c 80000734     ....$...,...4...
800028d0:	8000073c 80000744 8000074c 80000754     <...D...L...T...
800028e0:	8000075c 80000764 8000076c 80000774     \...d...l...t...
800028f0:	8000077c 80000784 8000078c 80000794     |...............
80002900:	8000079c 800007a4 800007ac 800007b4     ................
80002910:	800007bc 800007c4 800007cc 800007d4     ................
80002920:	800007dc 800007e4 800007ec 800007f4     ................
80002930:	6e490a0d 6e726574 53206c61 65747379     ..Internal Syste
80002940:	6954206d 2072656d 65746e49 70757272     m Timer Interrup
80002950:	6f432074 65746e75 203d2072 00006425     t Counter = %d..
80002960:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
80002970:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002980:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002990:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
800029a0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
800029b0:	2a0a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ...*************
800029c0:	2a2a2a2a 202a2a2a 4d202020 20562d69     *******    Mi-V 
800029d0:	74737953 54206d65 72656d69 696c4220     System Timer Bli
800029e0:	20796b6e 6d617845 20656c70 2a202020     nky Example    *
800029f0:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002a00:	2a2a2a2a 0a0d2a2a 2a2a2a0a 2a2a2a2a     ******...*******
80002a10:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002a20:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002a30:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002a40:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
80002a50:	2a2a2a2a 0d2a2a2a 4f0a0d0a 72657362     *******....Obser
80002a60:	74206576 4c206568 20734445 6e696c62     ve the LEDs blin
80002a70:	676e696b 206e6f20 20656874 72616f62     king on the boar
80002a80:	54202e64 4c206568 70204445 65747461     d. The LED patte
80002a90:	63206e72 676e6168 65207365 79726576     rn changes every
80002aa0:	6d697420 20612065 74737973 74206d65      time a system t
80002ab0:	72656d69 746e6920 75727265 6f207470     imer interrupt o
80002ac0:	72756363 0a0d2e73 00000000              ccurs.......

80002acc <__sf_fake_stderr>:
	...

80002aec <__sf_fake_stdin>:
	...

80002b0c <__sf_fake_stdout>:
	...
80002b2c:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
80002b3c:	00004746 33323130 37363534 42413938     FG..0123456789AB
80002b4c:	46454443 00000000 33323130 37363534     CDEF....01234567
80002b5c:	62613938 66656463 00000000 00000000     89abcdef........
80002b6c:	00000000                                ....
